# Configurable variables ---------------------------------------------------

MODULE_NAME ?= new-project
MODULE_SYMBOL ?= NewProject
MODULE_EXPORTS ?=

MODULE_PATH ?= src/$(MODULE_NAME)
TEST_PATH ?= src/test
CONFIG_PATH ?= config
BUILD_PATH ?= build
BIN_PATH ?= node_modules/.bin

# Computed variables -------------------------------------------------------

TSC_BIN := $(BIN_PATH)/tsc
TSLINT_BIN := $(BIN_PATH)/tslint
ROLLUP_BIN := $(BIN_PATH)/rollup
BUBLE_BIN := $(BIN_PATH)/buble
TESTEM_BIN := $(BIN_PATH)/testem

TSC := $(TSC_BIN)
TSLINT := $(TSLINT_BIN) -c $(CONFIG_PATH)/tslint.json
ROLLUP := $(ROLLUP_BIN) -c $(CONFIG_PATH)/rollup.js -m inline
BUBLE := $(BUBLE_BIN) --yes dangerousForOf -m inline
TESTEM := $(TESTEM_BIN) -f $(CONFIG_PATH)/testem.json
NPM := npm --loglevel=error
YARN := yarn

MODULE_SRC := $(wildcard $(MODULE_PATH)/*.ts) package.json $(MODULE_PATH)/tsconfig.json $(CONFIG_PATH)/rollup.js $(CONFIG_PATH)/tslint.json
TEST_SRC := $(wildcard $(TEST_PATH)/*.ts) $(TEST_PATH)/tsconfig.json $(CONFIG_PATH)/tslint.json
SRC := $(MODULE_SRC) $(TEST_SRC)

MODULE_BUILD_TARGET := $(BUILD_PATH)/$(MODULE_NAME)
MODULE_BUILD_JS_TARGET := $(BUILD_PATH)/$(MODULE_NAME)/index.js
MODULE_BUILD_TYPING_TARGET := $(BUILD_PATH)/$(MODULE_NAME)/index.d.ts
TEST_BUILD_TARGET := $(BUILD_PATH)/test
TEST_BUILD_JS_TARGET := $(TEST_BUILD_TARGET)/index.js
DIST_TARGET := dist/$(MODULE_NAME).js


# Main rules ---------------------------------------------------------------

default: dist

init: init-config init-src init-deps

clean:
	@rm -fr $(MODULE_BUILD_TARGET) $(TEST_BUILD_TARGET) dist/*.js

all: dist test

dist: init $(DIST_TARGET)

test: dist $(TEST_BUILD_TARGET)

testem: test
	@$(TESTEM)


# Template sources ---------------------------------------------------------

define CONFIG_ROLLUP_JS
export default {
  entry: "./$(MODULE_BUILD_JS_TARGET)",
  moduleName: "$(MODULE_SYMBOL)",
  format: "umd"
}
endef
export CONFIG_ROLLUP_JS

define CONFIG_TESTEM_JSON
{
  "framework": "qunit",
  "src_files": [
    "src/*.ts",
    "test/*.ts"
  ],
  "serve_files": [
    "$(DIST_TARGET)",
    "build/test/*.js"
  ]
}
endef
export CONFIG_TESTEM_JSON

define CONFIG_TSLINT_JSON
{
  "rules": {
    "no-unused-expression": true,
    "no-unused-variable": true,
    "semicolon": "never",
    "quotemark": [true, "double", "avoid-escape"]
  }
}
endef
export CONFIG_TSLINT_JSON

define MODULE_TSCONFIG_JSON
{
  "compilerOptions": {
    "outDir": "../../$(MODULE_BUILD_TARGET)",
    "target": "es6",
    "module": "es2015",
    "pretty": true,
    "strictNullChecks": true,
    "experimentalDecorators": true,
    "inlineSourceMap": true
  }
}
endef
export MODULE_TSCONFIG_JSON

define TEST_TSCONFIG_JSON
{
  "compilerOptions": {
    "outDir": "../../$(TEST_BUILD_TARGET)",
    "target": "es6",
    "module": "es2015",
    "pretty": true,
    "strictNullChecks": true,
    "experimentalDecorators": true,
    "inlineSourceMap": true,
    "types": [
      "qunit",
      "$(MODULE_NAME)"
    ],
    "typeRoots": [
      "../../node_modules",
      "../../$(BUILD_PATH)"
    ]
  }
}
endef
export TEST_TSCONFIG_JSON

define MODULE_INDEX_D_TS
export as namespace $(MODULE_SYMBOL);
export { $(MODULE_EXPORTS) };
endef
export MODULE_INDEX_D_TS


# Project initialization ---------------------------------------------------

init-config: | $(CONFIG_PATH)/rollup.js $(CONFIG_PATH)/testem.json $(CONFIG_PATH)/tslint.json

$(CONFIG_PATH)/rollup.js: | $(CONFIG_PATH)
	@echo "$$CONFIG_ROLLUP_JS" > $@

$(CONFIG_PATH)/testem.json: | $(CONFIG_PATH)
	@echo "$$CONFIG_TESTEM_JSON" > $@

$(CONFIG_PATH)/tslint.json: | $(CONFIG_PATH)
	@echo "$$CONFIG_TSLINT_JSON" > $@

$(CONFIG_PATH):
	@mkdir -p $@

init-src: init-module init-test

init-module: | $(MODULE_PATH)/index.ts $(MODULE_PATH)/tsconfig.json

init-test: | $(TEST_PATH)/index.ts $(TEST_PATH)/tsconfig.json

$(MODULE_PATH)/index.ts: | $(MODULE_PATH)
	@touch $@

$(MODULE_PATH)/tsconfig.json: | $(MODULE_PATH)
	@echo "$$MODULE_TSCONFIG_JSON" > $@

$(MODULE_PATH): | src
	@mkdir -p $@

$(TEST_PATH)/index.ts: | $(TEST_PATH)
	@touch $@

$(TEST_PATH)/tsconfig.json: | $(TEST_PATH)
	@echo "$$TEST_TSCONFIG_JSON" > $@

$(TEST_PATH): | src
	@mkdir -p $@

src:
	@mkdir -p src

init-deps: yarn.lock $(BIN_PATH)

$(BIN_PATH):
	@$(YARN) install

yarn.lock:
	@$(YARN) init -y
	@$(YARN) add typescript tslint rollup buble testem @types/qunit


# Build targets ------------------------------------------------------------

$(DIST_TARGET): $(MODULE_BUILD_TARGET)
	@mkdir -p dist
	@$(ROLLUP) | $(BUBLE) > $@
	@echo "Built bundle $@"

$(MODULE_BUILD_TARGET): $(MODULE_BUILD_JS_TARGET) $(MODULE_BUILD_TYPING_TARGET)
	@touch $@
	@echo "Built $(MODULE_PATH) -> $@"

$(MODULE_BUILD_JS_TARGET): $(MODULE_SRC)
	@$(TSLINT) $(MODULE_PATH)/*.ts
	@$(TSC) -d -p $(MODULE_PATH)
	@mv $(MODULE_BUILD_TYPING_TARGET){,.1}

$(MODULE_BUILD_TYPING_TARGET): $(MODULE_BUILD_JS_TARGET)
	@echo "$$MODULE_INDEX_D_TS" >> $@.1
	@mv $@{.1,}

$(TEST_BUILD_TARGET): $(TEST_BUILD_JS_TARGET)
	@touch $@
	@echo "Built $(TEST_PATH) -> $@"

$(TEST_BUILD_JS_TARGET): $(TEST_SRC)
	@$(TSLINT) $(TEST_PATH)/*.ts
	@$(TSC) -p $(TEST_PATH)


# Virtual targets ------------------------------------------------------------

watch:
	@fswatch -or $(MODULE_SRC) $(TEST_SRC) | xargs -n 1 -I {} make

.PHONY: init init-config init-src init-module init-test init-deps clean test watch
