// Generated by dts-bundle v0.7.2

export class Selector {
    static get(source: any): Selector;
    source: string;
    attributeSet: Set<string>;
    constructor(source: any);
    readonly attributes: string[];
    matches(element: Element): boolean;
    toString(): string;
}

export interface AttributeObserverDelegate {
    elementMatchedAttribute(element: Element, attributeName: string): any;
    elementAttributeValueChanged(element: Element, attributeName: string): any;
    elementUnmatchedAttribute(element: Element, attributeName: string): any;
}
export class AttributeObserver implements ElementObserverDelegate {
    attributeName: string;
    constructor(element: Element, attributeName: string, delegate: AttributeObserverDelegate);
    readonly element: Element;
    readonly selector: string;
    start(): void;
    stop(): void;
    matchElement(element: Element): boolean;
    matchElementsInTree(tree: Element): Element[];
    elementMatched(element: Element): void;
    elementUnmatched(element: Element): void;
    elementAttributeChanged(element: Element, attributeName: string): void;
}

export interface ElementObserverDelegate {
    matchElement(element: Element): boolean;
    matchElementsInTree(tree: Element): Element[];
    elementMatched(element: Element): any;
    elementUnmatched(element: Element): any;
    elementAttributeChanged(element: Element, attributeName: string): any;
}
export class ElementObserver {
    element: Element;
    started: boolean;
    constructor(element: any, delegate: any);
    start(): void;
    stop(): void;
    refresh(): void;
}

export interface SelectorObserverDelegate {
    elementMatchedSelector(element: Element, selector: Selector): any;
    elementUnmatchedSelector(element: Element, selector: Selector): any;
}
export class SelectorObserver implements ElementObserverDelegate {
    constructor(element: Element, delegate: SelectorObserverDelegate);
    readonly started: boolean;
    start(): void;
    stop(): void;
    refresh(): void;
    readonly element: Element;
    readonly selectors: Selector[];
    readonly compositeSelector: string;
    observeSelector(selector: Selector): void;
    stopObservingSelector(selector: Selector): void;
    matchElement(element: Element): boolean;
    matchElementsInTree(tree: Element): Element[];
    elementMatched(element: Element): void;
    elementUnmatched(element: Element): void;
    elementAttributeChanged(element: Element, attributeName: string): void;
}

export interface TokenListObserverDelegate {
    elementMatchedTokenForAttribute(element: Element, token: string, attributeName: string): any;
    elementUnmatchedTokenForAttribute(element: Element, token: string, attributeName: string): any;
}
export class TokenListObserver implements ElementObserverDelegate {
    attributeName: string;
    constructor(element: Element, attributeName: string, delegate: TokenListObserverDelegate);
    readonly started: boolean;
    start(): void;
    stop(): void;
    refresh(): void;
    readonly element: Element;
    readonly selector: string;
    getElementsMatchingToken(token: string): Element[];
    matchElement(element: Element): boolean;
    matchElementsInTree(tree: Element): Element[];
    elementMatched(element: Element): void;
    elementUnmatched(element: Element): void;
    elementAttributeChanged(element: Element): void;
    addTokenForElement(token: string, element: Element): void;
    removeTokenForElement(token: string, element: Element): void;
    getTokensForElement(element: Element): string[];
    readTokenSetForElement(element: Element): Set<string>;
}

