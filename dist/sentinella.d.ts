// Generated by dts-bundle v0.7.2

declare module 'sentinella' {
    export { Selector } from "sentinella/selector";
    export { ElementObserver, ElementObserverDelegate } from "sentinella/element_observer";
    export { SelectorObserver, SelectorObserverDelegate } from "sentinella/selector_observer";
    export { TokenListObserver, TokenListObserverDelegate } from "sentinella/token_list_observer";
}

declare module 'sentinella/selector' {
    export class Selector {
        static get(source: any): Selector;
        source: string;
        attributeSet: Set<string>;
        constructor(source: any);
        readonly attributes: string[];
        matches(element: Element): boolean;
        toString(): string;
    }
}

declare module 'sentinella/element_observer' {
    export interface ElementObserverDelegate {
        matchElement(element: Element): boolean;
        matchElementsInTree(tree: Element): Element[];
        elementMatched(element: Element): any;
        elementUnmatched(element: Element): any;
        elementAttributeChanged(element: Element, attributeName: string): any;
    }
    export class ElementObserver {
        element: Element;
        started: boolean;
        constructor(element: any, delegate: any);
        start(): void;
        stop(): void;
        refresh(): void;
    }
}

declare module 'sentinella/selector_observer' {
    import { ElementObserverDelegate } from "sentinella/element_observer";
    import { Selector } from "sentinella/selector";
    export interface SelectorObserverDelegate {
        elementMatchedSelector(element: Element, selector: Selector): any;
        elementUnmatchedSelector(element: Element, selector: Selector): any;
    }
    export class SelectorObserver implements ElementObserverDelegate {
        constructor(element: Element, delegate: SelectorObserverDelegate);
        readonly started: boolean;
        start(): void;
        stop(): void;
        refresh(): void;
        readonly element: Element;
        readonly selectors: Selector[];
        readonly compositeSelector: string;
        observeSelector(selector: Selector): void;
        stopObservingSelector(selector: Selector): void;
        matchElement(element: Element): boolean;
        matchElementsInTree(tree: Element): Element[];
        elementMatched(element: Element): void;
        elementUnmatched(element: Element): void;
        elementAttributeChanged(element: Element, attributeName: string): void;
    }
}

declare module 'sentinella/token_list_observer' {
    import { ElementObserverDelegate } from "sentinella/element_observer";
    export interface TokenListObserverDelegate {
        elementMatchedTokenForAttribute(element: Element, token: string, attributeName: string): any;
        elementUnmatchedTokenForAttribute(element: Element, token: string, attributeName: string): any;
    }
    export class TokenListObserver implements ElementObserverDelegate {
        attributeName: string;
        constructor(element: Element, attributeName: string, delegate: TokenListObserverDelegate);
        readonly started: boolean;
        start(): void;
        stop(): void;
        refresh(): void;
        readonly element: Element;
        readonly selector: string;
        getElementsMatchingToken(token: string): Element[];
        matchElement(element: Element): boolean;
        matchElementsInTree(tree: Element): Element[];
        elementMatched(element: Element): void;
        elementUnmatched(element: Element): void;
        elementAttributeChanged(element: Element): void;
        addTokenForElement(token: string, element: Element): void;
        removeTokenForElement(token: string, element: Element): void;
        getTokensForElement(element: Element): string[];
        readTokenSetForElement(element: Element): Set<string>;
    }
}

