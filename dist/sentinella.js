(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.Sentinella = global.Sentinella || {})));
}(this, (function (exports) { 'use strict';

var ElementObserver = function ElementObserver(element, delegate) {
    var this$1 = this;

    this.element = element;
    this.delegate = delegate;
    this.elements = new Set();
    this.mutationObserver = new MutationObserver(function (mutations) { return this$1.processMutations(mutations); });
    this.started = false;
};
ElementObserver.prototype.start = function start () {
    if (!this.started) {
        this.mutationObserver.observe(this.element, { attributes: true, childList: true, subtree: true });
        this.started = true;
        this.refresh();
    }
};
ElementObserver.prototype.stop = function stop () {
    if (this.started) {
        this.mutationObserver.takeRecords();
        this.mutationObserver.disconnect();
        this.started = false;
    }
};
ElementObserver.prototype.refresh = function refresh () {
        var this$1 = this;

    if (this.started) {
        var matches = new Set(this.matchElementsInTree());
        for (var i = 0, list = Array.from(this$1.elements); i < list.length; i += 1) {
            var element = list[i];

                if (!matches.has(element)) {
                this$1.removeElement(element);
            }
        }
        for (var i$1 = 0, list$1 = Array.from(matches); i$1 < list$1.length; i$1 += 1) {
            var element$1 = list$1[i$1];

                this$1.addElement(element$1);
        }
    }
};
// Mutation record processing
ElementObserver.prototype.processMutations = function processMutations (mutations) {
        var this$1 = this;

    for (var i = 0, list = mutations; i < list.length; i += 1) {
        var mutation = list[i];

            this$1.processMutation(mutation);
    }
};
ElementObserver.prototype.processMutation = function processMutation (mutation) {
    if (mutation.type == "attributes") {
        this.processAttributeChange(mutation.target, mutation.attributeName);
    }
    else if (mutation.type == "childList") {
        this.processRemovedNodes(mutation.removedNodes);
        this.processAddedNodes(mutation.addedNodes);
    }
};
ElementObserver.prototype.processAttributeChange = function processAttributeChange (node, attributeName) {
    var element = node;
    if (this.elements.has(element)) {
        if (this.matchElement(element)) {
            this.delegate.elementAttributeChanged(element, attributeName);
        }
        else {
            this.removeElement(element);
        }
    }
    else if (this.matchElement(element)) {
        this.addElement(element);
    }
};
ElementObserver.prototype.processRemovedNodes = function processRemovedNodes (nodes) {
        var this$1 = this;

    for (var i = 0, list = nodes; i < list.length; i += 1) {
        var node = list[i];

            this$1.processNode(node, this$1.removeElement);
    }
};
ElementObserver.prototype.processAddedNodes = function processAddedNodes (nodes) {
        var this$1 = this;

    for (var i = 0, list = nodes; i < list.length; i += 1) {
        var node = list[i];

            this$1.processNode(node, this$1.addElement);
    }
};
// Element matching
ElementObserver.prototype.matchElement = function matchElement (element) {
    return this.delegate.matchElement(element);
};
ElementObserver.prototype.matchElementsInTree = function matchElementsInTree (tree) {
        if ( tree === void 0 ) tree = this.element;

    return this.delegate.matchElementsInTree(tree);
};
ElementObserver.prototype.processNode = function processNode (node, processor) {
        var this$1 = this;

    var tree = this.elementFromNode(node);
    if (tree) {
        for (var i = 0, list = this$1.matchElementsInTree(tree); i < list.length; i += 1) {
            var element = list[i];

                processor.call(this$1, element);
        }
    }
};
ElementObserver.prototype.elementFromNode = function elementFromNode (node) {
    if (node.nodeType == Node.ELEMENT_NODE) {
        return node;
    }
};
// Element tracking
ElementObserver.prototype.addElement = function addElement (element) {
    if (!this.elements.has(element)) {
        this.elements.add(element);
        this.delegate.elementMatched(element);
    }
};
ElementObserver.prototype.removeElement = function removeElement (element) {
    if (this.elements.has(element)) {
        this.elements.delete(element);
        this.delegate.elementUnmatched(element);
    }
};

var Selector = function Selector(source) {
    try {
        this.source = source;
        this.tokens = Token.readTokens(this.source);
        this.attributeSet = attributesFromTokens(this.tokens);
    }
    catch (error) {
        throw new Error(("Error in selector '" + source + "': " + (error.message)));
    }
};

var prototypeAccessors = { attributes: {} };
Selector.get = function get (source) {
    var selector;
    var selectors = Selector.selectors;
    source = source.toString().trim();
    if (selectors.has(source)) {
        selector = selectors.get(source);
    }
    else {
        selector = new Selector(source);
        selectors.set(source, selector);
    }
    return selector;
};
prototypeAccessors.attributes.get = function () {
    return Array.from(this.attributeSet);
};
Selector.prototype.matches = function matches (element) {
    return element.matches(this.source);
};
Selector.prototype.toString = function toString () {
    return this.source;
};

Object.defineProperties( Selector.prototype, prototypeAccessors );
Selector.selectors = new Map();
var TokenType;
(function (TokenType) {
    TokenType[TokenType["TAG"] = 0] = "TAG";
    TokenType[TokenType["ID"] = 1] = "ID";
    TokenType[TokenType["CLASS"] = 2] = "CLASS";
    TokenType[TokenType["ATTR"] = 3] = "ATTR";
})(TokenType || (TokenType = {}));
var Token = function Token(type, value, data, negated) {
    this.type = type;
    this.value = value;
    this.data = data || "";
    this.negated = negated;
};

var prototypeAccessors$1 = { attribute: {},length: {} };
Token.readTokens = function readTokens (source) {
    var token = Token.readToken(source, TokenType.TAG) ||
        Token.readToken(source, TokenType.ID) ||
        Token.readToken(source, TokenType.CLASS) ||
        Token.readToken(source, TokenType.ATTR);
    if (token) {
        var rest = source.slice(token.length);
        return [token ].concat( Token.readTokens(rest));
    }
    else if (source.length == 0) {
        return [];
    }
    else {
        throw new Error(("Invalid or unsupported syntax near '" + source + "'"));
    }
};
Token.readToken = function readToken (source, type) {
    var pattern = Token.PATTERNS[type];
    var negated = source.slice(0, 5) == ":not(";
    var offset = negated ? 5 : 0;
    var match = source.slice(offset).match(pattern);
    if (match) {
        var value = match[0];
            var data = match[1];
        if (negated) {
            if (source.charAt(value.length + offset) == ")") {
                return new Token(type, (":not(" + value + ")"), data, true);
            }
            else {
                throw new Error(("Expected close-parenthesis after ':not(" + value + "'"));
            }
        }
        else {
            return new Token(type, value, data, false);
        }
    }
};
prototypeAccessors$1.attribute.get = function () {
    switch (this.type) {
        case TokenType.ID: return "id";
        case TokenType.CLASS: return "class";
        case TokenType.ATTR: return this.data;
    }
};
prototypeAccessors$1.length.get = function () {
    return this.value.length;
};

Object.defineProperties( Token.prototype, prototypeAccessors$1 );
Token.PATTERNS = function () {
    var UNICODE = "\\\\[0-9a-fA-F]{1,6}(?:\\r\\n|[ \\n\\r\\t\\f])?";
    var ESCAPE = "(?:" + UNICODE + ")|\\\\[^\\n\\r\\f0-9a-fA-F]";
    var NL = "\\n|\\r\\n|\\r|\\f";
    var NONASCII = "[^\\0-\\177]";
    var NMSTART = "[_a-zA-Z]|(?:" + NONASCII + ")|(?:" + ESCAPE + ")";
    var NMCHAR = "[_a-zA-Z0-9-]|(?:" + NONASCII + ")|(?:" + ESCAPE + ")";
    var IDENT = "-?(?:" + NMSTART + ")(?:" + NMCHAR + ")*";
    var STRING1 = "\"(?:[^\\n\\r\\f\\\\\"]|\\\\(?:" + NL + ")|(?:" + ESCAPE + "))*";
    var STRING2 = "'(?:[^\\n\\r\\f\\\\']|\\\\(?:" + NL + ")|(?:" + ESCAPE + "))*";
    var STRING = "(?:" + STRING1 + ")|(?:" + STRING2 + ")";
    var ATTROP = "=|~=|\\|=|\\^=|\\$=|\\*=";
    var ATTRVAL = "(?:" + IDENT + ")|(?:" + STRING + ")";
    return ( obj = {}, obj[TokenType.TAG] = new RegExp(("^(" + IDENT + ")")), obj[TokenType.ID] = new RegExp(("^#(" + IDENT + ")")), obj[TokenType.CLASS] = new RegExp(("^\\.(" + IDENT + ")")), obj[TokenType.ATTR] = new RegExp(("^\\[(" + IDENT + ")(?:(" + ATTROP + ")(" + ATTRVAL + "))?\\]")), obj );
    var obj;
}();
function attributesFromTokens(tokens) {
    var result = new Set();
    for (var i = 0, list = tokens; i < list.length; i += 1) {
        var token = list[i];

        var attribute = token.attribute;
        if (attribute != undefined) {
            result.add(attribute);
        }
    }
    return result;
}

var Multimap = function Multimap() {
    this.valuesByKey = new Map();
    this.keysByValue = new Map();
};
Multimap.prototype.add = function add$1 (key, value) {
    add(key, value, this.valuesByKey);
    add(value, key, this.keysByValue);
};
Multimap.prototype.delete = function delete$1 (key, value) {
    del(key, value, this.valuesByKey);
    del(value, key, this.keysByValue);
};
Multimap.prototype.has = function has (key, value) {
    var values = this.valuesByKey.get(key);
    return values ? values.has(value) : false;
};
Multimap.prototype.getKeysForValue = function getKeysForValue (value) {
    var keys = this.keysByValue.get(value);
    return keys ? Array.from(keys) : [];
};
Multimap.prototype.getValuesForKey = function getValuesForKey (key) {
    var values = this.valuesByKey.get(key);
    return values ? Array.from(values) : [];
};
Multimap.prototype.getValueCountForKey = function getValueCountForKey (key) {
    var values = this.valuesByKey.get(key);
    return values ? values.size : 0;
};
function add(a, b, bsByA) {
    var bs;
    if (bsByA.has(a)) {
        bs = bsByA.get(a);
    }
    else {
        bs = new Set();
        bsByA.set(a, bs);
    }
    bs.add(b);
}
function del(a, b, bsByA) {
    var bs = bsByA.get(a);
    if (bs) {
        bs.delete(b);
    }
}

var SelectorObserver = function SelectorObserver(element, delegate) {
    this.elementObserver = new ElementObserver(element, this);
    this.delegate = delegate;
    this.selectorSet = new Set();
    this.elements = new Multimap();
    this.attributes = new Multimap();
};

var prototypeAccessors$2 = { started: {},element: {},selectors: {},compositeSelector: {} };
prototypeAccessors$2.started.get = function () {
    return this.elementObserver.started;
};
SelectorObserver.prototype.start = function start () {
    this.elementObserver.start();
};
SelectorObserver.prototype.stop = function stop () {
    this.elementObserver.stop();
};
SelectorObserver.prototype.refresh = function refresh () {
    this.elementObserver.refresh();
};
prototypeAccessors$2.element.get = function () {
    return this.elementObserver.element;
};
prototypeAccessors$2.selectors.get = function () {
    return Array.from(this.selectorSet);
};
prototypeAccessors$2.compositeSelector.get = function () {
    var compositeSelector = Array.from(this.selectorSet).join(", ");
    return compositeSelector.length == 0 ? ":not(*)" : compositeSelector;
};
// Selector observation
SelectorObserver.prototype.observeSelector = function observeSelector (selector) {
        var this$1 = this;

    if (!this.selectorSet.has(selector)) {
        this.selectorSet.add(selector);
        for (var i = 0, list = selector.attributes; i < list.length; i += 1) {
            var attribute = list[i];

                this$1.attributes.add(selector, attribute);
        }
        this.refresh();
    }
};
SelectorObserver.prototype.stopObservingSelector = function stopObservingSelector (selector) {
        var this$1 = this;

    if (this.selectorSet.has(selector)) {
        this.selectorSet.delete(selector);
        for (var i = 0, list = selector.attributes; i < list.length; i += 1) {
            var attribute = list[i];

                this$1.attributes.delete(selector, attribute);
        }
        this.refresh();
    }
};
// Element observer delegate
SelectorObserver.prototype.matchElement = function matchElement (element) {
    return element.matches(this.compositeSelector);
};
SelectorObserver.prototype.matchElementsInTree = function matchElementsInTree (tree) {
    var match = tree.matches(this.compositeSelector) ? [tree] : [];
    var matches = Array.from(tree.querySelectorAll(this.compositeSelector));
    return match.concat(matches);
};
SelectorObserver.prototype.elementMatched = function elementMatched (element) {
        var this$1 = this;

    for (var i = 0, list = this$1.selectors; i < list.length; i += 1) {
        var selector = list[i];

            if (!this$1.elements.has(selector, element)) {
            if (selector.matches(element)) {
                this$1.recordMatch(selector, element);
            }
        }
    }
};
SelectorObserver.prototype.elementUnmatched = function elementUnmatched (element) {
        var this$1 = this;

    for (var i = 0, list = this$1.selectors; i < list.length; i += 1) {
        var selector = list[i];

            if (this$1.elements.has(selector, element)) {
            this$1.recordUnmatch(selector, element);
        }
    }
};
SelectorObserver.prototype.elementAttributeChanged = function elementAttributeChanged (element, attributeName) {
        var this$1 = this;

    for (var i = 0, list = this$1.attributes.getKeysForValue(attributeName); i < list.length; i += 1) {
        var selector = list[i];

            var matched = selector.matches(element);
        var present = this$1.elements.has(selector, element);
        if (matched && !present) {
            this$1.recordMatch(selector, element);
        }
        else if (present && !matched) {
            this$1.recordUnmatch(selector, element);
        }
    }
};
// Element bookkeeping
SelectorObserver.prototype.recordMatch = function recordMatch (selector, element) {
    this.elements.add(selector, element);
    this.delegate.elementMatchedSelector(element, selector);
};
SelectorObserver.prototype.recordUnmatch = function recordUnmatch (selector, element) {
    this.elements.delete(selector, element);
    this.delegate.elementUnmatchedSelector(element, selector);
};

Object.defineProperties( SelectorObserver.prototype, prototypeAccessors$2 );

var TokenListObserver = function TokenListObserver(element, attributeName, delegate) {
    this.elementObserver = new ElementObserver(element, this);
    this.attributeName = attributeName;
    this.delegate = delegate;
    this.tokensByElement = new Multimap();
};

var prototypeAccessors$3 = { started: {},element: {},selector: {} };
prototypeAccessors$3.started.get = function () {
    return this.elementObserver.started;
};
TokenListObserver.prototype.start = function start () {
    this.elementObserver.start();
};
TokenListObserver.prototype.stop = function stop () {
    this.elementObserver.stop();
};
TokenListObserver.prototype.refresh = function refresh () {
    this.elementObserver.refresh();
};
prototypeAccessors$3.element.get = function () {
    return this.elementObserver.element;
};
prototypeAccessors$3.selector.get = function () {
    return ("[" + (this.attributeName) + "]");
};
TokenListObserver.prototype.getElementsMatchingToken = function getElementsMatchingToken (token) {
    return this.tokensByElement.getKeysForValue(token);
};
// Element observer delegate
TokenListObserver.prototype.matchElement = function matchElement (element) {
    return element.hasAttribute(this.attributeName);
};
TokenListObserver.prototype.matchElementsInTree = function matchElementsInTree (tree) {
    var match = tree.matches(this.selector) ? [tree] : [];
    var matches = Array.from(tree.querySelectorAll(this.selector));
    return match.concat(matches);
};
TokenListObserver.prototype.elementMatched = function elementMatched (element) {
        var this$1 = this;

    var newTokens = Array.from(this.readTokenSetForElement(element));
    for (var i = 0, list = newTokens; i < list.length; i += 1) {
        var token = list[i];

            this$1.addTokenForElement(token, element);
    }
};
TokenListObserver.prototype.elementUnmatched = function elementUnmatched (element) {
        var this$1 = this;

    var tokens = this.getTokensForElement(element);
    for (var i = 0, list = tokens; i < list.length; i += 1) {
        var token = list[i];

            this$1.removeTokenForElement(token, element);
    }
};
TokenListObserver.prototype.elementAttributeChanged = function elementAttributeChanged (element) {
        var this$1 = this;

    var newTokenSet = this.readTokenSetForElement(element);
    for (var i = 0, list = Array.from(newTokenSet); i < list.length; i += 1) {
        var token = list[i];

            this$1.addTokenForElement(token, element);
    }
    for (var i$1 = 0, list$1 = this$1.getTokensForElement(element); i$1 < list$1.length; i$1 += 1) {
        var token$1 = list$1[i$1];

            if (!newTokenSet.has(token$1)) {
            this$1.removeTokenForElement(token$1, element);
        }
    }
};
// Private
TokenListObserver.prototype.addTokenForElement = function addTokenForElement (token, element) {
    if (!this.tokensByElement.has(element, token)) {
        this.tokensByElement.add(element, token);
        this.delegate.elementMatchedTokenForAttribute(element, token, this.attributeName);
    }
};
TokenListObserver.prototype.removeTokenForElement = function removeTokenForElement (token, element) {
    if (this.tokensByElement.has(element, token)) {
        this.tokensByElement.delete(element, token);
        this.delegate.elementUnmatchedTokenForAttribute(element, token, this.attributeName);
    }
};
TokenListObserver.prototype.getTokensForElement = function getTokensForElement (element) {
    return this.tokensByElement.getValuesForKey(element);
};
TokenListObserver.prototype.readTokenSetForElement = function readTokenSetForElement (element) {
    var tokens = new Set();
    var value = element.getAttribute(this.attributeName) || "";
    for (var i = 0, list = value.split(/\s+/); i < list.length; i += 1) {
        var token = list[i];

            if (token.length) {
            tokens.add(token);
        }
    }
    return tokens;
};

Object.defineProperties( TokenListObserver.prototype, prototypeAccessors$3 );

exports.ElementObserver = ElementObserver;
exports.Selector = Selector;
exports.SelectorObserver = SelectorObserver;
exports.TokenListObserver = TokenListObserver;

Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
