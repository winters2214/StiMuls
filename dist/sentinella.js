(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.Sentinella = factory());
}(this, (function () { 'use strict';

var ElementObserver = function ElementObserver(element, delegate) {
    var this$1 = this;

    this.element = element;
    this.delegate = delegate;
    this.elements = new Set();
    this.mutationObserver = new MutationObserver(function (mutations) { return this$1.processMutations(mutations); });
    this.started = false;
};
ElementObserver.prototype.start = function start () {
    if (!this.started) {
        this.mutationObserver.observe(this.element, { attributes: true, childList: true, subtree: true });
        this.started = true;
        this.refresh();
    }
};
ElementObserver.prototype.stop = function stop () {
    if (this.started) {
        this.mutationObserver.takeRecords();
        this.mutationObserver.disconnect();
        this.started = false;
    }
};
ElementObserver.prototype.refresh = function refresh () {
        var this$1 = this;

    if (this.started) {
        var matches = new Set(this.matchElementsInTree());
        for (var i = 0, list = Array.from(this$1.elements); i < list.length; i += 1) {
            var element = list[i];

                if (!matches.has(element)) {
                this$1.removeElement(element);
            }
        }
        for (var i$1 = 0, list$1 = Array.from(matches); i$1 < list$1.length; i$1 += 1) {
            var element$1 = list$1[i$1];

                this$1.addElement(element$1);
        }
    }
};
// Mutation record processing
ElementObserver.prototype.processMutations = function processMutations (mutations) {
        var this$1 = this;

    for (var i = 0, list = mutations; i < list.length; i += 1) {
        var mutation = list[i];

            this$1.processMutation(mutation);
    }
};
ElementObserver.prototype.processMutation = function processMutation (mutation) {
    if (mutation.type == "attributes") {
        this.processAttributeChange(mutation.target, mutation.attributeName);
    }
    else if (mutation.type == "childList") {
        this.processRemovedNodes(mutation.removedNodes);
        this.processAddedNodes(mutation.addedNodes);
    }
};
ElementObserver.prototype.processAttributeChange = function processAttributeChange (node, attributeName) {
    var element = node;
    if (this.elements.has(element)) {
        if (this.matchElement(element)) {
            this.delegate.elementAttributeChanged(element, attributeName);
        }
        else {
            this.removeElement(element);
        }
    }
    else if (this.matchElement(element)) {
        this.addElement(element);
    }
};
ElementObserver.prototype.processRemovedNodes = function processRemovedNodes (nodes) {
        var this$1 = this;

    for (var i = 0, list = nodes; i < list.length; i += 1) {
        var node = list[i];

            this$1.processNode(node, this$1.removeElement);
    }
};
ElementObserver.prototype.processAddedNodes = function processAddedNodes (nodes) {
        var this$1 = this;

    for (var i = 0, list = nodes; i < list.length; i += 1) {
        var node = list[i];

            this$1.processNode(node, this$1.addElement);
    }
};
// Element matching
ElementObserver.prototype.matchElement = function matchElement (element) {
    return this.delegate.matchElement(element);
};
ElementObserver.prototype.matchElementsInTree = function matchElementsInTree (tree) {
        if ( tree === void 0 ) tree = this.element;

    return this.delegate.matchElementsInTree(tree);
};
ElementObserver.prototype.processNode = function processNode (node, processor) {
        var this$1 = this;

    var tree = this.elementFromNode(node);
    if (tree) {
        for (var i = 0, list = this$1.matchElementsInTree(tree); i < list.length; i += 1) {
            var element = list[i];

                processor.call(this$1, element);
        }
    }
};
ElementObserver.prototype.elementFromNode = function elementFromNode (node) {
    if (node.nodeType == Node.ELEMENT_NODE) {
        return node;
    }
};
// Element tracking
ElementObserver.prototype.addElement = function addElement (element) {
    if (!this.elements.has(element)) {
        this.elements.add(element);
        this.delegate.elementMatched(element);
    }
};
ElementObserver.prototype.removeElement = function removeElement (element) {
    if (this.elements.has(element)) {
        this.elements.delete(element);
        this.delegate.elementUnmatched(element);
    }
};

var Multimap = function Multimap() {
    this.valuesByKey = new Map();
    this.keysByValue = new Map();
};
Multimap.prototype.add = function add$1 (key, value) {
    add(key, value, this.valuesByKey);
    add(value, key, this.keysByValue);
};
Multimap.prototype.delete = function delete$1 (key, value) {
    del(key, value, this.valuesByKey);
    del(value, key, this.keysByValue);
};
Multimap.prototype.has = function has (key, value) {
    var values = this.valuesByKey.get(key);
    return values ? values.has(value) : false;
};
Multimap.prototype.getKeysForValue = function getKeysForValue (value) {
    var keys = this.keysByValue.get(value);
    return keys ? Array.from(keys) : [];
};
Multimap.prototype.getValuesForKey = function getValuesForKey (key) {
    var values = this.valuesByKey.get(key);
    return values ? Array.from(values) : [];
};
Multimap.prototype.getValueCountForKey = function getValueCountForKey (key) {
    var values = this.valuesByKey.get(key);
    return values ? values.size : 0;
};
function add(a, b, bsByA) {
    var bs;
    if (bsByA.has(a)) {
        bs = bsByA.get(a);
    }
    else {
        bs = new Set();
        bsByA.set(a, bs);
    }
    bs.add(b);
}
function del(a, b, bsByA) {
    var bs = bsByA.get(a);
    if (bs) {
        bs.delete(b);
    }
}

var TokenListObserver = function TokenListObserver(element, attributeName, delegate) {
    this.elementObserver = new ElementObserver(element, this);
    this.attributeName = attributeName;
    this.delegate = delegate;
    this.tokensByElement = new Multimap();
};

var prototypeAccessors = { started: {},element: {},selector: {} };
prototypeAccessors.started.get = function () {
    return this.elementObserver.started;
};
TokenListObserver.prototype.start = function start () {
    this.elementObserver.start();
};
TokenListObserver.prototype.stop = function stop () {
    this.elementObserver.stop();
};
TokenListObserver.prototype.refresh = function refresh () {
    this.elementObserver.refresh();
};
prototypeAccessors.element.get = function () {
    return this.elementObserver.element;
};
prototypeAccessors.selector.get = function () {
    return ("[" + (this.attributeName) + "]");
};
TokenListObserver.prototype.getElementsMatchingToken = function getElementsMatchingToken (token) {
    return this.tokensByElement.getKeysForValue(token);
};
// Element observer delegate
TokenListObserver.prototype.matchElement = function matchElement (element) {
    return element.hasAttribute(this.attributeName);
};
TokenListObserver.prototype.matchElementsInTree = function matchElementsInTree (tree) {
    var match = tree.matches(this.selector) ? [tree] : [];
    var matches = Array.from(tree.querySelectorAll(this.selector));
    return match.concat(matches);
};
TokenListObserver.prototype.elementMatched = function elementMatched (element) {
        var this$1 = this;

    var newTokens = Array.from(this.readTokenSetForElement(element));
    for (var i = 0, list = newTokens; i < list.length; i += 1) {
        var token = list[i];

            this$1.addTokenForElement(token, element);
    }
};
TokenListObserver.prototype.elementUnmatched = function elementUnmatched (element) {
        var this$1 = this;

    var tokens = this.getTokensForElement(element);
    for (var i = 0, list = tokens; i < list.length; i += 1) {
        var token = list[i];

            this$1.removeTokenForElement(token, element);
    }
};
TokenListObserver.prototype.elementAttributeChanged = function elementAttributeChanged (element) {
        var this$1 = this;

    var newTokenSet = this.readTokenSetForElement(element);
    for (var i = 0, list = Array.from(newTokenSet); i < list.length; i += 1) {
        var token = list[i];

            this$1.addTokenForElement(token, element);
    }
    for (var i$1 = 0, list$1 = this$1.getTokensForElement(element); i$1 < list$1.length; i$1 += 1) {
        var token$1 = list$1[i$1];

            if (!newTokenSet.has(token$1)) {
            this$1.removeTokenForElement(token$1, element);
        }
    }
};
// Private
TokenListObserver.prototype.addTokenForElement = function addTokenForElement (token, element) {
    if (!this.tokensByElement.has(element, token)) {
        this.tokensByElement.add(element, token);
        this.delegate.elementMatchedTokenForAttribute(element, token, this.attributeName);
    }
};
TokenListObserver.prototype.removeTokenForElement = function removeTokenForElement (token, element) {
    if (this.tokensByElement.has(element, token)) {
        this.tokensByElement.delete(element, token);
        this.delegate.elementUnmatchedTokenForAttribute(element, token, this.attributeName);
    }
};
TokenListObserver.prototype.getTokensForElement = function getTokensForElement (element) {
    return this.tokensByElement.getValuesForKey(element);
};
TokenListObserver.prototype.readTokenSetForElement = function readTokenSetForElement (element) {
    var tokens = new Set();
    var value = element.getAttribute(this.attributeName) || "";
    for (var i = 0, list = value.split(/\s+/); i < list.length; i += 1) {
        var token = list[i];

            if (token.length) {
            tokens.add(token);
        }
    }
    return tokens;
};

Object.defineProperties( TokenListObserver.prototype, prototypeAccessors );

var Router = function Router(element, attributeName) {
    this.attributeName = attributeName;
    this.tokenListObserver = new TokenListObserver(element, attributeName, this);
    this.controllerConstructors = new Map();
    this.controllerMaps = new WeakMap();
    this.connectedControllers = new Set();
};

var prototypeAccessors$1 = { element: {} };
prototypeAccessors$1.element.get = function () {
    return this.tokenListObserver.element;
};
Router.prototype.start = function start () {
    this.tokenListObserver.start();
};
Router.prototype.stop = function stop () {
    this.tokenListObserver.stop();
};
// Controllers
Router.prototype.register = function register (name, controllerConstructor) {
    if (this.controllerConstructors.has(name)) {
        throw new Error(("Router already has a controller registered with the name '" + name + "'"));
    }
    this.controllerConstructors.set(name, controllerConstructor);
    this.connectControllers(name);
};
Router.prototype.connectControllers = function connectControllers (name) {
        var this$1 = this;

    var elements = this.tokenListObserver.getElementsMatchingToken(name);
    for (var i = 0, list = elements; i < list.length; i += 1) {
        var element = list[i];

            this$1.connectControllerForElement(name, element);
    }
};
Router.prototype.connectControllerForElement = function connectControllerForElement (name, element) {
    var controller = this.fetchControllerForElement(name, element);
    if (controller && !this.connectedControllers.has(controller)) {
        this.connectedControllers.add(controller);
        controller.connect();
    }
};
Router.prototype.disconnectControllerForElement = function disconnectControllerForElement (name, element) {
    var controller = this.fetchControllerForElement(name, element);
    if (controller && this.connectedControllers.has(controller)) {
        this.connectedControllers.delete(controller);
        controller.disconnect();
    }
};
Router.prototype.fetchControllerForElement = function fetchControllerForElement (name, element) {
    var constructor = this.controllerConstructors.get(name);
    if (constructor) {
        var controllerMap = this.fetchControllerMapForElement(element);
        var controller = controllerMap.get(name);
        if (!controller) {
            controller = new constructor(element);
            controllerMap.set(name, controller);
        }
        return controller;
    }
};
Router.prototype.fetchControllerMapForElement = function fetchControllerMapForElement (element) {
    var controllerMap = this.controllerMaps.get(element);
    if (!controllerMap) {
        controllerMap = new Map();
        this.controllerMaps.set(element, controllerMap);
    }
    return controllerMap;
};
// Token list observer delegate
Router.prototype.elementMatchedTokenForAttribute = function elementMatchedTokenForAttribute (element, token, attributeName) {
    this.connectControllerForElement(token, element);
};
Router.prototype.elementUnmatchedTokenForAttribute = function elementUnmatchedTokenForAttribute (element, token, attributeName) {
    this.disconnectControllerForElement(token, element);
};

Object.defineProperties( Router.prototype, prototypeAccessors$1 );

var Controller = function Controller(element) {
    this.element = element;
    this.initialize();
};
Controller.prototype.initialize = function initialize () {
};
Controller.prototype.connect = function connect () {
};
Controller.prototype.disconnect = function disconnect () {
};

var index = {
    Router: Router,
    Controller: Controller
};

return index;

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
