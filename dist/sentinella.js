(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.Sentinella = global.Sentinella || {})));
}(this, (function (exports) { 'use strict';

var prototype = Element.prototype;
var matches = prototype.matches || prototype.webkitMatchesSelector || prototype.msMatchesSelector;
function elementMatchesSelector(element, selector) {
    return matches.call(element, selector);
}

var Selector = function Selector(source) {
    try {
        this.source = source;
        this.tokens = Token.readTokens(this.source);
        this.attributeSet = attributesFromTokens(this.tokens);
    }
    catch (error) {
        throw new Error(("Error in selector '" + source + "': " + (error.message)));
    }
};

var prototypeAccessors = { attributes: {} };
Selector.get = function get (source) {
    var selector;
    var selectors = Selector.selectors;
    source = source.toString().trim();
    if (selectors.has(source)) {
        selector = selectors.get(source);
    }
    else {
        selector = new Selector(source);
        selectors.set(source, selector);
    }
    return selector;
};
prototypeAccessors.attributes.get = function () {
    return Array.from(this.attributeSet);
};
Selector.prototype.matches = function matches (element) {
    return elementMatchesSelector(element, this.source);
};
Selector.prototype.toString = function toString () {
    return this.source;
};

Object.defineProperties( Selector.prototype, prototypeAccessors );
Selector.selectors = new Map();
var TokenType;
(function (TokenType) {
    TokenType[TokenType["TAG"] = 0] = "TAG";
    TokenType[TokenType["ID"] = 1] = "ID";
    TokenType[TokenType["CLASS"] = 2] = "CLASS";
    TokenType[TokenType["ATTR"] = 3] = "ATTR";
})(TokenType || (TokenType = {}));
var Token = function Token(type, value, data, negated) {
    this.type = type;
    this.value = value;
    this.data = data || "";
    this.negated = negated;
};

var prototypeAccessors$1 = { attribute: {},length: {} };
Token.readTokens = function readTokens (source) {
    var token = Token.readToken(source, TokenType.TAG) ||
        Token.readToken(source, TokenType.ID) ||
        Token.readToken(source, TokenType.CLASS) ||
        Token.readToken(source, TokenType.ATTR);
    if (token) {
        var rest = source.slice(token.length);
        return [token ].concat( Token.readTokens(rest));
    }
    else if (source.length == 0) {
        return [];
    }
    else {
        throw new Error(("Invalid or unsupported syntax near '" + source + "'"));
    }
};
Token.readToken = function readToken (source, type) {
    var pattern = Token.PATTERNS[type];
    var negated = source.slice(0, 5) == ":not(";
    var offset = negated ? 5 : 0;
    var match = source.slice(offset).match(pattern);
    if (match) {
        var value = match[0];
            var data = match[1];
        if (negated) {
            if (source.charAt(value.length + offset) == ")") {
                return new Token(type, (":not(" + value + ")"), data, true);
            }
            else {
                throw new Error(("Expected close-parenthesis after ':not(" + value + "'"));
            }
        }
        else {
            return new Token(type, value, data, false);
        }
    }
};
prototypeAccessors$1.attribute.get = function () {
    switch (this.type) {
        case TokenType.ID: return "id";
        case TokenType.CLASS: return "class";
        case TokenType.ATTR: return this.data;
    }
};
prototypeAccessors$1.length.get = function () {
    return this.value.length;
};

Object.defineProperties( Token.prototype, prototypeAccessors$1 );
Token.PATTERNS = function () {
    var UNICODE = "\\\\[0-9a-fA-F]{1,6}(?:\\r\\n|[ \\n\\r\\t\\f])?";
    var ESCAPE = "(?:" + UNICODE + ")|\\\\[^\\n\\r\\f0-9a-fA-F]";
    var NL = "\\n|\\r\\n|\\r|\\f";
    var NONASCII = "[^\\0-\\177]";
    var NMSTART = "[_a-zA-Z]|(?:" + NONASCII + ")|(?:" + ESCAPE + ")";
    var NMCHAR = "[_a-zA-Z0-9-]|(?:" + NONASCII + ")|(?:" + ESCAPE + ")";
    var IDENT = "-?(?:" + NMSTART + ")(?:" + NMCHAR + ")*";
    var STRING1 = "\"(?:[^\\n\\r\\f\\\\\"]|\\\\(?:" + NL + ")|(?:" + ESCAPE + "))*";
    var STRING2 = "'(?:[^\\n\\r\\f\\\\']|\\\\(?:" + NL + ")|(?:" + ESCAPE + "))*";
    var STRING = "(?:" + STRING1 + ")|(?:" + STRING2 + ")";
    var ATTROP = "=|~=|\\|=|\\^=|\\$=|\\*=";
    var ATTRVAL = "(?:" + IDENT + ")|(?:" + STRING + ")";
    return ( obj = {}, obj[TokenType.TAG] = new RegExp(("^(" + IDENT + ")")), obj[TokenType.ID] = new RegExp(("^#(" + IDENT + ")")), obj[TokenType.CLASS] = new RegExp(("^\\.(" + IDENT + ")")), obj[TokenType.ATTR] = new RegExp(("^\\[(" + IDENT + ")(?:(" + ATTROP + ")(" + ATTRVAL + "))?\\]")), obj );
    var obj;
}();
function attributesFromTokens(tokens) {
    var result = new Set();
    for (var i = 0, list = tokens; i < list.length; i += 1) {
        var token = list[i];

        var attribute = token.attribute;
        if (attribute != undefined) {
            result.add(attribute);
        }
    }
    return result;
}

var ElementObserver = function ElementObserver(element, delegate) {
    var this$1 = this;

    this.element = element;
    this.started = false;
    this.delegate = delegate;
    this.elements = new Set();
    this.mutationObserver = new MutationObserver(function (mutations) { return this$1.processMutations(mutations); });
};
ElementObserver.prototype.start = function start () {
    if (!this.started) {
        this.mutationObserver.observe(this.element, { attributes: true, childList: true, subtree: true });
        this.started = true;
        this.refresh();
    }
};
ElementObserver.prototype.stop = function stop () {
    if (this.started) {
        this.mutationObserver.takeRecords();
        this.mutationObserver.disconnect();
        this.started = false;
    }
};
ElementObserver.prototype.refresh = function refresh () {
        var this$1 = this;

    if (this.started) {
        var matches = new Set(this.matchElementsInTree());
        for (var i = 0, list = Array.from(this$1.elements); i < list.length; i += 1) {
            var element = list[i];

                if (!matches.has(element)) {
                this$1.removeElement(element);
            }
        }
        for (var i$1 = 0, list$1 = Array.from(matches); i$1 < list$1.length; i$1 += 1) {
            var element$1 = list$1[i$1];

                this$1.addElement(element$1);
        }
    }
};
// Mutation record processing
ElementObserver.prototype.processMutations = function processMutations (mutations) {
        var this$1 = this;

    for (var i = 0, list = mutations; i < list.length; i += 1) {
        var mutation = list[i];

            this$1.processMutation(mutation);
    }
};
ElementObserver.prototype.processMutation = function processMutation (mutation) {
    if (mutation.type == "attributes") {
        this.processAttributeChange(mutation.target, mutation.attributeName);
    }
    else if (mutation.type == "childList") {
        this.processRemovedNodes(mutation.removedNodes);
        this.processAddedNodes(mutation.addedNodes);
    }
};
ElementObserver.prototype.processAttributeChange = function processAttributeChange (node, attributeName) {
    var element = node;
    if (this.elements.has(element)) {
        if (this.matchElement(element)) {
            this.delegate.elementAttributeChanged(element, attributeName);
        }
        else {
            this.removeElement(element);
        }
    }
    else if (this.matchElement(element)) {
        this.addElement(element);
    }
};
ElementObserver.prototype.processRemovedNodes = function processRemovedNodes (nodes) {
        var this$1 = this;

    for (var i = 0, list = nodes; i < list.length; i += 1) {
        var node = list[i];

            this$1.processNode(node, this$1.removeElement);
    }
};
ElementObserver.prototype.processAddedNodes = function processAddedNodes (nodes) {
        var this$1 = this;

    for (var i = 0, list = nodes; i < list.length; i += 1) {
        var node = list[i];

            this$1.processNode(node, this$1.addElement);
    }
};
// Element matching
ElementObserver.prototype.matchElement = function matchElement (element) {
    return this.delegate.matchElement(element);
};
ElementObserver.prototype.matchElementsInTree = function matchElementsInTree (tree) {
        if ( tree === void 0 ) tree = this.element;

    return this.delegate.matchElementsInTree(tree);
};
ElementObserver.prototype.processNode = function processNode (node, processor) {
        var this$1 = this;

    var tree = this.elementFromNode(node);
    if (tree) {
        for (var i = 0, list = this$1.matchElementsInTree(tree); i < list.length; i += 1) {
            var element = list[i];

                processor.call(this$1, element);
        }
    }
};
ElementObserver.prototype.elementFromNode = function elementFromNode (node) {
    if (node.nodeType == Node.ELEMENT_NODE) {
        return node;
    }
};
// Element tracking
ElementObserver.prototype.addElement = function addElement (element) {
    if (!this.elements.has(element)) {
        this.elements.add(element);
        this.delegate.elementMatched(element);
    }
};
ElementObserver.prototype.removeElement = function removeElement (element) {
    if (this.elements.has(element)) {
        this.elements.delete(element);
        this.delegate.elementUnmatched(element);
    }
};

var AttributeObserver = function AttributeObserver(element, attributeName, delegate) {
    this.attributeName = attributeName;
    this.delegate = delegate;
    this.elementObserver = new ElementObserver(element, this);
};

var prototypeAccessors$2 = { element: {},selector: {} };
prototypeAccessors$2.element.get = function () {
    return this.elementObserver.element;
};
prototypeAccessors$2.selector.get = function () {
    return ("[" + (this.attributeName) + "]");
};
AttributeObserver.prototype.start = function start () {
    this.elementObserver.start();
};
AttributeObserver.prototype.stop = function stop () {
    this.elementObserver.stop();
};
// Element observer delegate
AttributeObserver.prototype.matchElement = function matchElement (element) {
    return element.hasAttribute(this.attributeName);
};
AttributeObserver.prototype.matchElementsInTree = function matchElementsInTree (tree) {
    var match = this.matchElement(tree) ? [tree] : [];
    var matches = Array.from(tree.querySelectorAll(this.selector));
    return match.concat(matches);
};
AttributeObserver.prototype.elementMatched = function elementMatched (element) {
    this.delegate.elementMatchedAttribute(element, this.attributeName);
};
AttributeObserver.prototype.elementUnmatched = function elementUnmatched (element) {
    this.delegate.elementUnmatchedAttribute(element, this.attributeName);
};
AttributeObserver.prototype.elementAttributeChanged = function elementAttributeChanged (element, attributeName) {
    if (attributeName == this.attributeName) {
        this.delegate.elementAttributeValueChanged(element, attributeName);
    }
};

Object.defineProperties( AttributeObserver.prototype, prototypeAccessors$2 );

var Multimap = function Multimap() {
    this.valuesByKey = new Map();
    this.keysByValue = new Map();
};
Multimap.prototype.add = function add$1 (key, value) {
    add(key, value, this.valuesByKey);
    add(value, key, this.keysByValue);
};
Multimap.prototype.delete = function delete$1 (key, value) {
    del(key, value, this.valuesByKey);
    del(value, key, this.keysByValue);
};
Multimap.prototype.has = function has (key, value) {
    var values = this.valuesByKey.get(key);
    return values ? values.has(value) : false;
};
Multimap.prototype.getKeysForValue = function getKeysForValue (value) {
    var keys = this.keysByValue.get(value);
    return keys ? Array.from(keys) : [];
};
Multimap.prototype.getValuesForKey = function getValuesForKey (key) {
    var values = this.valuesByKey.get(key);
    return values ? Array.from(values) : [];
};
Multimap.prototype.getValueCountForKey = function getValueCountForKey (key) {
    var values = this.valuesByKey.get(key);
    return values ? values.size : 0;
};
function add(a, b, bsByA) {
    var bs;
    if (bsByA.has(a)) {
        bs = bsByA.get(a);
    }
    else {
        bs = new Set();
        bsByA.set(a, bs);
    }
    bs.add(b);
}
function del(a, b, bsByA) {
    var bs = bsByA.get(a);
    if (bs) {
        bs.delete(b);
    }
}

var SelectorObserver = function SelectorObserver(element, delegate) {
    this.delegate = delegate;
    this.elementObserver = new ElementObserver(element, this);
    this.selectorSet = new Set();
    this.elements = new Multimap();
    this.attributes = new Multimap();
};

var prototypeAccessors$3 = { started: {},element: {},selectors: {},compositeSelector: {} };
prototypeAccessors$3.started.get = function () {
    return this.elementObserver.started;
};
SelectorObserver.prototype.start = function start () {
    this.elementObserver.start();
};
SelectorObserver.prototype.stop = function stop () {
    this.elementObserver.stop();
};
SelectorObserver.prototype.refresh = function refresh () {
    this.elementObserver.refresh();
};
prototypeAccessors$3.element.get = function () {
    return this.elementObserver.element;
};
prototypeAccessors$3.selectors.get = function () {
    return Array.from(this.selectorSet);
};
prototypeAccessors$3.compositeSelector.get = function () {
    var compositeSelector = Array.from(this.selectorSet).join(", ");
    return compositeSelector.length == 0 ? ":not(*)" : compositeSelector;
};
// Selector observation
SelectorObserver.prototype.observeSelector = function observeSelector (selector) {
        var this$1 = this;

    if (!this.selectorSet.has(selector)) {
        this.selectorSet.add(selector);
        for (var i = 0, list = selector.attributes; i < list.length; i += 1) {
            var attribute = list[i];

                this$1.attributes.add(selector, attribute);
        }
        this.refresh();
    }
};
SelectorObserver.prototype.stopObservingSelector = function stopObservingSelector (selector) {
        var this$1 = this;

    if (this.selectorSet.has(selector)) {
        this.selectorSet.delete(selector);
        for (var i = 0, list = selector.attributes; i < list.length; i += 1) {
            var attribute = list[i];

                this$1.attributes.delete(selector, attribute);
        }
        this.refresh();
    }
};
// Element observer delegate
SelectorObserver.prototype.matchElement = function matchElement (element) {
    return elementMatchesSelector(element, this.compositeSelector);
};
SelectorObserver.prototype.matchElementsInTree = function matchElementsInTree (tree) {
    var match = this.matchElement(tree) ? [tree] : [];
    var matches = Array.from(tree.querySelectorAll(this.compositeSelector));
    return match.concat(matches);
};
SelectorObserver.prototype.elementMatched = function elementMatched (element) {
        var this$1 = this;

    for (var i = 0, list = this$1.selectors; i < list.length; i += 1) {
        var selector = list[i];

            if (!this$1.elements.has(selector, element)) {
            if (selector.matches(element)) {
                this$1.recordMatch(selector, element);
            }
        }
    }
};
SelectorObserver.prototype.elementUnmatched = function elementUnmatched (element) {
        var this$1 = this;

    for (var i = 0, list = this$1.selectors; i < list.length; i += 1) {
        var selector = list[i];

            if (this$1.elements.has(selector, element)) {
            this$1.recordUnmatch(selector, element);
        }
    }
};
SelectorObserver.prototype.elementAttributeChanged = function elementAttributeChanged (element, attributeName) {
        var this$1 = this;

    for (var i = 0, list = this$1.attributes.getKeysForValue(attributeName); i < list.length; i += 1) {
        var selector = list[i];

            var matched = selector.matches(element);
        var present = this$1.elements.has(selector, element);
        if (matched && !present) {
            this$1.recordMatch(selector, element);
        }
        else if (present && !matched) {
            this$1.recordUnmatch(selector, element);
        }
    }
};
// Element bookkeeping
SelectorObserver.prototype.recordMatch = function recordMatch (selector, element) {
    this.elements.add(selector, element);
    this.delegate.elementMatchedSelector(element, selector);
};
SelectorObserver.prototype.recordUnmatch = function recordUnmatch (selector, element) {
    this.elements.delete(selector, element);
    this.delegate.elementUnmatchedSelector(element, selector);
};

Object.defineProperties( SelectorObserver.prototype, prototypeAccessors$3 );

var TokenListObserver = function TokenListObserver(element, attributeName, delegate) {
    this.attributeName = attributeName;
    this.delegate = delegate;
    this.elementObserver = new ElementObserver(element, this);
    this.tokensByElement = new Multimap();
};

var prototypeAccessors$4 = { started: {},element: {},selector: {} };
prototypeAccessors$4.started.get = function () {
    return this.elementObserver.started;
};
TokenListObserver.prototype.start = function start () {
    this.elementObserver.start();
};
TokenListObserver.prototype.stop = function stop () {
    this.elementObserver.stop();
};
TokenListObserver.prototype.refresh = function refresh () {
    this.elementObserver.refresh();
};
prototypeAccessors$4.element.get = function () {
    return this.elementObserver.element;
};
prototypeAccessors$4.selector.get = function () {
    return ("[" + (this.attributeName) + "]");
};
TokenListObserver.prototype.getElementsMatchingToken = function getElementsMatchingToken (token) {
    return this.tokensByElement.getKeysForValue(token);
};
// Element observer delegate
TokenListObserver.prototype.matchElement = function matchElement (element) {
    return element.hasAttribute(this.attributeName);
};
TokenListObserver.prototype.matchElementsInTree = function matchElementsInTree (tree) {
    var match = this.matchElement(tree) ? [tree] : [];
    var matches = Array.from(tree.querySelectorAll(this.selector));
    return match.concat(matches);
};
TokenListObserver.prototype.elementMatched = function elementMatched (element) {
        var this$1 = this;

    var newTokens = Array.from(this.readTokenSetForElement(element));
    for (var i = 0, list = newTokens; i < list.length; i += 1) {
        var token = list[i];

            this$1.addTokenForElement(token, element);
    }
};
TokenListObserver.prototype.elementUnmatched = function elementUnmatched (element) {
        var this$1 = this;

    var tokens = this.getTokensForElement(element);
    for (var i = 0, list = tokens; i < list.length; i += 1) {
        var token = list[i];

            this$1.removeTokenForElement(token, element);
    }
};
TokenListObserver.prototype.elementAttributeChanged = function elementAttributeChanged (element) {
        var this$1 = this;

    var newTokenSet = this.readTokenSetForElement(element);
    for (var i = 0, list = Array.from(newTokenSet); i < list.length; i += 1) {
        var token = list[i];

            this$1.addTokenForElement(token, element);
    }
    for (var i$1 = 0, list$1 = this$1.getTokensForElement(element); i$1 < list$1.length; i$1 += 1) {
        var token$1 = list$1[i$1];

            if (!newTokenSet.has(token$1)) {
            this$1.removeTokenForElement(token$1, element);
        }
    }
};
// Private
TokenListObserver.prototype.addTokenForElement = function addTokenForElement (token, element) {
    if (!this.tokensByElement.has(element, token)) {
        this.tokensByElement.add(element, token);
        this.delegate.elementMatchedTokenForAttribute(element, token, this.attributeName);
    }
};
TokenListObserver.prototype.removeTokenForElement = function removeTokenForElement (token, element) {
    if (this.tokensByElement.has(element, token)) {
        this.tokensByElement.delete(element, token);
        this.delegate.elementUnmatchedTokenForAttribute(element, token, this.attributeName);
    }
};
TokenListObserver.prototype.getTokensForElement = function getTokensForElement (element) {
    return this.tokensByElement.getValuesForKey(element);
};
TokenListObserver.prototype.readTokenSetForElement = function readTokenSetForElement (element) {
    var tokens = new Set();
    var value = element.getAttribute(this.attributeName) || "";
    for (var i = 0, list = value.split(/\s+/); i < list.length; i += 1) {
        var token = list[i];

            if (token.length) {
            tokens.add(token);
        }
    }
    return tokens;
};

Object.defineProperties( TokenListObserver.prototype, prototypeAccessors$4 );

exports.Selector = Selector;
exports.AttributeObserver = AttributeObserver;
exports.ElementObserver = ElementObserver;
exports.SelectorObserver = SelectorObserver;
exports.TokenListObserver = TokenListObserver;

Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbInN0ZGluIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG5cdHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cykgOlxuXHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJ10sIGZhY3RvcnkpIDpcblx0KGZhY3RvcnkoKGdsb2JhbC5TZW50aW5lbGxhID0gZ2xvYmFsLlNlbnRpbmVsbGEgfHwge30pKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoZXhwb3J0cykgeyAndXNlIHN0cmljdCc7XG5cbmNvbnN0IHsgcHJvdG90eXBlIH0gPSBFbGVtZW50O1xuY29uc3QgbWF0Y2hlcyA9IHByb3RvdHlwZS5tYXRjaGVzIHx8IHByb3RvdHlwZS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHwgcHJvdG90eXBlLm1zTWF0Y2hlc1NlbGVjdG9yO1xuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXNTZWxlY3RvcihlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgIHJldHVybiBtYXRjaGVzLmNhbGwoZWxlbWVudCwgc2VsZWN0b3IpO1xufVxuXG5jbGFzcyBTZWxlY3RvciB7XG4gICAgY29uc3RydWN0b3Ioc291cmNlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgICAgIHRoaXMudG9rZW5zID0gVG9rZW4ucmVhZFRva2Vucyh0aGlzLnNvdXJjZSk7XG4gICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZVNldCA9IGF0dHJpYnV0ZXNGcm9tVG9rZW5zKHRoaXMudG9rZW5zKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IgaW4gc2VsZWN0b3IgJyR7c291cmNlfSc6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgZ2V0KHNvdXJjZSkge1xuICAgICAgICBsZXQgc2VsZWN0b3I7XG4gICAgICAgIGNvbnN0IHNlbGVjdG9ycyA9IFNlbGVjdG9yLnNlbGVjdG9ycztcbiAgICAgICAgc291cmNlID0gc291cmNlLnRvU3RyaW5nKCkudHJpbSgpO1xuICAgICAgICBpZiAoc2VsZWN0b3JzLmhhcyhzb3VyY2UpKSB7XG4gICAgICAgICAgICBzZWxlY3RvciA9IHNlbGVjdG9ycy5nZXQoc291cmNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNlbGVjdG9yID0gbmV3IFNlbGVjdG9yKHNvdXJjZSk7XG4gICAgICAgICAgICBzZWxlY3RvcnMuc2V0KHNvdXJjZSwgc2VsZWN0b3IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWxlY3RvcjtcbiAgICB9XG4gICAgZ2V0IGF0dHJpYnV0ZXMoKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuYXR0cmlidXRlU2V0KTtcbiAgICB9XG4gICAgbWF0Y2hlcyhlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50TWF0Y2hlc1NlbGVjdG9yKGVsZW1lbnQsIHRoaXMuc291cmNlKTtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNvdXJjZTtcbiAgICB9XG59XG5TZWxlY3Rvci5zZWxlY3RvcnMgPSBuZXcgTWFwKCk7XG52YXIgVG9rZW5UeXBlO1xuKGZ1bmN0aW9uIChUb2tlblR5cGUpIHtcbiAgICBUb2tlblR5cGVbVG9rZW5UeXBlW1wiVEFHXCJdID0gMF0gPSBcIlRBR1wiO1xuICAgIFRva2VuVHlwZVtUb2tlblR5cGVbXCJJRFwiXSA9IDFdID0gXCJJRFwiO1xuICAgIFRva2VuVHlwZVtUb2tlblR5cGVbXCJDTEFTU1wiXSA9IDJdID0gXCJDTEFTU1wiO1xuICAgIFRva2VuVHlwZVtUb2tlblR5cGVbXCJBVFRSXCJdID0gM10gPSBcIkFUVFJcIjtcbn0pKFRva2VuVHlwZSB8fCAoVG9rZW5UeXBlID0ge30pKTtcbmNsYXNzIFRva2VuIHtcbiAgICBjb25zdHJ1Y3Rvcih0eXBlLCB2YWx1ZSwgZGF0YSwgbmVnYXRlZCkge1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGEgfHwgXCJcIjtcbiAgICAgICAgdGhpcy5uZWdhdGVkID0gbmVnYXRlZDtcbiAgICB9XG4gICAgc3RhdGljIHJlYWRUb2tlbnMoc291cmNlKSB7XG4gICAgICAgIGNvbnN0IHRva2VuID0gVG9rZW4ucmVhZFRva2VuKHNvdXJjZSwgVG9rZW5UeXBlLlRBRykgfHxcbiAgICAgICAgICAgIFRva2VuLnJlYWRUb2tlbihzb3VyY2UsIFRva2VuVHlwZS5JRCkgfHxcbiAgICAgICAgICAgIFRva2VuLnJlYWRUb2tlbihzb3VyY2UsIFRva2VuVHlwZS5DTEFTUykgfHxcbiAgICAgICAgICAgIFRva2VuLnJlYWRUb2tlbihzb3VyY2UsIFRva2VuVHlwZS5BVFRSKTtcbiAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICBjb25zdCByZXN0ID0gc291cmNlLnNsaWNlKHRva2VuLmxlbmd0aCk7XG4gICAgICAgICAgICByZXR1cm4gW3Rva2VuLCAuLi5Ub2tlbi5yZWFkVG9rZW5zKHJlc3QpXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzb3VyY2UubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBvciB1bnN1cHBvcnRlZCBzeW50YXggbmVhciAnJHtzb3VyY2V9J2ApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyByZWFkVG9rZW4oc291cmNlLCB0eXBlKSB7XG4gICAgICAgIGNvbnN0IHBhdHRlcm4gPSBUb2tlbi5QQVRURVJOU1t0eXBlXTtcbiAgICAgICAgY29uc3QgbmVnYXRlZCA9IHNvdXJjZS5zbGljZSgwLCA1KSA9PSBcIjpub3QoXCI7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IG5lZ2F0ZWQgPyA1IDogMDtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBzb3VyY2Uuc2xpY2Uob2Zmc2V0KS5tYXRjaChwYXR0ZXJuKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBjb25zdCBbdmFsdWUsIGRhdGFdID0gbWF0Y2g7XG4gICAgICAgICAgICBpZiAobmVnYXRlZCkge1xuICAgICAgICAgICAgICAgIGlmIChzb3VyY2UuY2hhckF0KHZhbHVlLmxlbmd0aCArIG9mZnNldCkgPT0gXCIpXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBUb2tlbih0eXBlLCBgOm5vdCgke3ZhbHVlfSlgLCBkYXRhLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgY2xvc2UtcGFyZW50aGVzaXMgYWZ0ZXIgJzpub3QoJHt2YWx1ZX0nYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBUb2tlbih0eXBlLCB2YWx1ZSwgZGF0YSwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBhdHRyaWJ1dGUoKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFRva2VuVHlwZS5JRDogcmV0dXJuIFwiaWRcIjtcbiAgICAgICAgICAgIGNhc2UgVG9rZW5UeXBlLkNMQVNTOiByZXR1cm4gXCJjbGFzc1wiO1xuICAgICAgICAgICAgY2FzZSBUb2tlblR5cGUuQVRUUjogcmV0dXJuIHRoaXMuZGF0YTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgbGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZS5sZW5ndGg7XG4gICAgfVxufVxuVG9rZW4uUEFUVEVSTlMgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgVU5JQ09ERSA9IGBcXFxcXFxcXFswLTlhLWZBLUZdezEsNn0oPzpcXFxcclxcXFxufFsgXFxcXG5cXFxcclxcXFx0XFxcXGZdKT9gO1xuICAgIGNvbnN0IEVTQ0FQRSA9IGAoPzoke1VOSUNPREV9KXxcXFxcXFxcXFteXFxcXG5cXFxcclxcXFxmMC05YS1mQS1GXWA7XG4gICAgY29uc3QgTkwgPSBgXFxcXG58XFxcXHJcXFxcbnxcXFxccnxcXFxcZmA7XG4gICAgY29uc3QgTk9OQVNDSUkgPSBgW15cXFxcMC1cXFxcMTc3XWA7XG4gICAgY29uc3QgTk1TVEFSVCA9IGBbX2EtekEtWl18KD86JHtOT05BU0NJSX0pfCg/OiR7RVNDQVBFfSlgO1xuICAgIGNvbnN0IE5NQ0hBUiA9IGBbX2EtekEtWjAtOS1dfCg/OiR7Tk9OQVNDSUl9KXwoPzoke0VTQ0FQRX0pYDtcbiAgICBjb25zdCBJREVOVCA9IGAtPyg/OiR7Tk1TVEFSVH0pKD86JHtOTUNIQVJ9KSpgO1xuICAgIGNvbnN0IFNUUklORzEgPSBgXCIoPzpbXlxcXFxuXFxcXHJcXFxcZlxcXFxcXFxcXCJdfFxcXFxcXFxcKD86JHtOTH0pfCg/OiR7RVNDQVBFfSkpKmA7XG4gICAgY29uc3QgU1RSSU5HMiA9IGAnKD86W15cXFxcblxcXFxyXFxcXGZcXFxcXFxcXCddfFxcXFxcXFxcKD86JHtOTH0pfCg/OiR7RVNDQVBFfSkpKmA7XG4gICAgY29uc3QgU1RSSU5HID0gYCg/OiR7U1RSSU5HMX0pfCg/OiR7U1RSSU5HMn0pYDtcbiAgICBjb25zdCBBVFRST1AgPSBgPXx+PXxcXFxcfD18XFxcXF49fFxcXFwkPXxcXFxcKj1gO1xuICAgIGNvbnN0IEFUVFJWQUwgPSBgKD86JHtJREVOVH0pfCg/OiR7U1RSSU5HfSlgO1xuICAgIHJldHVybiB7XG4gICAgICAgIFtUb2tlblR5cGUuVEFHXTogbmV3IFJlZ0V4cChgXigke0lERU5UfSlgKSxcbiAgICAgICAgW1Rva2VuVHlwZS5JRF06IG5ldyBSZWdFeHAoYF4jKCR7SURFTlR9KWApLFxuICAgICAgICBbVG9rZW5UeXBlLkNMQVNTXTogbmV3IFJlZ0V4cChgXlxcXFwuKCR7SURFTlR9KWApLFxuICAgICAgICBbVG9rZW5UeXBlLkFUVFJdOiBuZXcgUmVnRXhwKGBeXFxcXFsoJHtJREVOVH0pKD86KCR7QVRUUk9QfSkoJHtBVFRSVkFMfSkpP1xcXFxdYClcbiAgICB9O1xufSgpO1xuZnVuY3Rpb24gYXR0cmlidXRlc0Zyb21Ub2tlbnModG9rZW5zKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IFNldCgpO1xuICAgIGZvciAoY29uc3QgdG9rZW4gb2YgdG9rZW5zKSB7XG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IHRva2VuLmF0dHJpYnV0ZTtcbiAgICAgICAgaWYgKGF0dHJpYnV0ZSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5hZGQoYXR0cmlidXRlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5jbGFzcyBFbGVtZW50T2JzZXJ2ZXIge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGRlbGVnYXRlKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMuc3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRlbGVnYXRlID0gZGVsZWdhdGU7XG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSBuZXcgU2V0KCk7XG4gICAgICAgIHRoaXMubXV0YXRpb25PYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKChtdXRhdGlvbnMpID0+IHRoaXMucHJvY2Vzc011dGF0aW9ucyhtdXRhdGlvbnMpKTtcbiAgICB9XG4gICAgc3RhcnQoKSB7XG4gICAgICAgIGlmICghdGhpcy5zdGFydGVkKSB7XG4gICAgICAgICAgICB0aGlzLm11dGF0aW9uT2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmVsZW1lbnQsIHsgYXR0cmlidXRlczogdHJ1ZSwgY2hpbGRMaXN0OiB0cnVlLCBzdWJ0cmVlOiB0cnVlIH0pO1xuICAgICAgICAgICAgdGhpcy5zdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0b3AoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXJ0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMubXV0YXRpb25PYnNlcnZlci50YWtlUmVjb3JkcygpO1xuICAgICAgICAgICAgdGhpcy5tdXRhdGlvbk9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlZnJlc2goKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXJ0ZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZXMgPSBuZXcgU2V0KHRoaXMubWF0Y2hFbGVtZW50c0luVHJlZSgpKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBBcnJheS5mcm9tKHRoaXMuZWxlbWVudHMpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFtYXRjaGVzLmhhcyhlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUVsZW1lbnQoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIEFycmF5LmZyb20obWF0Y2hlcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZEVsZW1lbnQoZWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gTXV0YXRpb24gcmVjb3JkIHByb2Nlc3NpbmdcbiAgICBwcm9jZXNzTXV0YXRpb25zKG11dGF0aW9ucykge1xuICAgICAgICBmb3IgKGNvbnN0IG11dGF0aW9uIG9mIG11dGF0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5wcm9jZXNzTXV0YXRpb24obXV0YXRpb24pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHByb2Nlc3NNdXRhdGlvbihtdXRhdGlvbikge1xuICAgICAgICBpZiAobXV0YXRpb24udHlwZSA9PSBcImF0dHJpYnV0ZXNcIikge1xuICAgICAgICAgICAgdGhpcy5wcm9jZXNzQXR0cmlidXRlQ2hhbmdlKG11dGF0aW9uLnRhcmdldCwgbXV0YXRpb24uYXR0cmlidXRlTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobXV0YXRpb24udHlwZSA9PSBcImNoaWxkTGlzdFwiKSB7XG4gICAgICAgICAgICB0aGlzLnByb2Nlc3NSZW1vdmVkTm9kZXMobXV0YXRpb24ucmVtb3ZlZE5vZGVzKTtcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc0FkZGVkTm9kZXMobXV0YXRpb24uYWRkZWROb2Rlcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJvY2Vzc0F0dHJpYnV0ZUNoYW5nZShub2RlLCBhdHRyaWJ1dGVOYW1lKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBub2RlO1xuICAgICAgICBpZiAodGhpcy5lbGVtZW50cy5oYXMoZWxlbWVudCkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoRWxlbWVudChlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVsZWdhdGUuZWxlbWVudEF0dHJpYnV0ZUNoYW5nZWQoZWxlbWVudCwgYXR0cmlidXRlTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUVsZW1lbnQoZWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5tYXRjaEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkRWxlbWVudChlbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwcm9jZXNzUmVtb3ZlZE5vZGVzKG5vZGVzKSB7XG4gICAgICAgIGZvciAoY29uc3Qgbm9kZSBvZiBub2Rlcykge1xuICAgICAgICAgICAgdGhpcy5wcm9jZXNzTm9kZShub2RlLCB0aGlzLnJlbW92ZUVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHByb2Nlc3NBZGRlZE5vZGVzKG5vZGVzKSB7XG4gICAgICAgIGZvciAoY29uc3Qgbm9kZSBvZiBub2Rlcykge1xuICAgICAgICAgICAgdGhpcy5wcm9jZXNzTm9kZShub2RlLCB0aGlzLmFkZEVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEVsZW1lbnQgbWF0Y2hpbmdcbiAgICBtYXRjaEVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZS5tYXRjaEVsZW1lbnQoZWxlbWVudCk7XG4gICAgfVxuICAgIG1hdGNoRWxlbWVudHNJblRyZWUodHJlZSA9IHRoaXMuZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZS5tYXRjaEVsZW1lbnRzSW5UcmVlKHRyZWUpO1xuICAgIH1cbiAgICBwcm9jZXNzTm9kZShub2RlLCBwcm9jZXNzb3IpIHtcbiAgICAgICAgY29uc3QgdHJlZSA9IHRoaXMuZWxlbWVudEZyb21Ob2RlKG5vZGUpO1xuICAgICAgICBpZiAodHJlZSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIHRoaXMubWF0Y2hFbGVtZW50c0luVHJlZSh0cmVlKSkge1xuICAgICAgICAgICAgICAgIHByb2Nlc3Nvci5jYWxsKHRoaXMsIGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsZW1lbnRGcm9tTm9kZShub2RlKSB7XG4gICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBFbGVtZW50IHRyYWNraW5nXG4gICAgYWRkRWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5lbGVtZW50cy5oYXMoZWxlbWVudCkpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuYWRkKGVsZW1lbnQpO1xuICAgICAgICAgICAgdGhpcy5kZWxlZ2F0ZS5lbGVtZW50TWF0Y2hlZChlbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW1vdmVFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudHMuaGFzKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLmRlbGV0ZShlbGVtZW50KTtcbiAgICAgICAgICAgIHRoaXMuZGVsZWdhdGUuZWxlbWVudFVubWF0Y2hlZChlbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuY2xhc3MgQXR0cmlidXRlT2JzZXJ2ZXIge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGF0dHJpYnV0ZU5hbWUsIGRlbGVnYXRlKSB7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlTmFtZSA9IGF0dHJpYnV0ZU5hbWU7XG4gICAgICAgIHRoaXMuZGVsZWdhdGUgPSBkZWxlZ2F0ZTtcbiAgICAgICAgdGhpcy5lbGVtZW50T2JzZXJ2ZXIgPSBuZXcgRWxlbWVudE9ic2VydmVyKGVsZW1lbnQsIHRoaXMpO1xuICAgIH1cbiAgICBnZXQgZWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudE9ic2VydmVyLmVsZW1lbnQ7XG4gICAgfVxuICAgIGdldCBzZWxlY3RvcigpIHtcbiAgICAgICAgcmV0dXJuIGBbJHt0aGlzLmF0dHJpYnV0ZU5hbWV9XWA7XG4gICAgfVxuICAgIHN0YXJ0KCkge1xuICAgICAgICB0aGlzLmVsZW1lbnRPYnNlcnZlci5zdGFydCgpO1xuICAgIH1cbiAgICBzdG9wKCkge1xuICAgICAgICB0aGlzLmVsZW1lbnRPYnNlcnZlci5zdG9wKCk7XG4gICAgfVxuICAgIC8vIEVsZW1lbnQgb2JzZXJ2ZXIgZGVsZWdhdGVcbiAgICBtYXRjaEVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gZWxlbWVudC5oYXNBdHRyaWJ1dGUodGhpcy5hdHRyaWJ1dGVOYW1lKTtcbiAgICB9XG4gICAgbWF0Y2hFbGVtZW50c0luVHJlZSh0cmVlKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gdGhpcy5tYXRjaEVsZW1lbnQodHJlZSkgPyBbdHJlZV0gOiBbXTtcbiAgICAgICAgY29uc3QgbWF0Y2hlcyA9IEFycmF5LmZyb20odHJlZS5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuc2VsZWN0b3IpKTtcbiAgICAgICAgcmV0dXJuIG1hdGNoLmNvbmNhdChtYXRjaGVzKTtcbiAgICB9XG4gICAgZWxlbWVudE1hdGNoZWQoZWxlbWVudCkge1xuICAgICAgICB0aGlzLmRlbGVnYXRlLmVsZW1lbnRNYXRjaGVkQXR0cmlidXRlKGVsZW1lbnQsIHRoaXMuYXR0cmlidXRlTmFtZSk7XG4gICAgfVxuICAgIGVsZW1lbnRVbm1hdGNoZWQoZWxlbWVudCkge1xuICAgICAgICB0aGlzLmRlbGVnYXRlLmVsZW1lbnRVbm1hdGNoZWRBdHRyaWJ1dGUoZWxlbWVudCwgdGhpcy5hdHRyaWJ1dGVOYW1lKTtcbiAgICB9XG4gICAgZWxlbWVudEF0dHJpYnV0ZUNoYW5nZWQoZWxlbWVudCwgYXR0cmlidXRlTmFtZSkge1xuICAgICAgICBpZiAoYXR0cmlidXRlTmFtZSA9PSB0aGlzLmF0dHJpYnV0ZU5hbWUpIHtcbiAgICAgICAgICAgIHRoaXMuZGVsZWdhdGUuZWxlbWVudEF0dHJpYnV0ZVZhbHVlQ2hhbmdlZChlbGVtZW50LCBhdHRyaWJ1dGVOYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuY2xhc3MgTXVsdGltYXAge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnZhbHVlc0J5S2V5ID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLmtleXNCeVZhbHVlID0gbmV3IE1hcCgpO1xuICAgIH1cbiAgICBhZGQoa2V5LCB2YWx1ZSkge1xuICAgICAgICBhZGQoa2V5LCB2YWx1ZSwgdGhpcy52YWx1ZXNCeUtleSk7XG4gICAgICAgIGFkZCh2YWx1ZSwga2V5LCB0aGlzLmtleXNCeVZhbHVlKTtcbiAgICB9XG4gICAgZGVsZXRlKGtleSwgdmFsdWUpIHtcbiAgICAgICAgZGVsKGtleSwgdmFsdWUsIHRoaXMudmFsdWVzQnlLZXkpO1xuICAgICAgICBkZWwodmFsdWUsIGtleSwgdGhpcy5rZXlzQnlWYWx1ZSk7XG4gICAgfVxuICAgIGhhcyhrZXksIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IHRoaXMudmFsdWVzQnlLZXkuZ2V0KGtleSk7XG4gICAgICAgIHJldHVybiB2YWx1ZXMgPyB2YWx1ZXMuaGFzKHZhbHVlKSA6IGZhbHNlO1xuICAgIH1cbiAgICBnZXRLZXlzRm9yVmFsdWUodmFsdWUpIHtcbiAgICAgICAgY29uc3Qga2V5cyA9IHRoaXMua2V5c0J5VmFsdWUuZ2V0KHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIGtleXMgPyBBcnJheS5mcm9tKGtleXMpIDogW107XG4gICAgfVxuICAgIGdldFZhbHVlc0ZvcktleShrZXkpIHtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gdGhpcy52YWx1ZXNCeUtleS5nZXQoa2V5KTtcbiAgICAgICAgcmV0dXJuIHZhbHVlcyA/IEFycmF5LmZyb20odmFsdWVzKSA6IFtdO1xuICAgIH1cbiAgICBnZXRWYWx1ZUNvdW50Rm9yS2V5KGtleSkge1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSB0aGlzLnZhbHVlc0J5S2V5LmdldChrZXkpO1xuICAgICAgICByZXR1cm4gdmFsdWVzID8gdmFsdWVzLnNpemUgOiAwO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFkZChhLCBiLCBic0J5QSkge1xuICAgIGxldCBicztcbiAgICBpZiAoYnNCeUEuaGFzKGEpKSB7XG4gICAgICAgIGJzID0gYnNCeUEuZ2V0KGEpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYnMgPSBuZXcgU2V0KCk7XG4gICAgICAgIGJzQnlBLnNldChhLCBicyk7XG4gICAgfVxuICAgIGJzLmFkZChiKTtcbn1cbmZ1bmN0aW9uIGRlbChhLCBiLCBic0J5QSkge1xuICAgIGNvbnN0IGJzID0gYnNCeUEuZ2V0KGEpO1xuICAgIGlmIChicykge1xuICAgICAgICBicy5kZWxldGUoYik7XG4gICAgfVxufVxuXG5jbGFzcyBTZWxlY3Rvck9ic2VydmVyIHtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBkZWxlZ2F0ZSkge1xuICAgICAgICB0aGlzLmRlbGVnYXRlID0gZGVsZWdhdGU7XG4gICAgICAgIHRoaXMuZWxlbWVudE9ic2VydmVyID0gbmV3IEVsZW1lbnRPYnNlcnZlcihlbGVtZW50LCB0aGlzKTtcbiAgICAgICAgdGhpcy5zZWxlY3RvclNldCA9IG5ldyBTZXQoKTtcbiAgICAgICAgdGhpcy5lbGVtZW50cyA9IG5ldyBNdWx0aW1hcCgpO1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZXMgPSBuZXcgTXVsdGltYXAoKTtcbiAgICB9XG4gICAgZ2V0IHN0YXJ0ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRPYnNlcnZlci5zdGFydGVkO1xuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50T2JzZXJ2ZXIuc3RhcnQoKTtcbiAgICB9XG4gICAgc3RvcCgpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50T2JzZXJ2ZXIuc3RvcCgpO1xuICAgIH1cbiAgICByZWZyZXNoKCkge1xuICAgICAgICB0aGlzLmVsZW1lbnRPYnNlcnZlci5yZWZyZXNoKCk7XG4gICAgfVxuICAgIGdldCBlbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50T2JzZXJ2ZXIuZWxlbWVudDtcbiAgICB9XG4gICAgZ2V0IHNlbGVjdG9ycygpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5zZWxlY3RvclNldCk7XG4gICAgfVxuICAgIGdldCBjb21wb3NpdGVTZWxlY3RvcigpIHtcbiAgICAgICAgY29uc3QgY29tcG9zaXRlU2VsZWN0b3IgPSBBcnJheS5mcm9tKHRoaXMuc2VsZWN0b3JTZXQpLmpvaW4oXCIsIFwiKTtcbiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZVNlbGVjdG9yLmxlbmd0aCA9PSAwID8gXCI6bm90KCopXCIgOiBjb21wb3NpdGVTZWxlY3RvcjtcbiAgICB9XG4gICAgLy8gU2VsZWN0b3Igb2JzZXJ2YXRpb25cbiAgICBvYnNlcnZlU2VsZWN0b3Ioc2VsZWN0b3IpIHtcbiAgICAgICAgaWYgKCF0aGlzLnNlbGVjdG9yU2V0LmhhcyhzZWxlY3RvcikpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0b3JTZXQuYWRkKHNlbGVjdG9yKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgYXR0cmlidXRlIG9mIHNlbGVjdG9yLmF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuYWRkKHNlbGVjdG9yLCBhdHRyaWJ1dGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RvcE9ic2VydmluZ1NlbGVjdG9yKHNlbGVjdG9yKSB7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdG9yU2V0LmhhcyhzZWxlY3RvcikpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0b3JTZXQuZGVsZXRlKHNlbGVjdG9yKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgYXR0cmlidXRlIG9mIHNlbGVjdG9yLmF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuZGVsZXRlKHNlbGVjdG9yLCBhdHRyaWJ1dGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gRWxlbWVudCBvYnNlcnZlciBkZWxlZ2F0ZVxuICAgIG1hdGNoRWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50TWF0Y2hlc1NlbGVjdG9yKGVsZW1lbnQsIHRoaXMuY29tcG9zaXRlU2VsZWN0b3IpO1xuICAgIH1cbiAgICBtYXRjaEVsZW1lbnRzSW5UcmVlKHRyZWUpIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSB0aGlzLm1hdGNoRWxlbWVudCh0cmVlKSA/IFt0cmVlXSA6IFtdO1xuICAgICAgICBjb25zdCBtYXRjaGVzID0gQXJyYXkuZnJvbSh0cmVlLnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5jb21wb3NpdGVTZWxlY3RvcikpO1xuICAgICAgICByZXR1cm4gbWF0Y2guY29uY2F0KG1hdGNoZXMpO1xuICAgIH1cbiAgICBlbGVtZW50TWF0Y2hlZChlbGVtZW50KSB7XG4gICAgICAgIGZvciAoY29uc3Qgc2VsZWN0b3Igb2YgdGhpcy5zZWxlY3RvcnMpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5lbGVtZW50cy5oYXMoc2VsZWN0b3IsIGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdG9yLm1hdGNoZXMoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWNvcmRNYXRjaChzZWxlY3RvciwgZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsZW1lbnRVbm1hdGNoZWQoZWxlbWVudCkge1xuICAgICAgICBmb3IgKGNvbnN0IHNlbGVjdG9yIG9mIHRoaXMuc2VsZWN0b3JzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5lbGVtZW50cy5oYXMoc2VsZWN0b3IsIGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWNvcmRVbm1hdGNoKHNlbGVjdG9yLCBlbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbGVtZW50QXR0cmlidXRlQ2hhbmdlZChlbGVtZW50LCBhdHRyaWJ1dGVOYW1lKSB7XG4gICAgICAgIGZvciAoY29uc3Qgc2VsZWN0b3Igb2YgdGhpcy5hdHRyaWJ1dGVzLmdldEtleXNGb3JWYWx1ZShhdHRyaWJ1dGVOYW1lKSkge1xuICAgICAgICAgICAgY29uc3QgbWF0Y2hlZCA9IHNlbGVjdG9yLm1hdGNoZXMoZWxlbWVudCk7XG4gICAgICAgICAgICBjb25zdCBwcmVzZW50ID0gdGhpcy5lbGVtZW50cy5oYXMoc2VsZWN0b3IsIGVsZW1lbnQpO1xuICAgICAgICAgICAgaWYgKG1hdGNoZWQgJiYgIXByZXNlbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlY29yZE1hdGNoKHNlbGVjdG9yLCBlbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHByZXNlbnQgJiYgIW1hdGNoZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlY29yZFVubWF0Y2goc2VsZWN0b3IsIGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEVsZW1lbnQgYm9va2tlZXBpbmdcbiAgICByZWNvcmRNYXRjaChzZWxlY3RvciwgZWxlbWVudCkge1xuICAgICAgICB0aGlzLmVsZW1lbnRzLmFkZChzZWxlY3RvciwgZWxlbWVudCk7XG4gICAgICAgIHRoaXMuZGVsZWdhdGUuZWxlbWVudE1hdGNoZWRTZWxlY3RvcihlbGVtZW50LCBzZWxlY3Rvcik7XG4gICAgfVxuICAgIHJlY29yZFVubWF0Y2goc2VsZWN0b3IsIGVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50cy5kZWxldGUoc2VsZWN0b3IsIGVsZW1lbnQpO1xuICAgICAgICB0aGlzLmRlbGVnYXRlLmVsZW1lbnRVbm1hdGNoZWRTZWxlY3RvcihlbGVtZW50LCBzZWxlY3Rvcik7XG4gICAgfVxufVxuXG5jbGFzcyBUb2tlbkxpc3RPYnNlcnZlciB7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudCwgYXR0cmlidXRlTmFtZSwgZGVsZWdhdGUpIHtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVOYW1lID0gYXR0cmlidXRlTmFtZTtcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZSA9IGRlbGVnYXRlO1xuICAgICAgICB0aGlzLmVsZW1lbnRPYnNlcnZlciA9IG5ldyBFbGVtZW50T2JzZXJ2ZXIoZWxlbWVudCwgdGhpcyk7XG4gICAgICAgIHRoaXMudG9rZW5zQnlFbGVtZW50ID0gbmV3IE11bHRpbWFwKCk7XG4gICAgfVxuICAgIGdldCBzdGFydGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50T2JzZXJ2ZXIuc3RhcnRlZDtcbiAgICB9XG4gICAgc3RhcnQoKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudE9ic2VydmVyLnN0YXJ0KCk7XG4gICAgfVxuICAgIHN0b3AoKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudE9ic2VydmVyLnN0b3AoKTtcbiAgICB9XG4gICAgcmVmcmVzaCgpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50T2JzZXJ2ZXIucmVmcmVzaCgpO1xuICAgIH1cbiAgICBnZXQgZWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudE9ic2VydmVyLmVsZW1lbnQ7XG4gICAgfVxuICAgIGdldCBzZWxlY3RvcigpIHtcbiAgICAgICAgcmV0dXJuIGBbJHt0aGlzLmF0dHJpYnV0ZU5hbWV9XWA7XG4gICAgfVxuICAgIGdldEVsZW1lbnRzTWF0Y2hpbmdUb2tlbih0b2tlbikge1xuICAgICAgICByZXR1cm4gdGhpcy50b2tlbnNCeUVsZW1lbnQuZ2V0S2V5c0ZvclZhbHVlKHRva2VuKTtcbiAgICB9XG4gICAgLy8gRWxlbWVudCBvYnNlcnZlciBkZWxlZ2F0ZVxuICAgIG1hdGNoRWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50Lmhhc0F0dHJpYnV0ZSh0aGlzLmF0dHJpYnV0ZU5hbWUpO1xuICAgIH1cbiAgICBtYXRjaEVsZW1lbnRzSW5UcmVlKHRyZWUpIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSB0aGlzLm1hdGNoRWxlbWVudCh0cmVlKSA/IFt0cmVlXSA6IFtdO1xuICAgICAgICBjb25zdCBtYXRjaGVzID0gQXJyYXkuZnJvbSh0cmVlLnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5zZWxlY3RvcikpO1xuICAgICAgICByZXR1cm4gbWF0Y2guY29uY2F0KG1hdGNoZXMpO1xuICAgIH1cbiAgICBlbGVtZW50TWF0Y2hlZChlbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IG5ld1Rva2VucyA9IEFycmF5LmZyb20odGhpcy5yZWFkVG9rZW5TZXRGb3JFbGVtZW50KGVsZW1lbnQpKTtcbiAgICAgICAgZm9yIChjb25zdCB0b2tlbiBvZiBuZXdUb2tlbnMpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkVG9rZW5Gb3JFbGVtZW50KHRva2VuLCBlbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbGVtZW50VW5tYXRjaGVkKGVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgdG9rZW5zID0gdGhpcy5nZXRUb2tlbnNGb3JFbGVtZW50KGVsZW1lbnQpO1xuICAgICAgICBmb3IgKGNvbnN0IHRva2VuIG9mIHRva2Vucykge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVUb2tlbkZvckVsZW1lbnQodG9rZW4sIGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsZW1lbnRBdHRyaWJ1dGVDaGFuZ2VkKGVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgbmV3VG9rZW5TZXQgPSB0aGlzLnJlYWRUb2tlblNldEZvckVsZW1lbnQoZWxlbWVudCk7XG4gICAgICAgIGZvciAoY29uc3QgdG9rZW4gb2YgQXJyYXkuZnJvbShuZXdUb2tlblNldCkpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkVG9rZW5Gb3JFbGVtZW50KHRva2VuLCBlbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHRva2VuIG9mIHRoaXMuZ2V0VG9rZW5zRm9yRWxlbWVudChlbGVtZW50KSkge1xuICAgICAgICAgICAgaWYgKCFuZXdUb2tlblNldC5oYXModG9rZW4pKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVUb2tlbkZvckVsZW1lbnQodG9rZW4sIGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFByaXZhdGVcbiAgICBhZGRUb2tlbkZvckVsZW1lbnQodG9rZW4sIGVsZW1lbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLnRva2Vuc0J5RWxlbWVudC5oYXMoZWxlbWVudCwgdG9rZW4pKSB7XG4gICAgICAgICAgICB0aGlzLnRva2Vuc0J5RWxlbWVudC5hZGQoZWxlbWVudCwgdG9rZW4pO1xuICAgICAgICAgICAgdGhpcy5kZWxlZ2F0ZS5lbGVtZW50TWF0Y2hlZFRva2VuRm9yQXR0cmlidXRlKGVsZW1lbnQsIHRva2VuLCB0aGlzLmF0dHJpYnV0ZU5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlbW92ZVRva2VuRm9yRWxlbWVudCh0b2tlbiwgZWxlbWVudCkge1xuICAgICAgICBpZiAodGhpcy50b2tlbnNCeUVsZW1lbnQuaGFzKGVsZW1lbnQsIHRva2VuKSkge1xuICAgICAgICAgICAgdGhpcy50b2tlbnNCeUVsZW1lbnQuZGVsZXRlKGVsZW1lbnQsIHRva2VuKTtcbiAgICAgICAgICAgIHRoaXMuZGVsZWdhdGUuZWxlbWVudFVubWF0Y2hlZFRva2VuRm9yQXR0cmlidXRlKGVsZW1lbnQsIHRva2VuLCB0aGlzLmF0dHJpYnV0ZU5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldFRva2Vuc0ZvckVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b2tlbnNCeUVsZW1lbnQuZ2V0VmFsdWVzRm9yS2V5KGVsZW1lbnQpO1xuICAgIH1cbiAgICByZWFkVG9rZW5TZXRGb3JFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgdG9rZW5zID0gbmV3IFNldCgpO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKHRoaXMuYXR0cmlidXRlTmFtZSkgfHwgXCJcIjtcbiAgICAgICAgZm9yIChjb25zdCB0b2tlbiBvZiB2YWx1ZS5zcGxpdCgvXFxzKy8pKSB7XG4gICAgICAgICAgICBpZiAodG9rZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdG9rZW5zLmFkZCh0b2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRva2VucztcbiAgICB9XG59XG5cbmV4cG9ydHMuU2VsZWN0b3IgPSBTZWxlY3RvcjtcbmV4cG9ydHMuQXR0cmlidXRlT2JzZXJ2ZXIgPSBBdHRyaWJ1dGVPYnNlcnZlcjtcbmV4cG9ydHMuRWxlbWVudE9ic2VydmVyID0gRWxlbWVudE9ic2VydmVyO1xuZXhwb3J0cy5TZWxlY3Rvck9ic2VydmVyID0gU2VsZWN0b3JPYnNlcnZlcjtcbmV4cG9ydHMuVG9rZW5MaXN0T2JzZXJ2ZXIgPSBUb2tlbkxpc3RPYnNlcnZlcjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSkpKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqcHVkV3hzTENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5cVlYWmhiaTlDWVhObFkyRnRjQzl6Wlc1MGFXNWxiR3hoTDJKMWFXeGtMM05sYm5ScGJtVnNiR0V2Wkc5dExtcHpJaXdpTDFWelpYSnpMMnBoZG1GdUwwSmhjMlZqWVcxd0wzTmxiblJwYm1Wc2JHRXZZblZwYkdRdmMyVnVkR2x1Wld4c1lTOXpaV3hsWTNSdmNpNXFjeUlzSWk5VmMyVnljeTlxWVhaaGJpOUNZWE5sWTJGdGNDOXpaVzUwYVc1bGJHeGhMMkoxYVd4a0wzTmxiblJwYm1Wc2JHRXZaV3hsYldWdWRGOXZZbk5sY25abGNpNXFjeUlzSWk5VmMyVnljeTlxWVhaaGJpOUNZWE5sWTJGdGNDOXpaVzUwYVc1bGJHeGhMMkoxYVd4a0wzTmxiblJwYm1Wc2JHRXZZWFIwY21saWRYUmxYMjlpYzJWeWRtVnlMbXB6SWl3aUwxVnpaWEp6TDJwaGRtRnVMMEpoYzJWallXMXdMM05sYm5ScGJtVnNiR0V2WW5WcGJHUXZjMlZ1ZEdsdVpXeHNZUzl0ZFd4MGFXMWhjQzVxY3lJc0lpOVZjMlZ5Y3k5cVlYWmhiaTlDWVhObFkyRnRjQzl6Wlc1MGFXNWxiR3hoTDJKMWFXeGtMM05sYm5ScGJtVnNiR0V2YzJWc1pXTjBiM0pmYjJKelpYSjJaWEl1YW5NaUxDSXZWWE5sY25NdmFtRjJZVzR2UW1GelpXTmhiWEF2YzJWdWRHbHVaV3hzWVM5aWRXbHNaQzl6Wlc1MGFXNWxiR3hoTDNSdmEyVnVYMnhwYzNSZmIySnpaWEoyWlhJdWFuTWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpWTI5dWMzUWdleUJ3Y205MGIzUjVjR1VnZlNBOUlFVnNaVzFsYm5RN1hHNWpiMjV6ZENCdFlYUmphR1Z6SUQwZ2NISnZkRzkwZVhCbExtMWhkR05vWlhNZ2ZId2djSEp2ZEc5MGVYQmxMbmRsWW10cGRFMWhkR05vWlhOVFpXeGxZM1J2Y2lCOGZDQndjbTkwYjNSNWNHVXViWE5OWVhSamFHVnpVMlZzWldOMGIzSTdYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdaV3hsYldWdWRFMWhkR05vWlhOVFpXeGxZM1J2Y2lobGJHVnRaVzUwTENCelpXeGxZM1J2Y2lrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ0WVhSamFHVnpMbU5oYkd3b1pXeGxiV1Z1ZEN3Z2MyVnNaV04wYjNJcE8xeHVmVnh1THk4aklITnZkWEpqWlUxaGNIQnBibWRWVWt3OVpHRjBZVHBoY0hCc2FXTmhkR2x2Ymk5cWMyOXVPMkpoYzJVMk5DeGxlVW95V2xoS2VtRlhPWFZKYW05NlRFTktiV0ZYZUd4SmFtOXBXa2M1ZEV4dGNIcEphWGRwWXpJNU1XTnRUbXhWYlRsMlpFTkpOa2xwU1hOSmJrNTJaRmhLYWxwWVRXbFBiSE5wVEdrMGRreHBOSFpqTTBwcVRETk9iR0p1VW5CaWJWWnpZa2RGZGxwSE9YUk1ibEo2U1d3d2MwbHROV2hpVjFaNlNXcHdZbGhUZDJsaVYwWjNZMGRzZFZvelRXbFBhVXBDVVZWR1FreEZNVUpSVlRCelVsVkdRbEY1ZUZSUlZVWlVURVZXUWxGVlRYTlNNRVpDVW5sNFVGRlZSbEJNUlU1Q1VWVkZOMUZWUmtSTk1FbHpWRlZHUWxSVGVGQlJWVVpRVEVWa1FsRlZZM05WTUVaQ1ZYbDRSRkZWUmtSTVJUbENVVlU0YzFOVlJrSlRVM2hVVVZWR1ZFeEZUa0pSVlUxelkxVktRbEZZUmtOTVJXeENVVlZyYzFVd1JrSlZlWGhFVVZWR1JFeEhiRU5SVlVad1VXbDRSRkZWUmtKUE1FWkNVbGMxU0V4Rk1VSlJWVEJ6WVZWT1FsRlhiRVJNUlRsQ1VWZGtRMHhGVmtKUlZWVnpWVlZHUWxvd1NUZFRWVVpFWkd0VmMxUlZSa0pVVTNoRVVWVkdSRXhGT1VKUlZUaHpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5VTUVaQ1ZIbDRSbEZWUmtaTVJrWkNVVlpGYzFFd1JrSlJlWGhFVVZWR1FrOHdSa0pSTTJoRVRFVk9RbEZWVFdsbVVUMDlJaXdpYVcxd2IzSjBJSHNnWld4bGJXVnVkRTFoZEdOb1pYTlRaV3hsWTNSdmNpQjlJR1p5YjIwZ1hDSXVMMlJ2YlZ3aU8xeHVaWGh3YjNKMElHTnNZWE56SUZObGJHVmpkRzl5SUh0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2loemIzVnlZMlVwSUh0Y2JpQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzI5MWNtTmxJRDBnYzI5MWNtTmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUwYjJ0bGJuTWdQU0JVYjJ0bGJpNXlaV0ZrVkc5clpXNXpLSFJvYVhNdWMyOTFjbU5sS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVlYUjBjbWxpZFhSbFUyVjBJRDBnWVhSMGNtbGlkWFJsYzBaeWIyMVViMnRsYm5Nb2RHaHBjeTUwYjJ0bGJuTXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdOaGRHTm9JQ2hsY25KdmNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dCRmNuSnZjaUJwYmlCelpXeGxZM1J2Y2lBbkpIdHpiM1Z5WTJWOUp6b2dKSHRsY25KdmNpNXRaWE56WVdkbGZXQXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lITjBZWFJwWXlCblpYUW9jMjkxY21ObEtTQjdYRzRnSUNBZ0lDQWdJR3hsZENCelpXeGxZM1J2Y2p0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYzJWc1pXTjBiM0p6SUQwZ1UyVnNaV04wYjNJdWMyVnNaV04wYjNKek8xeHVJQ0FnSUNBZ0lDQnpiM1Z5WTJVZ1BTQnpiM1Z5WTJVdWRHOVRkSEpwYm1jb0tTNTBjbWx0S0NrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h6Wld4bFkzUnZjbk11YUdGektITnZkWEpqWlNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhObGJHVmpkRzl5SUQwZ2MyVnNaV04wYjNKekxtZGxkQ2h6YjNWeVkyVXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVnNaV04wYjNJZ1BTQnVaWGNnVTJWc1pXTjBiM0lvYzI5MWNtTmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxiR1ZqZEc5eWN5NXpaWFFvYzI5MWNtTmxMQ0J6Wld4bFkzUnZjaWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhObGJHVmpkRzl5TzF4dUlDQWdJSDFjYmlBZ0lDQm5aWFFnWVhSMGNtbGlkWFJsY3lncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlFRnljbUY1TG1aeWIyMG9kR2hwY3k1aGRIUnlhV0oxZEdWVFpYUXBPMXh1SUNBZ0lIMWNiaUFnSUNCdFlYUmphR1Z6S0dWc1pXMWxiblFwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdWc1pXMWxiblJOWVhSamFHVnpVMlZzWldOMGIzSW9aV3hsYldWdWRDd2dkR2hwY3k1emIzVnlZMlVwTzF4dUlDQWdJSDFjYmlBZ0lDQjBiMU4wY21sdVp5Z3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWMyOTFjbU5sTzF4dUlDQWdJSDFjYm4xY2JsTmxiR1ZqZEc5eUxuTmxiR1ZqZEc5eWN5QTlJRzVsZHlCTllYQW9LVHRjYm5aaGNpQlViMnRsYmxSNWNHVTdYRzRvWm5WdVkzUnBiMjRnS0ZSdmEyVnVWSGx3WlNrZ2UxeHVJQ0FnSUZSdmEyVnVWSGx3WlZ0VWIydGxibFI1Y0dWYlhDSlVRVWRjSWwwZ1BTQXdYU0E5SUZ3aVZFRkhYQ0k3WEc0Z0lDQWdWRzlyWlc1VWVYQmxXMVJ2YTJWdVZIbHdaVnRjSWtsRVhDSmRJRDBnTVYwZ1BTQmNJa2xFWENJN1hHNGdJQ0FnVkc5clpXNVVlWEJsVzFSdmEyVnVWSGx3WlZ0Y0lrTk1RVk5UWENKZElEMGdNbDBnUFNCY0lrTk1RVk5UWENJN1hHNGdJQ0FnVkc5clpXNVVlWEJsVzFSdmEyVnVWSGx3WlZ0Y0lrRlVWRkpjSWwwZ1BTQXpYU0E5SUZ3aVFWUlVVbHdpTzF4dWZTa29WRzlyWlc1VWVYQmxJSHg4SUNoVWIydGxibFI1Y0dVZ1BTQjdmU2twTzF4dVkyeGhjM01nVkc5clpXNGdlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLSFI1Y0dVc0lIWmhiSFZsTENCa1lYUmhMQ0J1WldkaGRHVmtLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkSGx3WlNBOUlIUjVjR1U3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkbUZzZFdVZ1BTQjJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVrWVhSaElEMGdaR0YwWVNCOGZDQmNJbHdpTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbTVsWjJGMFpXUWdQU0J1WldkaGRHVmtPMXh1SUNBZ0lIMWNiaUFnSUNCemRHRjBhV01nY21WaFpGUnZhMlZ1Y3loemIzVnlZMlVwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZEc5clpXNGdQU0JVYjJ0bGJpNXlaV0ZrVkc5clpXNG9jMjkxY21ObExDQlViMnRsYmxSNWNHVXVWRUZIS1NCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnVkc5clpXNHVjbVZoWkZSdmEyVnVLSE52ZFhKalpTd2dWRzlyWlc1VWVYQmxMa2xFS1NCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnVkc5clpXNHVjbVZoWkZSdmEyVnVLSE52ZFhKalpTd2dWRzlyWlc1VWVYQmxMa05NUVZOVEtTQjhmRnh1SUNBZ0lDQWdJQ0FnSUNBZ1ZHOXJaVzR1Y21WaFpGUnZhMlZ1S0hOdmRYSmpaU3dnVkc5clpXNVVlWEJsTGtGVVZGSXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHOXJaVzRwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElISmxjM1FnUFNCemIzVnlZMlV1YzJ4cFkyVW9kRzlyWlc0dWJHVnVaM1JvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmJkRzlyWlc0c0lDNHVMbFJ2YTJWdUxuSmxZV1JVYjJ0bGJuTW9jbVZ6ZENsZE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLSE52ZFhKalpTNXNaVzVuZEdnZ1BUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGdGRPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dCSmJuWmhiR2xrSUc5eUlIVnVjM1Z3Y0c5eWRHVmtJSE41Ym5SaGVDQnVaV0Z5SUNja2UzTnZkWEpqWlgwbllDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2MzUmhkR2xqSUhKbFlXUlViMnRsYmloemIzVnlZMlVzSUhSNWNHVXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjR0YwZEdWeWJpQTlJRlJ2YTJWdUxsQkJWRlJGVWs1VFczUjVjR1ZkTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J1WldkaGRHVmtJRDBnYzI5MWNtTmxMbk5zYVdObEtEQXNJRFVwSUQwOUlGd2lPbTV2ZENoY0lqdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2IyWm1jMlYwSUQwZ2JtVm5ZWFJsWkNBL0lEVWdPaUF3TzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J0WVhSamFDQTlJSE52ZFhKalpTNXpiR2xqWlNodlptWnpaWFFwTG0xaGRHTm9LSEJoZEhSbGNtNHBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2JXRjBZMmdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElGdDJZV3gxWlN3Z1pHRjBZVjBnUFNCdFlYUmphRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h1WldkaGRHVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITnZkWEpqWlM1amFHRnlRWFFvZG1Gc2RXVXViR1Z1WjNSb0lDc2diMlptYzJWMEtTQTlQU0JjSWlsY0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lGUnZhMlZ1S0hSNWNHVXNJR0E2Ym05MEtDUjdkbUZzZFdWOUtXQXNJR1JoZEdFc0lIUnlkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dCRmVIQmxZM1JsWkNCamJHOXpaUzF3WVhKbGJuUm9aWE5wY3lCaFpuUmxjaUFuT201dmRDZ2tlM1poYkhWbGZTZGdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZSdmEyVnVLSFI1Y0dVc0lIWmhiSFZsTENCa1lYUmhMQ0JtWVd4elpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnWjJWMElHRjBkSEpwWW5WMFpTZ3BJSHRjYmlBZ0lDQWdJQ0FnYzNkcGRHTm9JQ2gwYUdsekxuUjVjR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1ZHOXJaVzVVZVhCbExrbEVPaUJ5WlhSMWNtNGdYQ0pwWkZ3aU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQlViMnRsYmxSNWNHVXVRMHhCVTFNNklISmxkSFZ5YmlCY0ltTnNZWE56WENJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGUnZhMlZ1Vkhsd1pTNUJWRlJTT2lCeVpYUjFjbTRnZEdocGN5NWtZWFJoTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJR2RsZENCc1pXNW5kR2dvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMblpoYkhWbExteGxibWQwYUR0Y2JpQWdJQ0I5WEc1OVhHNVViMnRsYmk1UVFWUlVSVkpPVXlBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQmpiMjV6ZENCVlRrbERUMFJGSUQwZ1lGeGNYRnhjWEZ4Y1d6QXRPV0V0WmtFdFJsMTdNU3cyZlNnL09seGNYRnh5WEZ4Y1hHNThXeUJjWEZ4Y2JseGNYRnh5WEZ4Y1hIUmNYRnhjWmwwcFAyQTdYRzRnSUNBZ1kyOXVjM1FnUlZORFFWQkZJRDBnWUNnL09pUjdWVTVKUTA5RVJYMHBmRnhjWEZ4Y1hGeGNXMTVjWEZ4Y2JseGNYRnh5WEZ4Y1hHWXdMVGxoTFdaQkxVWmRZRHRjYmlBZ0lDQmpiMjV6ZENCT1RDQTlJR0JjWEZ4Y2JueGNYRnhjY2x4Y1hGeHVmRnhjWEZ4eWZGeGNYRnhtWUR0Y2JpQWdJQ0JqYjI1emRDQk9UMDVCVTBOSlNTQTlJR0JiWGx4Y1hGd3dMVnhjWEZ3eE56ZGRZRHRjYmlBZ0lDQmpiMjV6ZENCT1RWTlVRVkpVSUQwZ1lGdGZZUzE2UVMxYVhYd29Qem9rZTA1UFRrRlRRMGxKZlNsOEtEODZKSHRGVTBOQlVFVjlLV0E3WEc0Z0lDQWdZMjl1YzNRZ1RrMURTRUZTSUQwZ1lGdGZZUzE2UVMxYU1DMDVMVjE4S0Q4NkpIdE9UMDVCVTBOSlNYMHBmQ2cvT2lSN1JWTkRRVkJGZlNsZ08xeHVJQ0FnSUdOdmJuTjBJRWxFUlU1VUlEMGdZQzAvS0Q4NkpIdE9UVk5VUVZKVWZTa29Qem9rZTA1TlEwaEJVbjBwS21BN1hHNGdJQ0FnWTI5dWMzUWdVMVJTU1U1SE1TQTlJR0JjSWlnL09sdGVYRnhjWEc1Y1hGeGNjbHhjWEZ4bVhGeGNYRnhjWEZ4Y0lsMThYRnhjWEZ4Y1hGd29Qem9rZTA1TWZTbDhLRDg2Skh0RlUwTkJVRVY5S1NrcVlEdGNiaUFnSUNCamIyNXpkQ0JUVkZKSlRrY3lJRDBnWUNjb1B6cGJYbHhjWEZ4dVhGeGNYSEpjWEZ4Y1pseGNYRnhjWEZ4Y0oxMThYRnhjWEZ4Y1hGd29Qem9rZTA1TWZTbDhLRDg2Skh0RlUwTkJVRVY5S1NrcVlEdGNiaUFnSUNCamIyNXpkQ0JUVkZKSlRrY2dQU0JnS0Q4NkpIdFRWRkpKVGtjeGZTbDhLRDg2Skh0VFZGSkpUa2N5ZlNsZ08xeHVJQ0FnSUdOdmJuTjBJRUZVVkZKUFVDQTlJR0E5Zkg0OWZGeGNYRng4UFh4Y1hGeGNYajE4WEZ4Y1hDUTlmRnhjWEZ3cVBXQTdYRzRnSUNBZ1kyOXVjM1FnUVZSVVVsWkJUQ0E5SUdBb1B6b2tlMGxFUlU1VWZTbDhLRDg2Skh0VFZGSkpUa2Q5S1dBN1hHNGdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJQ0FnVzFSdmEyVnVWSGx3WlM1VVFVZGRPaUJ1WlhjZ1VtVm5SWGh3S0dCZUtDUjdTVVJGVGxSOUtXQXBMRnh1SUNBZ0lDQWdJQ0JiVkc5clpXNVVlWEJsTGtsRVhUb2dibVYzSUZKbFowVjRjQ2hnWGlNb0pIdEpSRVZPVkgwcFlDa3NYRzRnSUNBZ0lDQWdJRnRVYjJ0bGJsUjVjR1V1UTB4QlUxTmRPaUJ1WlhjZ1VtVm5SWGh3S0dCZVhGeGNYQzRvSkh0SlJFVk9WSDBwWUNrc1hHNGdJQ0FnSUNBZ0lGdFViMnRsYmxSNWNHVXVRVlJVVWwwNklHNWxkeUJTWldkRmVIQW9ZRjVjWEZ4Y1d5Z2tlMGxFUlU1VWZTa29Qem9vSkh0QlZGUlNUMUI5S1Nna2UwRlVWRkpXUVV4OUtTay9YRnhjWEYxZ0tWeHVJQ0FnSUgwN1hHNTlLQ2s3WEc1bWRXNWpkR2x2YmlCaGRIUnlhV0oxZEdWelJuSnZiVlJ2YTJWdWN5aDBiMnRsYm5NcElIdGNiaUFnSUNCamIyNXpkQ0J5WlhOMWJIUWdQU0J1WlhjZ1UyVjBLQ2s3WEc0Z0lDQWdabTl5SUNoamIyNXpkQ0IwYjJ0bGJpQnZaaUIwYjJ0bGJuTXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdZWFIwY21saWRYUmxJRDBnZEc5clpXNHVZWFIwY21saWRYUmxPMXh1SUNBZ0lDQWdJQ0JwWmlBb1lYUjBjbWxpZFhSbElDRTlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MExtRmtaQ2hoZEhSeWFXSjFkR1VwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNTlYRzR2THlNZ2MyOTFjbU5sVFdGd2NHbHVaMVZTVEQxa1lYUmhPbUZ3Y0d4cFkyRjBhVzl1TDJwemIyNDdZbUZ6WlRZMExHVjVTakphV0VwNllWYzVkVWxxYjNwTVEwcHRZVmQ0YkVscWIybGpNbFp6V2xkT01HSXpTWFZoYmsxcFRFTktlbUl6Vm5sWk1sWlRZakk1TUVscWIybEphWGRwWXpJNU1XTnRUbXhqZVVrMlYzbEpkVXhwT0hWTWFUbDZZMjFOZG1NeVZuVmtSMngxV2xkNGMxbFRPWHBhVjNoc1dUTlNkbU5wTlRCamVVcGtURU5LZFZsWE1XeGplVWsyVnpFd2MwbHRNV2hqU0VKd1ltMWtla2xxYjJsUlZVWkNVVk40VUZGVlJsQk1SVlpDVVZWVmMyTXdTa0pSV0U1RFRFVldRbEZWVlhOVVZVWkNWRk40VUZGVlJsQk1SVTVDVVZWRk4xRlZSa1pQVlUxelZGVkdRbFJVZEVwUldFNURVMmw0V2xGVlJscE1SVEZDVVZVd04xVlZSa1JoUlVselUxVkdRbE5UZUVSUlZVWkVUekZzUWxFd1ozTlRWVVpDVTFONFJGRlZSa1JNUlRGQ1VWVXdjMUl3UmtKU2VYaE9VVlZHVGt4RlRrSlJWVVUzVjFWR1JHTkZTWE5UVlVaQ1UxTjRSRkZWUmtSTVJURkNVVlV3YzFJd1JrSlNlWGhNVVZWR1RFeEZUa0pSVlUxelZsVkdRbFpUZUVSUlZVWkVURVZzUWxGVmEzTlJNRVpDVVhsNFRsRlZSazVNUlU1Q1VWVk5jMUV3UmtKUlZIUmFVVlZOZWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5YVlVaQ1YxTjRTRkZWUmtoTVJ6bERVVlZHZGxGcGVFUlJWVVpFVEVWc1FsRlZhM05STUVaQ1VYbDRUbEZWUms1TVJVNUNVVlZOYzFFd1JrSlJWSFJTVVZWT01sSkRlRVJSVlVaRVR6RkdRbEZWVFhOVE1FWkNVM2w0UkZGVlJrUk1SVTVDVVZWTmMxTXdSa0pUZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRGcFJWVTV0VEVVeFFsRlZNSE5UVlVaQ1UxTjRURkZWUmt4TVJVNUNVVlZOYzJNd1NrSlJXRTVEVEVVeFFsRlZNSE5VVlVaQ1ZGTjRURkZWUmt4TVJVNUNVVlZOYzFRd1JrSlVlWGhHVVZWR1JreEZUa0pSVlUxelVUQkdRbEZVZEZKUlZVNTNVbE40UkZGVlJrUlBNR3hDVVRCbmMxRXdSa0pSZW5SS1VWUk9RMUpEZUU1UlZVWk9URVZPUWxGVlRYTlNNRVpDVW5sNFJGRlZSa1JNUlRGQ1VWVXdOMVZWUmtSYWFYaEtVVlZHU2t4R1JrSlJWM1JEVEVWT1FsRlZSVGRWVlVaRVpFVkpjMVJWUmtKVVUzaFVVVlZHVkV4RlpFSlJWV056VlZWR1FsVlRlRVJSVlVaRVRFWk9RbEZXVFhOUk1FWkNVVlIwVWxGVlRuZFJlWGhPVVZWR1RreEZaRUpSVldOelZGVkdRbFJUZUVSUlZVWkVURVpHUWxGV1JYTlNWVVpDVWxONFJGRlZSa1JNUld4Q1VWVnJjMUpWUmtKU1UzaEVVVlZHUWs4eFJrSlNWM0JFVEVWV1FsRlZWWE5STUVaQ1VYbDRSRkZWUmtSTVJrNUNVVlpOYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelZGVkdRbFJUZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JQTVd4Q1VYcEdRMHhHUmtKUlZrVnpVakJHUWxKNWVGUlJWVVpVVEVWT1FsRlZUWE5TTUVaQ1VubDRSRkZWUmtSTVJURkNVVlV3YzFFd1JrSlNVM2hFVVZWR1FrOHhSa0pSTWpWRVRFVk9RbEZWVFRkVlZVWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxRXdSa0pSZW5SYVVWVk9UMHhHUmtKUlZrVnpVakJHUWxKNWVFcFJWVVpLVEVaR1FsRldSWE5STUVaQ1VYbDRUbEZWUms1TVJVNUNVVlZOYzFFd1JrSlJWSFJhVVZWTmRsRnBlRlJSVlVaVVRFVk9RbEZWVFhOU01FWkNVbmw0UkZGVlJrUk1SVEZDVVZVd2MxSlZSa0pTVTNoU1VWVkdVa3hGVGtKUlZVMXpVVEJHUWxGVWRGSlJWVTV4VVhsNFJGRlZSa1JQTVVaQ1VsVlJjMVJWUmtKVVUzaEVVVlZHUkV4R1JrSlJWa1Z6VVRCR1FsRlVkRXBSVlU1eFVXbDRSRkZWUmtSUE1HeENXakJLUlV4RmJFSlJWV3R6VmxWR1FsWlVkRkpSVlU1aFRFVXhRbEZWTUhOUk1FWkNVWGw0VEZGVlJreE1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxGNWVGcFJWVVphVEVWT1FsRlZUWE5STUVaQ1VWUjBTbEZWVGpCUmVYaEVVVlZHUkU4d2JFSlNWVkZ6VkRCR1FsUjVlRVJSVlVaRVRFVTVRbEZYWkVOUE1VWkNVVE5TUTB4Rk1VSlJWVEJ6VVRCR1FsRjVlSHBSYTBaQ1l6QkpjMUV3UmtKUmVYaFFVVlZHVUV4RlZrSlJWVlZ6VTFWR1FsTlRlRVJSVlVaRVRFVXhRbEZWTUhOUk1FWkNVWGw0UkZGVlJrSlBNR3hDVVROS1JVeEZUa0pSVlUwM1UxVkdSbEpEZUZKUlZVWlNUekZHUWxFd05ITlVWVVpDVkZONFJGRlZSa1JNUld4Q1VWVnJjMUV3UmtKUmVYaE9VVlZHVGt4RlRrSlJWVVUzVTFWR1JHTkZTWE5STUVaQ1VYcHpOMUZWUmpaUk1rMXpZVEJLUWxGV1RYTlNNRVpDVW5sNFNsRlZSa3BNUldSQ1VWVmpjMUpWUmtKaU1FbHpVVEJHUWxGVWRFSlJWRkpFWlVWUmMxTlZSa0pUZVhoVVVWVldTMDh3UmtKU2ExRnpWakJHUWxONWVGUlJWVVpVVHpCc1FsRXhiM05rVlU1Q1VWVmpjMUV3UmtKUlZIUktVVlZHUmt4SVJrUlJWVVpHVEVWT1FsRlZSVGRUVlVaQ1VsTjNlVkV3UmtKVGVYaEVVVlZHUWs4d2JFSlJWVlZ6WlZWT1FsRlZhM05STUVaQ1VWUjBRbEZWVGpCUmFYaEVVVlZHUkV4RlZrSlNhMnR6VlRCR1FsVjVlRXhSVlVaVlRFWk9RbEZXVFhOVlZVWkdXV3AwUWxGVlZrVlBNR3hDWVRCV1JreEdiRUpSVm10elUxVkdRbHBUZUVaUlZVWkdURVYwUWxGWFJYTlNWVVpDVWxONFNsRlZSblJSYVhoR1VWVkdSa3hGT1VKUlYyUkRUekZHUWxGNU9VWk1SV3hDVVZWcmMxRXdSa0pSZVhoS1VWVkdTa3hGWkVKUlZXTnpVMVZHUWxOVGVFUlJWVVpDVHpGR1FsRXlhRU5NUld4Q1VWVnJjMUV3UmtKUmVYaE1VVlZHVEV4RlpFSlJWV056VXpCR1FsTjVlRVJSVlVaQ1R6RkdRbEV5ZUVOTVJXeENVVlZyYzFFd1JrSlJlWGhLVVZWR1NreEZaRUpSVldOelUxVkdRbE5UZUVwUlZVWktURVZXUWxGVlZYTlJNRVpDVVZSMFVsRlZUakJSYVhoS1VWVkdTa3hGVGtKUlZVMXpWREJHUWxSNWVFaFJWVVpJVEVVNVFsRlZPSE5STUVaQ1VWUjBTbEZWVGpSUmFYaEVVVlZHUkU4d2JFSmhSVkpGVEVVeFFsRlZNSE5STUVaQ1VYbDRWbEZWUmxaTVJVNUNVVlZOYzFSVlJrSlplblJTVVZWTk5WRnBlRTVSVlVaT1RFVjBRbEZWYzNOU01FWkVWa040VEZGVlJreE1SVTVDVVZWTmMxVXdSa0pWZVhoRVVWVkdSRXhGTVVKUlZUQnpVbFZHUWxKVGVGUlJWVVpVVEVWT1FsRlZUWE5TTUVaQ1VubDRSRkZWUmtSUE1XeENVVE5TUkV4RmRFSlJWWE56VVRCR1FsRjVlRlJSVlVaVVRFVk9RbEZWVFhOVVZVWkNWRk40UmxGVlJrWk1SazVDVVZaTmMxRXdSa0pSZVhoR1VWVkdSa3hGVGtKUlZVMDNWMVZHUkdOclRYTlRNRVpDVTNsNFJGRlZSa1JNUms1Q1VWWk5jMUV3UmtKUmVYaE9VVlZHVGt4RlZrSlJWVlZ6VlRCR1FsVjVlRVJSVlVaRVRFVjBRbEZWYzNOUk1FWkNVWHAwV2xGVlRqUlJlWGhNVVZWR1RFeEZUa0pSVlUxelZUQkdRbFY1ZUVSUlZVWkVURVV4UWxGVk1ITlNWVVpDVWxONFZGRlZSbFJNUlU1Q1VWVk5jMU5WUmtKVFUzaEVVVlZHUkV4RlRrSlJWVVUzVlZWR1JtVnJUWE5TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOYzFNd1JrSlRlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEZwUlZVNVhURVV4UWxGVk1ITlRWVVpDVTFONFNGRlZSa2hNUlRGQ1VWVXdjMUV3UmtKUmVYaE1VVlZHVEV4RlRrSlJWVTF6VXpCR1FsTjVlRVJSVlVaRVRFVXhRbEZWTUhOUk1FWkNVWGw0UkZGVlJrSlBNV3hDVVROYVJFeEZNVUpSVlRCelVUQkdRbEY1ZUVSUlZVWkVURVYwUWxGVmMzTlNWVVpDVWxONFNGRlZSa2hNUlhSQ1VWVnpjMUV3UmtKUmVYaFdVVlZHVmt4RlRrSlJWVTF6VTFWR1FsTlRlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVVlIwVWxGVlRYcFJlWGhFVVZWR1JFOHhSa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVURVZXUWxGVlZYTlJNRVpDVVhsNFJGRlZSa1JNUlRGQ1VWVXdjMUV3UmtKUmVYaE9VVlZHVGt4RmJFSlJWV3R6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWHAwV2xGVlRUVlJhWGhPVVZWR1RreEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkNUekZHUWxFeFozTlJNRVpDVVhwMFVsRlZSa1JNUld4Q1VWVnJjMUV3UmtKUmVYaEVVVlZHUkU4eGJFSlJNRFJ6VkZWR1FsUlRlRXBSVlVaS1RFVjBRbEZWYzNOUk1FWkNVWGw0TVZFd1JrSmtWVTF6VkZWR1FsUlRlRWhSVlVaSVRFVk9RbEZWVFhOUk1FWkNVVlIwVWxGVlRuVlNVM2hFVVZWR1JFOHdiRUpSTUdkelVUQkdRbEY2ZEVwUlZWWkZURVV4UWxGVk1ITlJNRVpDVVhsNFZGRlZSbFJNUlU1Q1VWVk5jMVJWUmtKWmVYaEdVVlZHUmt4RmJFSlJWMVUzVlZWR1JFOVZUWE5VVlVaQ1ZGTjRVRkZWUmxCTVJXUkNVVlZqYzFNd1JrSlRlWGhFVVZWR1JFeEdSa0pSVmtWelVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRYTlJNRVpDVVZSMFVsRlZUbmRSZVhoT1VWVkdUa3hGT1VKUlZUaHpVakJHUWxKNWVFNVJWVVpPVEVWT1FsRlZUWE5UTUVaQ1UzbDRSRkZWUmtSTVJVNUNVVlZOYzFKVlJrSlNVM2hFVVZWR1JFeEZUa0pSVlUxelUxVkdRbE5UZUZCUlZVWlFURVZPUWxGVlJUZFZWVVpFVGpCTmMxUlZSa0pVVTNoT1VWVkdUa3hGWkVKUlZXTnpWREJHUWxSNWVFaFJWVVpJVEVWT1FsRlZUWE5TTUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZGTjFWVlJrUlBWVWx6VkZWR1FsUlRlRXhSVlVaTVRFVmtRbEZWWTNOVVZVWkNWRk40UkZGVlJrUk1SWFJDVVZWemMxRXdSa0pSZVhoT1VWVkdUa3hGVGtKUlZVMXpVVEJHUWxGNWVFeFJWVVpNVEVWT1FsRlZUWE5VTUVaQ1ZIbDRSRkZWUmtSTVJVNUNVVlZGTjFWVlJrWmhhMUZ6VWxWR1FsSlRlRVJSVlVaRVRFVk9RbEZWVFhOVE1FWkNVM2w0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5SYVVWVk9WMHhGTVVKUlZUQnpVVEJHUWxGNWVFeFJWVVpNVEVWV1FsRlZWWE5UVlVaQ1UxTjRSRkZWUmtSTVJXUkNVVlZqYzFNd1JrSlRlWGhFVVZWR1FrOHhiRUpTVkU1RFRFVldRbEZWVlhOUk1FWkNVWGw0UkZGVlJrUk1SVGxDVVZVNGMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMDNXakJLUWxFeGIzTlNWVVpDVWxONFJGRlZSa1JNUlU1Q1VWVk5jMVJWUmtKVVUzaEVVVlZHUkV4Rk1VSlJWVEJ6VVRCR1FsRjVlRXhSVlVaTVRFVk9RbEZWVFhOVVZVWkNWRk40U0ZGVlJraE1SVEZDVVZVd2MxRXdSa0pSZVhoS1VWVkdTa3hGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUVGRpTUVwQ1VUSm9SVXhGTVVKUlZUQnpVVEJHUWxGNWVFcFJWVVpLVEVWMFFsRlZjM05STUVaQ1VYbDRTbEZWUmtwTVJWWkNVVlZWYzFWVlJrSlZVM2hNVVZWR1RFeEZaRUpSVldOelVsVkdRbEpUZUVwUlZVWktURVZXUWxGVlZYTlRWVVpDVTFONFJGRlZSa1JNUlU1Q1VWVkZOMW93U2tKUk0xSkZURVZPUWxGVlRUZGFNRXBDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRXhGVGtKUlZVMDNZakJLUWxFd05ITlVWVVpDVkZONFNsRlZSa3BNUlhSQ1VWVnpjMUV3UmtKUmVYZDNVVEJHUWsxRlRYTlRNRVpDVTNsNFNGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUlZIUnVVV3RHUkdOclZYTlJNRVpDVVhwMFdsRlZUa2xNUlU1Q1VWVk5OMWRWUmtKUmVYaEtVVlZHU2t4RlRrSlJWVTF6VVRCR1FsRjZkRzVSYTBaRVZHbDRUbEZWUms1TVJVNUNVVlZOYzFOVlJrSlRVM2hNVVZWR1RFeEZUa0pSVlUxelUxVkdRbE5UZUVaUlZVWkdURVYwUWxGVmMzTlNWVVpDVWxONFNsRlZSa3BNUlZaQ1VWVlZjMU13UmtKVGVYaEVVVlZHUkV4RlRrSlJWVVUzVjFWR1JFNVZUWE5STUVaQ1VYcDBVbEZWVGtsTVJVNUNVVlZOTjFOVlJrUlRRM2hFVVZWR1JFOHdiRUpaTUZGelUxVkdRbE5UZUZSUlZVWlVUekZHUWxFeFozTlVWVVpDVkZONFJGRlZSa1JNUlU1Q1VWVk5jMU5WUmtKVFUzaEVVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFRkWFZVWkVZa1ZKYzFNd1JrSlRlWGhVVVZWR1ZFeEZUa0pSVlUxelVsVkdRbEpUZUVaUlZVWk1URVV4UWxGVk1ITlJNRVpDVVhsNFNsRlZSa3BNUlU1Q1VWVkZOMWRWUmtSaGEwMXpVekJHUWxONWVGUlJWVVpVVEVWT1FsRlZUWE5UTUVaQ1UzbDRSbEZWUmtaTVJURkNVVlV3YzFFd1JrSlJlWGhRVVZWR1VFeEZUa0pSVlVVM1YxVkdSR05GVFhOVE1FWkNVM2w0VkZGVlJsUk1SVTVDVVZWTmMxTlZSa0pUVTNoR1VWVkdTRXhGTVVKUlZUQnpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5UVlVaQ1UxTjRSRkZWUmtKUE1VWkNVVE5vUkV4RlRrSlJWVTAzVTFWR1JGTkRlRVJSVlVaRVR6QnNRbEpWVVhOVFZVWkNVMU40VGxGVlJrNVBNVVpDVVRGSmMxUlZSa0pVVTNoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxGNWVFeFJWVVpNVEVWT1FsRlZUWE5VVlVaQ1ZGTjRSRkZWUmtKUE1HeENVWHBHUTB4RlRrSlJWVTAzVHpCR1FtSkZXazVNUjA1Q1VWWkZjMUl3UmtKU2VuUktVVlZPYjFGcGVFNVJWVVpPVEVVNVFsRlZPSE5TTUVaQ1UxTjRjRkpGUmtKaFZWRnpVVEJHUWxGVWRFcFJWVTV6VWxONFRsRlZSazVNUlRGQ1VWVXdjMUl3UmtKVGVYaE9VVlZHVGt4Rk9VSlJWVGh6VG10S1FsRlVXa05NUlU1Q1VWVkZOMU5WUmtSTk1GRnpWRlZHUWxSVGVFWlJWVVpHVEVWa1FsRldUWE5pTUVwQ1VWYzVRMHhGVGtKUlZVVTNVMVZHUkdOclRYTlVWVVpDVkZONFVsRlZSbEpNUldSQ1VWVmpjMWt3UmtKWmVYaEVVVlZHUWs4d2JFSlJlVGxEVEVVeFFsRlZNSE5VTUVaQ1ZIbDRTRkZWUmtwTVIyUkRVVlZHYmxGcGVGSlJWVVpTVEVaR1FsRldSWE5VVlVaQ1ZGTjRTRkZWUmtoTVJVNUNVVlZGTjFOVlJrUk5WVkZ6VkZWR1FsUlRlRTVSVlVaT1RFVmtRbEZWYzNOaU1FcENVVmM1UTB4R1JrSlJWa1Z6VlZWR1FsVlRlRTVSVlVaT1RFVmtRbEZWWTNOUk1FWkNVVlIwU2xGVlRUVlNRM2hPVVZWR1RreEZkRUpSVlhOelVqQkdRbFJUZUZKUlZVWlNURVU1UWxGVk9ITlVNRVpDVkhsNFRsRlZSazVNUld4Q1VWVnJjMUV3UmtKUlZIUktVVlZPY1ZKRGVFNVJWVVpPVEVVNVFsRlZPSE5TTUVaQ1UxTjRibEV3UmtKYU1FMXpVbFZHUWxKVGVGSlJWVVpTVEVVeFFsRlZNSE5UTUVaQ1UzbDRSRkZWUmtKUE1HeENVVE5TUmt4Rk1VSlJWVEJ6VkRCR1FsUjVlRWhSVlVaS1RFZGtSRkZWUm01UmVYaEdVVlZHUmt4R1JrSlJWa1Z6VkZWR1FsUlRlRXhSVlVaTVRFVk9RbEZWUlRkVFZVWkVaRVZWYzFSVlJrSlVVM2hPVVZWR1RreEZaRUpSVlhOelZGVkdRbFJUZUZCUlZVWlFURVpHUWxGV1JYTlVNRVpDVkhsNFNGRlZSa2hNUlU1Q1VWVkZOMU5WUmtSaFJWRnpWRlZHUWxSVGVFNVJWVVpPVEVWa1FsRlZjM05OUlVwQ1VWUkNRMHhGVGtKUlZVVTNVMVZHUkUwd1RYTlVWVVpDVkZONFVGRlZSbEJNUldSQ1VWVnJjMVJWUmtKVVUzaE1VVlZHVEV4R1JrSlJWa1Z6VkZWR1FsUlRlRWhSVlVaSVRFVk9RbEZWUlRkVFZVWkdUakJOYzFSVlJrSlVVM2hFVVZWR1JFOHhSa0pSTUhkelVUQkdRbEY1ZUZSUlZVWlVURVZPUWxGVlRYTlNNRVpDVW5sNFJGRlZSa1JNUlZaQ1VWVnJjMU5WUmtKVFUzaE9VVlZHVGt4RlRrSlJWVTF6VXpCR1FsTjVlRXhSVlVaTVRFVmtRbEZWWTNOUk1FWkNVWHAwVWxGVlRURlJlWGhFVVZWR1JFeEdUa0pSVmsxelVUQkdRbEY1ZUVaUlZVWkdURVZPUWxGVlRYTlNWVVpDVTNsNFNsRlZSa3BNUlRGQ1VWVXdjMUV3UmtKUmVYaE9VVlZHVGt4RmRFSlJWWE56VWpCR1FsSjVlRVJSVlVaRVR6RkdRbEY2WkVSTVJVNUNVVlZOYzFVd1JrSlZlWGhFVVZWR1JFeEZkRUpSVlhOelVUQkdRbEY1ZUVaUlZVWkdURVZzUWxGVmEzTlVWVVpDVkZONFJGRlZSa1JNUmtaQ1VWWkZjMU13UmtKVGVYaElVVlZHU0V4RlRrSlJWVTAzVlZWR1JFd3dUWE5STUVaQ1VYbDRWRkZWUmxSTVJVNUNVVlZOYzFOVlJrSlRVM2hFVVZWR1JFeEZWa0pSVldOelUxVkdRbE5UZUU1UlZVWk9URVZPUWxGVlRYTlZWVVpDVlZONFRGRlZSa3hNUmtaQ1VWWkZjMVJWUmtKVVUzaE1VVlZHVEV4Rk9VSlJWVGh6VlZWR1FsVlRlRVJSVlVaRVR6QjBRbEY1T1VaTVJVNUNVVlZGTjFGVlJrUlRRM2hFVVZWR1JFeEZWa0pSVlZWelVUQkdRbEZVZEVKUlYyeEdWRU4zTkZGclJrSlBSVWx6VkZWR1FscFVkRXBSVlUxNlVYbDRUbEZWUms1TVJURkNVVlV3YzFJd1JrSlNlWGhLVVZWR1NreEZaRUpSVldOelVsVkdRbFpUZUVSUlZVWkNUekJzUWxFeWFFUk1SV1JDVVZWamMxRXdSa0pSZVhoRVVWVkdSRXhGTVVKUlZUQnpVekJHUWxONWVFcFJWVVpLVEVVeFFsRlZNSE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOTjFWVlJrUk5NRWx6VkZWR1FsUlRlRlJSVlVaVVRFVmtRbEZWWTNOVE1FWkNVM2w0UkZGVlJrUk1SazVDVVZaTmMxRXdSa0pSVkhSU1VWVk9jVkY1ZUVaUlZVWkdURVZPUWxGVlRYTlJNRVpDVVhsNFZGRlZSbFJNUld4Q1VWVnJjMVV3UmtKVmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjZkRnBSVlUxNlVXbDRUbEZWUms1TVJVNUNVVlZOYzFJd1JrSlNlWGhFVVZWR1JFeEdUa0pSVmsxelVUQkdRbEY1ZUVSUlZVWkNUekZHUWxFeldrTk1SVTVDVVZWTk4xTlZSa1JUUTNoRVVWVkdSRTh3YkVKUk1GRnpWRlZHUWxSVGVFUlJWVVpFVEVVeFFsRlZNSE5STUVaQ1VWUjBRbEZWVG0xTVJVNUNVVlZOYVdaUlBUMGlMQ0psZUhCdmNuUWdZMnhoYzNNZ1JXeGxiV1Z1ZEU5aWMyVnlkbVZ5SUh0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lobGJHVnRaVzUwTENCa1pXeGxaMkYwWlNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1Wc1pXMWxiblFnUFNCbGJHVnRaVzUwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk4wWVhKMFpXUWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1a1pXeGxaMkYwWlNBOUlHUmxiR1ZuWVhSbE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1Wc1pXMWxiblJ6SUQwZ2JtVjNJRk5sZENncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG0xMWRHRjBhVzl1VDJKelpYSjJaWElnUFNCdVpYY2dUWFYwWVhScGIyNVBZbk5sY25abGNpZ29iWFYwWVhScGIyNXpLU0E5UGlCMGFHbHpMbkJ5YjJObGMzTk5kWFJoZEdsdmJuTW9iWFYwWVhScGIyNXpLU2s3WEc0Z0lDQWdmVnh1SUNBZ0lITjBZWEowS0NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVjM1JoY25SbFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV0ZFhSaGRHbHZiazlpYzJWeWRtVnlMbTlpYzJWeWRtVW9kR2hwY3k1bGJHVnRaVzUwTENCN0lHRjBkSEpwWW5WMFpYTTZJSFJ5ZFdVc0lHTm9hV3hrVEdsemREb2dkSEoxWlN3Z2MzVmlkSEpsWlRvZ2RISjFaU0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMzUmhjblJsWkNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5KbFpuSmxjMmdvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J6ZEc5d0tDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV6ZEdGeWRHVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG0xMWRHRjBhVzl1VDJKelpYSjJaWEl1ZEdGclpWSmxZMjl5WkhNb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViWFYwWVhScGIyNVBZbk5sY25abGNpNWthWE5qYjI1dVpXTjBLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5OMFlYSjBaV1FnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaV1p5WlhOb0tDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV6ZEdGeWRHVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCdFlYUmphR1Z6SUQwZ2JtVjNJRk5sZENoMGFHbHpMbTFoZEdOb1JXeGxiV1Z1ZEhOSmJsUnlaV1VvS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tHTnZibk4wSUdWc1pXMWxiblFnYjJZZ1FYSnlZWGt1Wm5KdmJTaDBhR2x6TG1Wc1pXMWxiblJ6S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doYldGMFkyaGxjeTVvWVhNb1pXeGxiV1Z1ZENrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXlaVzF2ZG1WRmJHVnRaVzUwS0dWc1pXMWxiblFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvWTI5dWMzUWdaV3hsYldWdWRDQnZaaUJCY25KaGVTNW1jbTl0S0cxaGRHTm9aWE1wS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVoWkdSRmJHVnRaVzUwS0dWc1pXMWxiblFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lDOHZJRTExZEdGMGFXOXVJSEpsWTI5eVpDQndjbTlqWlhOemFXNW5YRzRnSUNBZ2NISnZZMlZ6YzAxMWRHRjBhVzl1Y3lodGRYUmhkR2x2Ym5NcElIdGNiaUFnSUNBZ0lDQWdabTl5SUNoamIyNXpkQ0J0ZFhSaGRHbHZiaUJ2WmlCdGRYUmhkR2x2Ym5NcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjSEp2WTJWemMwMTFkR0YwYVc5dUtHMTFkR0YwYVc5dUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCd2NtOWpaWE56VFhWMFlYUnBiMjRvYlhWMFlYUnBiMjRwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLRzExZEdGMGFXOXVMblI1Y0dVZ1BUMGdYQ0poZEhSeWFXSjFkR1Z6WENJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjSEp2WTJWemMwRjBkSEpwWW5WMFpVTm9ZVzVuWlNodGRYUmhkR2x2Ymk1MFlYSm5aWFFzSUcxMWRHRjBhVzl1TG1GMGRISnBZblYwWlU1aGJXVXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0cxMWRHRjBhVzl1TG5SNWNHVWdQVDBnWENKamFHbHNaRXhwYzNSY0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3Y205alpYTnpVbVZ0YjNabFpFNXZaR1Z6S0cxMWRHRjBhVzl1TG5KbGJXOTJaV1JPYjJSbGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJ5YjJObGMzTkJaR1JsWkU1dlpHVnpLRzExZEdGMGFXOXVMbUZrWkdWa1RtOWtaWE1wTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJSEJ5YjJObGMzTkJkSFJ5YVdKMWRHVkRhR0Z1WjJVb2JtOWtaU3dnWVhSMGNtbGlkWFJsVG1GdFpTa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmxiR1Z0Wlc1MElEMGdibTlrWlR0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVpXeGxiV1Z1ZEhNdWFHRnpLR1ZzWlcxbGJuUXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXRZWFJqYUVWc1pXMWxiblFvWld4bGJXVnVkQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVJsYkdWbllYUmxMbVZzWlcxbGJuUkJkSFJ5YVdKMWRHVkRhR0Z1WjJWa0tHVnNaVzFsYm5Rc0lHRjBkSEpwWW5WMFpVNWhiV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXlaVzF2ZG1WRmJHVnRaVzUwS0dWc1pXMWxiblFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0hSb2FYTXViV0YwWTJoRmJHVnRaVzUwS0dWc1pXMWxiblFwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtRmtaRVZzWlcxbGJuUW9aV3hsYldWdWRDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NISnZZMlZ6YzFKbGJXOTJaV1JPYjJSbGN5aHViMlJsY3lrZ2UxeHVJQ0FnSUNBZ0lDQm1iM0lnS0dOdmJuTjBJRzV2WkdVZ2IyWWdibTlrWlhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjSEp2WTJWemMwNXZaR1VvYm05a1pTd2dkR2hwY3k1eVpXMXZkbVZGYkdWdFpXNTBLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQndjbTlqWlhOelFXUmtaV1JPYjJSbGN5aHViMlJsY3lrZ2UxeHVJQ0FnSUNBZ0lDQm1iM0lnS0dOdmJuTjBJRzV2WkdVZ2IyWWdibTlrWlhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjSEp2WTJWemMwNXZaR1VvYm05a1pTd2dkR2hwY3k1aFpHUkZiR1Z0Wlc1MEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNBdkx5QkZiR1Z0Wlc1MElHMWhkR05vYVc1blhHNGdJQ0FnYldGMFkyaEZiR1Z0Wlc1MEtHVnNaVzFsYm5RcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WkdWc1pXZGhkR1V1YldGMFkyaEZiR1Z0Wlc1MEtHVnNaVzFsYm5RcE8xeHVJQ0FnSUgxY2JpQWdJQ0J0WVhSamFFVnNaVzFsYm5SelNXNVVjbVZsS0hSeVpXVWdQU0IwYUdsekxtVnNaVzFsYm5RcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WkdWc1pXZGhkR1V1YldGMFkyaEZiR1Z0Wlc1MGMwbHVWSEpsWlNoMGNtVmxLVHRjYmlBZ0lDQjlYRzRnSUNBZ2NISnZZMlZ6YzA1dlpHVW9ibTlrWlN3Z2NISnZZMlZ6YzI5eUtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElIUnlaV1VnUFNCMGFHbHpMbVZzWlcxbGJuUkdjbTl0VG05a1pTaHViMlJsS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJ5WldVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9ZMjl1YzNRZ1pXeGxiV1Z1ZENCdlppQjBhR2x6TG0xaGRHTm9SV3hsYldWdWRITkpibFJ5WldVb2RISmxaU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtOWpaWE56YjNJdVkyRnNiQ2gwYUdsekxDQmxiR1Z0Wlc1MEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0JsYkdWdFpXNTBSbkp2YlU1dlpHVW9ibTlrWlNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYm05a1pTNXViMlJsVkhsd1pTQTlQU0JPYjJSbExrVk1SVTFGVGxSZlRrOUVSU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNXZaR1U3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdMeThnUld4bGJXVnVkQ0IwY21GamEybHVaMXh1SUNBZ0lHRmtaRVZzWlcxbGJuUW9aV3hsYldWdWRDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11Wld4bGJXVnVkSE11YUdGektHVnNaVzFsYm5RcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVZzWlcxbGJuUnpMbUZrWkNobGJHVnRaVzUwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpHVnNaV2RoZEdVdVpXeGxiV1Z1ZEUxaGRHTm9aV1FvWld4bGJXVnVkQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjbVZ0YjNabFJXeGxiV1Z1ZENobGJHVnRaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtVnNaVzFsYm5SekxtaGhjeWhsYkdWdFpXNTBLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bGJHVnRaVzUwY3k1a1pXeGxkR1VvWld4bGJXVnVkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1SbGJHVm5ZWFJsTG1Wc1pXMWxiblJWYm0xaGRHTm9aV1FvWld4bGJXVnVkQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1OVhHNHZMeU1nYzI5MWNtTmxUV0Z3Y0dsdVoxVlNURDFrWVhSaE9tRndjR3hwWTJGMGFXOXVMMnB6YjI0N1ltRnpaVFkwTEdWNVNqSmFXRXA2WVZjNWRVbHFiM3BNUTBwdFlWZDRiRWxxYjJsYVYzaHNZbGRXZFdSR09YWlpiazVzWTI1YWJHTnBOWEZqZVVselNXNU9kbVJZU21wYVZrcDJZak5SYVU5cFNXbE1RMHA2WWpOV2VWa3lWbnBKYW5CaVNXazBkVXg1TkhWTU0wNTVXWGs1ZWxwWE5UQmhWelZzWWtkNGFFd3lWbk5hVnpGc1ltNVNabUl5U25wYVdFb3lXbGhKZFdSSVRXbFlVM2RwWW0xR2RGcFlUV2xQYkhSa1RFTktkRmxZUW5kaFZ6VnVZM2xKTmtsclJrSlZNRVZ6VkZWR1FsUlVkRXBSVmtaTFRFWnNRbEZXYTNOVU1FWkNWSGw0UmxGVlJrWk1Sa1pDVVZaRk4xVlZSa1JOTUVselUxVkdRbE5UZUVSUlZVWkVURVU1UWxGVk9ITlNNRVpDVW5sNFVGRlZSbEJNUlU1Q1VWVkZOMVZWUmtSa1JVbHpVMVZHUWxOVGVFUlJWVVpFVEVVNVFsRlZPSE5TTUVaQ1VubDRURkZWUmt4TVJVNUNVVlZGTjFWVlJrUmpSVWx6VTFWR1FsTlRlRVJSVlVaRVRFWkdRbEZXUlhOU01FWkNVbmw0VWxGVlJsSk1SVTVDVVZWRk4xVlZSa1psUlVselUxVkdRbE5UZUVSUlZVWkVURVpHUWxGV1JYTlNNRVpDVW5sNFNsRlZSa3BNUldSQ1VWVmpjMUpWUmtKV2VYaEVVVlZHUWs4eFJrSlJNbmhFVEVWc1FsRlZhM05STUVaQ1VYbDRibEZyUmtKYU1FbHpVakJHUWxKNWVFcFJWVVpLVEVka1ExRlZSbTVSYVhoRVVWVkdSRXhGVGtKUlZVMXpWVEJHUWxWNWVFeFJWVVpNVEVWc1FsRlZhM05STUVaQ1VYbDRibEZyUmtKYU1FbHpVVEJHUWxGNWVGUlJWVVpVVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtKUE1HeENVWGs1UjB4RlRrSlJWVTAzVTFWR1JsSkRlRXhSVlVaTVR6RkdRbEV3WjNOU1ZVWkNVbE40UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoS1VWVkdTa3hGVGtKUlZVMXpWREJHUWxSNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBXbEZWVG5OUmFYaEtVVlZHU2t4RlRrSlJWVTF6V2pCS1FsRlhaRU5NUlU1Q1VWVk5jMVF3UmtKVWVYaEVVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjVlRkJSVlVaUVRFVldRbEZWVlhOU1ZVWkNVbE40VmxGVlJsWk1SVlpDVVZWVmMxTlZSa0pUVTNoR1VWVkdSa3hHVGtKUlZrMXpVbFZHUWxKVGVFcFJWVVpLVEVWV1FsRlZWWE5VTUVaQ1ZIbDRSbEZWUmtaTVJXeENVVlZyYzFKVlJrSlNVM2hFVVZWR1JFeEZUa0pSVlVVM1YxVkdSR0ZyWTNOVFZVWkNVMU40UkZGVlJrUk1SVGxDVVZVNGMxSXdSa0pTZVhoS1VWVkdTa3hGVGtKUlZVVTNWMVZHUkdKclNYTlRWVVpDVTFONFJGRlZSa1JNUlRsQ1VWVTRjMUpWUmtKU1UzaEVVVlZHUWs4eFJrSlJNbWhEVEVWT1FsRlZUVGRUVlVaRVUwTjRSRkZWUmtSUE1HeENVbFZSYzFOVlJrSlRWSFJTVVZWT1IweEZWa0pSVlZWelVUQkdRbEY1ZUVSUlZVWkVURVZzUWxGVmEzTlJNRVpDVVhsNFVGRlZSbEJNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkU4eGJFSlJNbkJEVEVWc1FsRlZhM05STUVaQ1VYbDRibEZyUmtKYU1FbHpVVEJHUWxGNWVGaFJWVVpZVEVWV1FsRlZWWE5STUVaQ1VWUjBXbEZWVG5WUmVYaEtVVlZHU2t4RlRrSlJWVTF6V2pCS1FsRlhaRU5NUlU1Q1VWVk5jMVpWUmtKV1UzaEdVVlZHUmt4RlRrSlJWVVUzVjFWR1JHSkZUWE5UVlVaQ1UxTjRSRkZWUmtSTVJUbENVVlU0YzFJd1JrSlNlWGhNVVZWR1RFeEZUa0pSVlVVM1ZWVkdSR1JGU1hOUk1FWkNVWHAwU2xGVlRrbE1SVTVDVVZWTk4xTlZSa1pTUTNoUVVWVkdVRTh4UmtKUk1IZHpVbFZHUWxKVGVFUlJWVVpFVEVWT1FsRlZUWE5UVlVaQ1UxTjRSRkZWUmtSTVJUbENVVlU0YzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUwM1YxVkdSR0ZyU1hOVVZVWkNWRk40VUZGVlJsQk1SV1JDVVZWamMxTlZSa0pUVTNoSVVWVkdTRXhGVGtKUlZsVnpVMVZHUWxOVGVFUlJWVVpFVEVjeFExRlZSblJSYVhoR1VWVkdSa3hGVGtKUlZVMXpVVEJHUWxGVWRGcFJWVlV4VWtONFNGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVYaE9VVlZHVGt4Rk9VSlJWVGh6VTFWR1FsTlRlRXhSVlVaTVRFVk9RbEZWVFhOVFZVWkNVMU40UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhoU1VWVkdVa3hGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUVGRhTUVwQ1VUSm9SVXhGVmtKUlZWVnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5VTUVaQ1ZIbDRSRkZWUmtSTVJXUkNVVlZqYzFFd1JrSlJlWGhRVVZWR1VFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRUZGlNRXBDVVhwR1EweEZiRUpSVld0elVUQkdRbEY1ZUdoUlZVWm9URVZPUWxGVlRYTlVNRVpDVkhsNFJGRlZSa1JNUlU1Q1VWVkZOMW93U2tKUmVtUkRURVZPUWxGVlRUZFhWVVpFVTBONFJGRlZSa1JQTVd4Q1VsVlJjMUl3UmtKU2VYaEVVVlZHUkV4RlRrSlJWVTF6VkZWR1FsUlRlRkJSVlVaUVRFVnNRbEZWYTNOVE1FWkNVM2w0UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhoUVVWVkdVRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUVGRhTUVwQ1VYcEdSRXhGYkVKUlZXdHpVVEJHUWxGNWVGWlJWVVpXVEVWT1FsRlZUWE5VTUVaQ1ZIbDRSRkZWUmtSTVJVNUNVVlZGTjFkVlJrUk5WVWx6VVRCR1FsRjZkRkpSVlU1SlRFVk9RbEZWVFRkVFZVWkVVME40UkZGVlJrUlBNR3hDVWxWUmMwNXJTa0pSVkZwRFR6QnNRbEpZU2tOTVIyUkRVVlZHYmxGcGVFUlJWVVpFVEVaT1FsRlVTa05QTVVaQ1VUSjRSVXhGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVEVVeFFsRlZNSE5WVlVaQ1ZWTjRTbEZWUmtwTVJrNUNVVlpOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUwM1YxVkdSR0ZyVFhOVFZVWkNVMU40UkZGVlJrUk1SMVpDVVZkVmMxRXdSa0pSZVhoU1VWVkdVa3hGVGtKUlZVMXpVVEJHUWxGVWRGSlJWVTV2VVhsNFJGRlZSa1JQTUd4Q1VUQm5jMUV3UmtKUmVuUktVVlZXVUV4SFZrSlJWMVZ6VVRCR1FsRjVlRkpSVlVZelVXcDBVbEZWVFRWUmVYaEdVVlZHUmt4RlRrSlJWVTF6VVRCR1FsRjVlRkpSVlVaU1RFVk9RbEZWVFhOVFZVWkNVMU40U2xGVlJrcE1SbXhDVVZacmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMDNWMVZHUkdKRlRYTlRWVVpDVTFONFJGRlZSa1JNU0U1RFVWVkdlbEZwZUVSUlZVWkVURVpHUWxGV1JYTlJNRVpDVVhsNFRsRlZSazVNUlZaQ1VWVlZjMVZWUmtKVlUzaEVVVlZHUkV4SFJrSlJWMDF6VVRCR1FsRjVlRVJSVlVaQ1R6RkdRbEV6V2taTVJVNUNVVlZOTjFWVlJrSlJlWGhLVVZWR1NreEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVURVZPUWxGVlRYTlZWVVpDVlZONFJGRlZSa1JNUld4Q1VWVnJjMU5WUmtKVFUzaFlVVlZHV0V4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVR6RnNRbEV6YUVSTVJXeENVVlZyYzFFd1JrSlJlWGgwVVd0R1FtSlZTWE5STUVaQ1VYbDRVbEZWUmxKTVJVNUNVVlZOYzFkVlJrSlhVM2hFVVZWR1JFeEZUa0pSVlVVM1YxVkdSRXd3VFhOVFZVWkNVMU40UkZGVlJrUk1SMnhEVVZWR2NGRnBlRVJSVlVaRVRFWkdRbEZXUlhOUk1FWkNVWGw0VmxGVlJsWk1SVTVDVVZWTmMxRXdSa0pSVkhSU1VWVk5NMUY1ZUVSUlZVWkVUekJzUWxFd1ozTlJNRVpDVVhwMFNsRlZWbEJNU0U1RFVWVkdlbEZwZUVSUlZVWkVURVZzUWxGV1ZYTlNWVVpDVWxONGFGRlZSbmhSYW5SU1VWVk5OVkpEZUU1UlZVWk9URVU1UWxGVk9ITlNNRVpDVjFONFNsRlZSa3BNUlU1Q1VWVkZOMVZWUmtST01FbHpVbFZHUWxKVGVFUlJWVVpFVEVWT1FsRlZUWE5UVlVaQ1UxTjRSRkZWUmtSTVJrWkNVVlpGYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelZEQkdRbFI1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JQTVd4Q1VYazVRMHhGVmtKUlZWVnpVVEJHUWxGNWVFUlJWVVpFVEVWc1FsRlZhM05STUVaQ1VYbDRXbEZWUmxwTVJVNUNVVlZOYzFRd1JrSlVlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVUekprUTFGVlRYWlJhWGhLVVZWR1NreEZUa0pSVlUxelZWVkdRbFZUZUVSUlZVWkVURWhXUTFGVlJqRlJhWGhFVVZWR1JFeEZPVUpSVlRoelVsVkdRbEpUZUdoUlZVWm9URVZPUWxGVlRYTlJNRVpDVVZSMFdsRlZUWFpTUTNoRVVWVkdSRTh4YkVKUlZVMXpVMVZHUWxOVGVFUlJWVVpFVEVWT1FsRlZUVGRhTUVwQ1VUQTBjMU5WUmtKVFUzaEVVVlZHUkV4SFJrSlJWMFZ6VVRCR1FsRjVlRkJSVlVaUVRFVk9RbEZWVFhOUk1FWkNVVlIwV2xGVlRUTlJhWGhFVVZWR1JFOHhSa0pSTUdkelVUQkdRbEY2ZEZKUlZVWkVURVZzUWxGVmEzTlJNRVpDVVhsNFJsRlZSa1pNUlU1Q1VWVk5jMUV3UmtKUmVYaEtVVlZHU2t4RlRrSlJWVTF6VjFWR1FsZFRlRVJSVlVaRVRFVTVRbEZWT0hOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5SYVVWVk9NRkY1ZUVwUlZVWktURVZPUWxGVlRYTldWVVpDVmxONFJGRlZSa1JNUlRsQ1VWVTRjMUV3UmtKUmVYaEVVVlZHUWs4eFJrSlJla1pEVEVWT1FsRlZUVGRUVlVaRVUwTjRSRkZWUmtSUE1HeENVbFU0YzJKVlNrSlJWekZEVEVWT1FsRlZUWE5UTUVaQ1dsUjBVbEZWVGpaUmVYaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjVlRTVSVlVaT1RFVnNRbEZWYTNOVFZVWkNVMU40VEZGVlJreE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRTh4YkVKUk0zQkRURVZzUWxGVmEzTlJNRVpDVVhsNFdGRlZSbGhNUlU1Q1VWVk5jMU5WUmtKVFUzaEdVVlZHUmt4RmJFSlJWV3R6VVRCR1FsRjVlR2hSVlVab1RFVk9RbEZWVFhOUk1FWkNVVlIwVWxGVlRURlJlWGhFVVZWR1JFOHdiRUpSTUdkelVUQkdRbEY2ZEVwUlZWWlFURWRzUTFGVlJuQlJhWGhFVVZWR1JFeEZkRUpSVjFVM1ZWVkdSR1JyVFhOU01FWkNVbmw0UkZGVlJrUk1SVTVDVVZWTmMxUlZSa0pVVTNoS1VWVkdTa3hGYkVKUlZXdHpVekJHUWxONWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBXbEZWVGpaUmFYaEtVVlZHU2t4RlRrSlJWVTF6VmpCR1FsWjVlRVJSVlVaRVRFVnNRbEZWYTNOU1ZVWkNVbE40U2xGVlJrcE1SVTVDVVZWTmMxWlZSa0pXVTNoRVVWVkdSRXhGVGtKUlZVVTNWVlZHUkdWclRYTlJNRVpDVVhwMFNsRlZUa2xNUlU1Q1VWVk5OMU5WUmtaU1EzaDBVV3RHUW1KVlNUZFRWVVpHVjBONFdsRlZSbHBNUlU1Q1VWVk5jMVF3UmtKYU1FazNWVlZHUkdKclRYTlVWVVpDVkZONFJGRlZSa1JNUld4Q1VWVnJjMUV3UmtKUmVYaFNVVlZHVWt4RlRrSlJWVTF6VjFWR1FsZFRlRVJSVlVaRVRFVTVRbEZWT0hOUk1FWkNVWGw0UkZGVlJrSlBNR3hDVVhwV1JFeEZUa0pSVlUwM1UxVkdSbFI1ZUhSUmEwWkNZbFZKYzFFd1JrSlJlWGhRVVZWR2JsRnBlRXBSVlVaS1RFVk9RbEZWVFhOVU1FWkNWSHAwVWxGVlRqQlNRM2hPVVZWR1RreEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVURVpHUWxGV1JYTlJNRVpDVVhsNGRGRnJSa0ppVlVselVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRYTlJNRVpDVVZSMFNsRlZUbTlTUTNoRVVWVkdSRTh3YkVKU1ZUaHpWakJHUWxaNWVFUlJWVVpFVEVWc1FsRldWWE5TVlVaQ1VsTjRWRkZWUm5oUmVuUlNVVlZPZFZKVGVFNVJWVVpPVEVWc1FsRlZhM05TTUVaQ1VubDRTbEZWUmtwTVJVNUNVVlZOYzFwVlJrSmFVM2hFVVZWR1JFeEZiRUpSVld0elVUQkdRbEY1ZUVSUlZVWkNUekZHUWxFeldrUk1SVlpDVVZWVmMxRXdSa0pSZVhoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUVGRYVlVaRVZrTjRTRkZWUmtoTVJVNUNVVlZOYzFFd1JrSlJlWGhPVVZWR1RreEZPVUpSVlRoelUxVkdRbE5UZUVwUlZVWktURVZPUWxGVlRYTmlWVXBDVVZjeFEweEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JQTW1SRFVWVk9lVkpEZUZSUlZVWlVURVZPUWxGVlRYTlRWVVpDVTFONFJGRlZSa1JNUld4Q1VWVnJjMUpWUmtKU1UzaFFVVlZHVUV4RlRrSlJWVTF6VVRCR1FsRlVkRnBSVlUxMlVXbDRSRkZWUmtSUE1VWkNVVEJuYzFFd1JrSlJlblJLVVZWT1NVeEZUa0pSVlUwM1UxVkdSbFI1ZUd4UlZVWnNURVZPUWxGVlRYTlRWVVpDVmxSMFVsRlZUbTlSZVhoR1VWVkdSa3hGVGtKUlZVMXpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5WVlVaQ1ZWTjRTbEZWUmtwTVJXeENVVlZyYzFFd1JrSlJlWGhhVVZWR1dreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVUekZzUWxFeldrUk1SVEZDVVZVd2MxRXdSa0pXVTNoS1VWVkdTa3hGVGtKUlZVVTNWVlZHUkdSRlNYTlJNRVpDVVhwMFNsRlZUa2xNUlU1Q1VWVk5OMU5WUmtaU1EzaDBVV3RHUW1KVlNUZFRWVVpHVjBONFZsRlZSbFpNUlU1Q1VWVk5jMVF3UmtKYU1FazNWVlZHUkdGclRYTlNWVVpDVWxONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEtVVlZHU2t4RlRrSlJWVTF6VlZWR1FsVlRlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVWGw0VUZGVlJsQk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMDNWMVZHUkdGRlRYTlRWVVpDVTFONFJGRlZSa1JNUmtaQ1VWWkZjMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VkRCR1FsUjVlRVJSVlVaRVRFVk9RbEZWUlRkWFZVWkVUVlZKYzFOVlJrSlRVM2hFVVZWR1JFeEdSa0pSVmtWelVUQkdRbEY1ZUdwUlZVWnFURVZPUWxGVlRYTlVNRVpDVkhsNFJGRlZSa1JNUlU1Q1VWVkZOMVZWUmtSa2EwMXpVVEJHUWxGNmRFcFJWVTVKVEVWT1FsRlZUVGRUVlVaR1ZIbDRhRkZWUm1oTVJVNUNVVlZOYzFRd1JrSmFNRWszVlZWR1JHTkZUWE5TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOYzFOVlJrSlRVM2hFVVZWR1JFeEdSa0pSVmtWelVUQkdRbEY1ZUVoUlZVWklURVZPUWxGVlRYTlVNRVpDVkhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkU4eGJFSlJlVGxEVEVWc1FsRlZhM05STUVaQ1VYbDRVbEZWUmxKTVJVNUNVVlZOYzFSVlJrSlVVM2hFVVZWR1JFeEZPVUpSVlRoelVUQkdRbEY1ZUVSUlZVWkNUekZzUWxGNlpFTk1SV3hDVVZWcmMxRXdSa0pSZVhoU1VWVkdVa3hGVGtKUlZVMXpXakJLUWxGWFpFTk1SVTVDVVZWTmMxUXdSa0pVZVhoRVVWVkdSRXhGVGtKUlZVVTNWVlZHUkdWclRYTlJNRVpDVVhwMFNsRlZUa2xNUlU1Q1VWVk5OMUV3UmtSU2FVbzVJaXdpYVcxd2IzSjBJSHNnUld4bGJXVnVkRTlpYzJWeWRtVnlJSDBnWm5KdmJTQmNJaTR2Wld4bGJXVnVkRjl2WW5ObGNuWmxjbHdpTzF4dVpYaHdiM0owSUdOc1lYTnpJRUYwZEhKcFluVjBaVTlpYzJWeWRtVnlJSHRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhsYkdWdFpXNTBMQ0JoZEhSeWFXSjFkR1ZPWVcxbExDQmtaV3hsWjJGMFpTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtRjBkSEpwWW5WMFpVNWhiV1VnUFNCaGRIUnlhV0oxZEdWT1lXMWxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtUmxiR1ZuWVhSbElEMGdaR1ZzWldkaGRHVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpXeGxiV1Z1ZEU5aWMyVnlkbVZ5SUQwZ2JtVjNJRVZzWlcxbGJuUlBZbk5sY25abGNpaGxiR1Z0Wlc1MExDQjBhR2x6S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdaMlYwSUdWc1pXMWxiblFvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVZzWlcxbGJuUlBZbk5sY25abGNpNWxiR1Z0Wlc1ME8xeHVJQ0FnSUgxY2JpQWdJQ0JuWlhRZ2MyVnNaV04wYjNJb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmdXeVI3ZEdocGN5NWhkSFJ5YVdKMWRHVk9ZVzFsZlYxZ08xeHVJQ0FnSUgxY2JpQWdJQ0J6ZEdGeWRDZ3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWxiR1Z0Wlc1MFQySnpaWEoyWlhJdWMzUmhjblFvS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjM1J2Y0NncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bGJHVnRaVzUwVDJKelpYSjJaWEl1YzNSdmNDZ3BPMXh1SUNBZ0lIMWNiaUFnSUNBdkx5QkZiR1Z0Wlc1MElHOWljMlZ5ZG1WeUlHUmxiR1ZuWVhSbFhHNGdJQ0FnYldGMFkyaEZiR1Z0Wlc1MEtHVnNaVzFsYm5RcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVnNaVzFsYm5RdWFHRnpRWFIwY21saWRYUmxLSFJvYVhNdVlYUjBjbWxpZFhSbFRtRnRaU2s3WEc0Z0lDQWdmVnh1SUNBZ0lHMWhkR05vUld4bGJXVnVkSE5KYmxSeVpXVW9kSEpsWlNrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdFlYUmphQ0E5SUhSb2FYTXViV0YwWTJoRmJHVnRaVzUwS0hSeVpXVXBJRDhnVzNSeVpXVmRJRG9nVzEwN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUcxaGRHTm9aWE1nUFNCQmNuSmhlUzVtY205dEtIUnlaV1V1Y1hWbGNubFRaV3hsWTNSdmNrRnNiQ2gwYUdsekxuTmxiR1ZqZEc5eUtTazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnRZWFJqYUM1amIyNWpZWFFvYldGMFkyaGxjeWs3WEc0Z0lDQWdmVnh1SUNBZ0lHVnNaVzFsYm5STllYUmphR1ZrS0dWc1pXMWxiblFwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVrWld4bFoyRjBaUzVsYkdWdFpXNTBUV0YwWTJobFpFRjBkSEpwWW5WMFpTaGxiR1Z0Wlc1MExDQjBhR2x6TG1GMGRISnBZblYwWlU1aGJXVXBPMXh1SUNBZ0lIMWNiaUFnSUNCbGJHVnRaVzUwVlc1dFlYUmphR1ZrS0dWc1pXMWxiblFwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVrWld4bFoyRjBaUzVsYkdWdFpXNTBWVzV0WVhSamFHVmtRWFIwY21saWRYUmxLR1ZzWlcxbGJuUXNJSFJvYVhNdVlYUjBjbWxpZFhSbFRtRnRaU2s3WEc0Z0lDQWdmVnh1SUNBZ0lHVnNaVzFsYm5SQmRIUnlhV0oxZEdWRGFHRnVaMlZrS0dWc1pXMWxiblFzSUdGMGRISnBZblYwWlU1aGJXVXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHRjBkSEpwWW5WMFpVNWhiV1VnUFQwZ2RHaHBjeTVoZEhSeWFXSjFkR1ZPWVcxbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVJsYkdWbllYUmxMbVZzWlcxbGJuUkJkSFJ5YVdKMWRHVldZV3gxWlVOb1lXNW5aV1FvWld4bGJXVnVkQ3dnWVhSMGNtbGlkWFJsVG1GdFpTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzU5WEc0dkx5TWdjMjkxY21ObFRXRndjR2x1WjFWU1REMWtZWFJoT21Gd2NHeHBZMkYwYVc5dUwycHpiMjQ3WW1GelpUWTBMR1Y1U2pKYVdFcDZZVmM1ZFVscWIzcE1RMHB0WVZkNGJFbHFiMmxaV0ZJd1kyMXNhV1JZVW14WU1qbHBZekpXZVdSdFZubE1iWEI2U1dsM2FXTXlPVEZqYlU1c1ZXMDVkbVJEU1RaSmFVbHpTVzVPZG1SWVNtcGFXRTFwVDJ4emFVeHBOSFpNYVRSMll6Tktha3d6VG14aWJsSndZbTFXYzJKSFJYWlpXRkl3WTIxc2FXUllVbXhZTWpscFl6SldlV1J0Vm5sTWJsSjZTV3d3YzBsdE5XaGlWMVo2U1dwd1lsaFRkMmxpVjBaM1kwZHNkVm96VFdsUGFVcENVVlZHUWt4Rk9VSlJWVGh6VWxWR1FsSlRlR3hSVlVac1RFVldRbEZVU2tOTVJURkNVVlV3YzJJd1NrSlJWemxEVEVWT1FsRlZSVGRSVlVaU1RqQlZjMVJWUmtKVVZIUktVVlV4UzB4R2JFSlJWbXR6VkRCR1Fsb3dTWE5TVlVaQ1VsTjRhRkZWUm5oUmFYaEdVVlZHUmt4R1JrSlJWekZFVHpGR1FsRXpVa2RNUld4Q1VWVnJjMUV3UmtKUmVYaG9VVlZHYUV4RlpFSlJWV056V1ZWR1FsbFRlRVJSVlVaQ1R6RkdRbEV5ZUVSTVJXeENVVlZyYzFFd1JrSlJlWGhTVVZWR1VreEZaRUpSVldOelZWVkdRbFZUZUVSUlZVWkNUekZHUWxKWWFFTk1SV3hDVVZWcmMxRXdSa0pSZVhoc1VWVkdiRXhGWkVKUlZXTnpVMVZHUWxOVGVHeFJWVVpzVEVWT1FsRlZUWE5VTUVaQ1ZIbDRSbEZWUmtaTVJXeENVVlZyYzFFd1JrSlJlWGhFVVZWR1FrOHdiRUpSZWs1RlRFVk9RbEZWVFRkVFZVWkdVa040U2xGVlJrcE1SVGxDVVZVNE4xVlZSa1JXUTNoT1VWVkdUa3hGVGtKUlZVMXpVMVZHUWxOVGVFUlJWVVpFVEVkV1FsRlhWWE5STUVaQ1VYbDRVRkZWUmxCTVJVNUNVVlZGTjFOVlJrUmphMDF6VVRCR1FsRjZkRXBSVlZaRlRFVnNRbEZWYTNOVlZVWkNWVlIwVWxGVlRsZE1SVEZDVVZVd2MxRXdSa0pSZVhoS1VWVkdTa3hGYkVKUlZXdHpVVEJHUWxGNWVHaFJWVVpvVEVWa1FsRlZZM05STUVaQ1VWUjBTbEZWVG5OUmVYaEVVVlZHUkU4d2JFSlNWVkZ6VXpCR1FsTjZkRkpSVlU1SlRFVnNRbEZWYTNOUk1FWkNVWGw0YkZGVlJteE1SVTVDVVZWTmMxTXdSa0pUZVhoR1VWVkdSa3hGVGtKUlZVVTNVMVZHUkU5VlNYTlJNRVpDVVhwMFNsRlZWa1ZNUld4Q1VWVnJOMVZWUmtSU2FYaEtVVlZHU2t4RlRrSlJWVTF6V2xWR1FscFRlRVJSVlVaRVRFVnNRbEZWYTNOU1ZVWkNVbE40UkZGVlJrSlBNR3hDVVhwa1EweEZUa0pSVlUwM1UxVkdSbEpEZHpCUmEwWkNUa1ZKTjFOVlJrWk9WVWx6VjFWR1FsZFRlRVJSVlVaRVRFVTVRbEZYWkVOUE1VWkNVWHBPUTB4Rk1VSlJWVEJ6VVRCR1FsRjVlRkJSVlVaUVRFVk9RbEZWVFhOWFZVWkNWMU40UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhob1VWVkdhRXhGVGtKUlZVMXpVVEJHUWxGVWRFcFJWVTV4VWtONFJGRlZSa1JQTUd4Q1VsVlJjMkpWU2tKUlZ6RkRURVZPUWxGVlRYTlRWVVpDV1ZSMFVsRlZUWFpSYVhoT1VWVkdUa3hGZEVKUlZYTnpVakJHUWxKNWVFcFJWVVpLVEVWT1FsRlZUWE5YVlVaQ1YxTjRSRkZWUmtSTVJXeENVVlZyYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVURVZrUWxGVlkzTlNWVVpDVWxONFJGRlZSa0pQTVVaQ1VUSTFSVXhGTVVKUlZUQnpWREJHUWxSNWVFaFJWVVpJVEVWMFFsRlZjM05STUVaQ1VYbDRTbEZWUmtwTVJVNUNVVlZOYzFOVlJrSlRVM2hFVVZWR1JFeEhaRU5SVlVadVVXbDRSRkZWUmtSTVJXeENVVlZyYzFFd1JrSlJlWGhTVVZWR1VreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkNUekZHUWxFeWFFWk1SVEZDVVZVd2MxRXdSa0pSZVhoTVVWVkdURXhGVGtKUlZVMXpWRlZHUWxSVGVFUlJWVVpFVEVVNVFsRlZPSE5STUVaQ1VYbDRSRkZWUmtKUE1HeENVWHBzUTB4RlRrSlJWVTAzVTFWR1JsSkRlR3BSVlVacVRFVk9RbEZWVFhOVU1FWkNXakJKTjFWVlJrUk9NRWx6VTFWR1FsTlRlRVJSVlVaRVRFWkdRbEZXUlhOUk1FWkNVWGw0TVZGclJrSmtWVWx6VVRCR1FsRjVlRkJSVlVaUVRFVldRbEZWVlhOVFZVWkNVMU40UkZGVlJrUk1SMFpDVVZkRmMxRXdSa0pSZVhoRVVWVkdRazh3YkVKUk0wSkdURVZPUWxGVlRUZFRWVVpHVWtONGJsRnJSa0phTUVselVUQkdRbEY1ZUZCUlZVWnVVV3AwVWxGVlRYWlJhWGhLVVZWR1NreEZUa0pSVlUxelZWVkdRbFZUZUVSUlZVWkVURWhzUTFGVlJqVlJhWGhFVVZWR1JFeEZPVUpSVlRoelVsVkdRbEpUZUVwUlZVWktURVZPUWxGVlRYTlpWVVpDV1ZONFJGRlZSa1JNUlU1Q1VWVkZOMU5WUmtSa1JWVnpVVEJHUWxGNmRFcFJWVlpGVEVoV1ExRlZSakZSYVhoRVVWVkdSRXhGT1VKUlYyUkRURVZXUWxGVlZYTlpWVVpDWTFWSk4xVlZSa1JPTUZGelVsVkdRbEpUZUVSUlZVWkVURVZPUWxGVlRYTlpWVVpDV1ZONFNsRlZSa3BNUld4Q1VWVnJjMUV3UmtKUmVYaG9VVlZHYUV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVR6RnNRbEV6YUVSTVJXeENVVlZyYzFFd1JrSlJlWGhTVVZWR1VreEZUa0pSVlUxelRrVktRbEZVVWtOTVJVNUNVVlZOYzFRd1JrSlVlWGhHVVZWR1JreEhSa0pSVjBWelVUQkdRbEY1ZUVSUlZVWkNUekZHUWxFelFrWk1SVTVDVVZWTk4xTlZSa1JUUTNoRVVWVkdSRTh3VGtKUk1GbHBabEU5UFNJc0ltVjRjRzl5ZENCamJHRnpjeUJOZFd4MGFXMWhjQ0I3WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZG1Gc2RXVnpRbmxMWlhrZ1BTQnVaWGNnVFdGd0tDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWEyVjVjMEo1Vm1Gc2RXVWdQU0J1WlhjZ1RXRndLQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lHRmtaQ2hyWlhrc0lIWmhiSFZsS1NCN1hHNGdJQ0FnSUNBZ0lHRmtaQ2hyWlhrc0lIWmhiSFZsTENCMGFHbHpMblpoYkhWbGMwSjVTMlY1S1R0Y2JpQWdJQ0FnSUNBZ1lXUmtLSFpoYkhWbExDQnJaWGtzSUhSb2FYTXVhMlY1YzBKNVZtRnNkV1VwTzF4dUlDQWdJSDFjYmlBZ0lDQmtaV3hsZEdVb2EyVjVMQ0IyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0JrWld3b2EyVjVMQ0IyWVd4MVpTd2dkR2hwY3k1MllXeDFaWE5DZVV0bGVTazdYRzRnSUNBZ0lDQWdJR1JsYkNoMllXeDFaU3dnYTJWNUxDQjBhR2x6TG10bGVYTkNlVlpoYkhWbEtUdGNiaUFnSUNCOVhHNGdJQ0FnYUdGektHdGxlU3dnZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkbUZzZFdWeklEMGdkR2hwY3k1MllXeDFaWE5DZVV0bGVTNW5aWFFvYTJWNUtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIWmhiSFZsY3lBL0lIWmhiSFZsY3k1b1lYTW9kbUZzZFdVcElEb2dabUZzYzJVN1hHNGdJQ0FnZlZ4dUlDQWdJR2RsZEV0bGVYTkdiM0pXWVd4MVpTaDJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCclpYbHpJRDBnZEdocGN5NXJaWGx6UW5sV1lXeDFaUzVuWlhRb2RtRnNkV1VwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYTJWNWN5QS9JRUZ5Y21GNUxtWnliMjBvYTJWNWN5a2dPaUJiWFR0Y2JpQWdJQ0I5WEc0Z0lDQWdaMlYwVm1Gc2RXVnpSbTl5UzJWNUtHdGxlU2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0IyWVd4MVpYTWdQU0IwYUdsekxuWmhiSFZsYzBKNVMyVjVMbWRsZENoclpYa3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkbUZzZFdWeklEOGdRWEp5WVhrdVpuSnZiU2gyWVd4MVpYTXBJRG9nVzEwN1hHNGdJQ0FnZlZ4dUlDQWdJR2RsZEZaaGJIVmxRMjkxYm5SR2IzSkxaWGtvYTJWNUtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElIWmhiSFZsY3lBOUlIUm9hWE11ZG1Gc2RXVnpRbmxMWlhrdVoyVjBLR3RsZVNrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMllXeDFaWE1nUHlCMllXeDFaWE11YzJsNlpTQTZJREE3WEc0Z0lDQWdmVnh1ZlZ4dVpuVnVZM1JwYjI0Z1lXUmtLR0VzSUdJc0lHSnpRbmxCS1NCN1hHNGdJQ0FnYkdWMElHSnpPMXh1SUNBZ0lHbG1JQ2hpYzBKNVFTNW9ZWE1vWVNrcElIdGNiaUFnSUNBZ0lDQWdZbk1nUFNCaWMwSjVRUzVuWlhRb1lTazdYRzRnSUNBZ2ZWeHVJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0JpY3lBOUlHNWxkeUJUWlhRb0tUdGNiaUFnSUNBZ0lDQWdZbk5DZVVFdWMyVjBLR0VzSUdKektUdGNiaUFnSUNCOVhHNGdJQ0FnWW5NdVlXUmtLR0lwTzF4dWZWeHVablZ1WTNScGIyNGdaR1ZzS0dFc0lHSXNJR0p6UW5sQktTQjdYRzRnSUNBZ1kyOXVjM1FnWW5NZ1BTQmljMEo1UVM1blpYUW9ZU2s3WEc0Z0lDQWdhV1lnS0dKektTQjdYRzRnSUNBZ0lDQWdJR0p6TG1SbGJHVjBaU2hpS1R0Y2JpQWdJQ0I5WEc1OVhHNHZMeU1nYzI5MWNtTmxUV0Z3Y0dsdVoxVlNURDFrWVhSaE9tRndjR3hwWTJGMGFXOXVMMnB6YjI0N1ltRnpaVFkwTEdWNVNqSmFXRXA2WVZjNWRVbHFiM3BNUTBwdFlWZDRiRWxxYjJsaVdGWnpaRWRzZEZsWVFYVmhiazFwVEVOS2VtSXpWbmxaTWxaVFlqSTVNRWxxYjJsSmFYZHBZekk1TVdOdFRteGplVWsyVjNsSmRVeHBPSFZNYVRsNlkyMU5kbU15Vm5Wa1IyeDFXbGQ0YzFsVE9YUmtWM2d3WVZjeGFHTkROVEJqZVVwa1RFTktkVmxYTVd4amVVazJWekV3YzBsdE1XaGpTRUp3WW0xa2VrbHFiMmxSVlVaQ1VWTjRUbEZWUms1UE1HeENVMVZ2TjFWVlJrUlNVM2hLVVZWR1NreEZUa0pSVlUxelZqQkdRbFo1ZUVoUlZVWklURVZzUWxGVmEzTlNNRVpDVW5sNFJsRlZSblJSYVhoRVVWVkdRazh4UmtKUmVtUkVURVZzUWxGVmEzTlJNRVpDVVhsNFdGRlZSbGhNUldSQ1VWVmpjMU5WUmtKVFUzaElVVlZHU0V4RlZrSlJWekZEVEVWT1FsRlZSVGRUVlVaRVREQk5jMUV3UmtKUmVuUktVVlZXUlV4RlpFSlJWV056VVRCR1FsRjVlRWhSVlVaU1RFVldRbEZWVlhOVE1FWkNWMVIwVWxGVlRqUlJhWGhJVVZWR1NFeEZUa0pSVlUxelVqQkdRbEo1ZUVaUlZVWkdURVYwUWxGVmMzTlNWVVpDVWxONFNsRlZSa3BNUlU1Q1VWVk5jMVl3UmtKV2VYaEVVVlZHUkV4RlRrSlJWVVUzVlZWR1JHRnJUWE5TTUVaQ1VubDRSRkZWUmtSTVJYUkNVVlZ6YzFKVlJrSlNVM2hJVVZWR1NFeEZWa0pSVlZWelUxVkdRbE5UZUVSUlZVWkVURVprUWxGV1kzTlJNRVpDVVhsNFJGRlZSa0pQTUd4Q1VUSTFSRXhGVGtKUlZVMDNVMVZHUmxKRGVFNVJWVVpPVEVWT1FsRlZUWE5TTUVaQ1ZWTjRSbEZWUmtaTVJYUkNVVlpyTjFWVlJrUk5NRWx6VWpCR1FsSjVlRVJSVlVaRVRFVmtRbEZWWTNOU1ZVWkNVbE40VEZGVlJreE1SVlpDVVZWVmMxTlZSa0pUVTNoRVVWVkdSRXhHWkVKUlZtTnpVVEJHUWxGNWVFUlJWVVpDVHpGR1FsRXljRVJNUldSQ1VWVmpjMUV3UmtKUmVYaE1VVlZHVEV4RlZrSlJWVlZ6VWpCR1FsSjVlRVpSVlVaR1RFVnNRbEZWYTNOUk1FWkNVWGw0V0ZGVlJsaE1SVTVDVVZWTmMxRXdSa0pSVkhSS1VWVk9kVkY1ZUVSUlZVWkVUekJzUWxKVlVYTlNNRVpDVW5sNFJGRlZSa1JNUldSQ1VWWkZjMUpWUmtKU1UzaE1VVlZHV2s4eFJrSlJNMmhEVEVVeFFsRlZNSE5VVlVaQ1ZGTjRTRkZWUmtoTVJXeENVVlZyYzFFd1JrSlJlWGhZVVZWR1dFeEZUa0pSVlUxelVqQkdRbEo1ZUVSUlZVWkVURVZrUWxGVlkzTlJNRVpDVVhsNFJGRlZSa0pQTVVaQ1VUTm9SRXhGTVVKUlZUQnpVVEJHUWxGNWVFNVJWVVpPVEVWa1FsRlZZM05VVlVaQ1ZGTjRSRkZWUmtSTVJXUkNVVlZqYzFFd1JrSlJlWGhNVVZWR1RFeEZUa0pSVlUxelVqQkdRbEo1ZUV4UlZVWk1URVZPUWxGVlJUZFRWVVpFVFRCTmMxRXdSa0pSZW5SS1VWVldSVXhIVmtKUlYxVnpVVEJHUWxGNWVFeFJWVVphVHpGR1FsRjZSa05NUlRGQ1VWVXdjMU5WUmtKVFUzaElVVlZHU0V4RmJFSlJWV3R6VVRCR1FsRjVlRmhSVlVaWVRFVk9RbEZWVFhOU01FWkNVbmw0UkZGVlJrUk1SWFJDVVZWemMxRXdSa0pSZVhoRVVWVkdRazh4UmtKUk0yaEVURVV4UWxGVk1ITlJNRVpDVVhsNFNsRlZSa3BNUldSQ1VWVmpjMU13UmtKVGVYaEVVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjVlRXBSVlVaS1RFVk9RbEZWVFhOU01FWkNVbmw0UmxGVlJrWk1SVTVDVVZWRk4xTlZSa1JqYTAxelVUQkdRbEY2ZEVwUlZWWkZURWRXUWxGWFZYTlJNRVpDVVhsNFNGRlZSbEpQTVVaQ1VUTlNRMHhGTVVKUlZUQnpWRlZHUWxSVGVFaFJWVVpJVEVWc1FsRlZhM05STUVaQ1VYbDRXRkZWUmxoTVJVNUNVVlZOYzFJd1JrSlNlWGhFVVZWR1JFeEZaRUpSVldOelVUQkdRbEY1ZUVSUlZVWkNUekZHUWxFemFFUk1SVEZDVVZVd2MxRXdSa0pSZVhoT1VWVkdUa3hGWkVKUlZXTnpVekJHUWxONWVFUlJWVVpFVEVWc1FsRlZhM05STUVaQ1VYbDRUbEZWUms1TVJVNUNVVlZOYzFJd1JrSlNlWGhHVVZWR1JreEZUa0pSVlVVM1UxVkdSR1ZyVFhOUk1FWkNVWHAwU2xGVlZrVk1SekZEVVZWR2RGRnBlRVJSVlVaRVRFVmtRbEZXUlRkVlZVWkVUVlZKYzFSVlJrSlVVM2hPVVZWR1RreEZaRUpSVldOelUxVkdRbE5UZUVSUlZVWkVURVprUWxGV1kzTlJNRVpDVVhsNFNGRlZSa2hNUlU1Q1VWVk5jMUl3UmtKU2VYaEVVVlZHUkV4RlRrSlJWVVUzVlZWR1JHVkZUWE5VVlVaQ1ZGTjRSRkZWUmtSTVJURkNVVlV3YzFJd1JrSlNlWGhPVVZWR1RreEZUa0pSVlUxelUxVkdRbE5UZUVoUlZVWklURVZPUWxGVlRYTlJNRVpDVVZSMFNsRlZUbkZSZVhoRVVWVkdSRTh3VGtKUk1GazNVVlZHUmxKRGVHaFJWVVowVVdsNFJGRlZSa3BNUlZaQ1VWVlZjMUV3UmtKVFUzaEdVVlZHUmt4RmRFSlJXRVpEVHpCc1FsRXllRVZNUld4Q1VWVnJjMUpWUmtKU1UzaEVVVlZHUWs4d2JFSlNWVFJ6VWxWR1FsSlRlRVJSVlVaRVRFVk9RbEZWVFhOVE1FWkNVM2w0UkZGVlJrUk1SV1JDVVZWamMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUVGRWVlVaRVlXdEpjMUpWUmtKU1UzaElVVlZHU0V4RmRFSlJWWE56VVRCR1FsRjVlRWhSVlVaSVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWRk4xTlZSa1JpYTBselVUQkdRbEY2ZEVwUlZVWkVURVZzUWxGVmEzTlJNRVpDVVhsNFJGRlZSa1JQTVVaQ1VUQTBjMUpWUmtKU1UzaElVVlZHU0V4RmJFSlJWV3R6VWpCR1FsSjVlRVpSVlVaTVRFVk9RbEZWUlRkVlZVWkVZV3RKYzFNd1JrSlRlWGhFVVZWR1JFeEZaRUpSVldOelVUQkdRbEY1ZUVSUlZVWkVURVZXUWxGVlZYTlNWVVpDVWxONFJGRlZSa1JNUlU1Q1VWVkZOMU5WUmtSaVJVbHpVVEJHUWxGNmRFcFJWVlpGVEVWV1FsRlZWWE5STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlVVM1VWVkdSRmREZUVSUlZVWkVUekJHUWxKVlVYTlpWVVpDWWxWSmMxRXdSa0pUVTNoR1VWVkdSa3hGVGtKUlZXdHpVbFZHUWxKVGVFeFJWVVo0VVdwMFNsRlZUbk5TUTNoT1VWVkdUa3hGVmtKUlZWVnpVakJHUWxKNWVFeFJWVVpNVEVWT1FsRlZUWE5TTUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1FrOHdiRUpTV0ZwRFRFVldRbEZWVlhOUk1FWkNVWGw0UkZGVlJrUk1SVlpDVVZWVmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMDNWVlZHUkZWRGVFWlJWVVpHVEVWT1FsRlZUWE5VVlVaQ1ZGTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1FrOHdiRUpSTWxGelVUQkdRbEY2ZEVKUlZVNUpURVZPUWxGVlRXbG1VVDA5SWl3aWFXMXdiM0owSUhzZ1JXeGxiV1Z1ZEU5aWMyVnlkbVZ5SUgwZ1puSnZiU0JjSWk0dlpXeGxiV1Z1ZEY5dlluTmxjblpsY2x3aU8xeHVhVzF3YjNKMElIc2dUWFZzZEdsdFlYQWdmU0JtY205dElGd2lMaTl0ZFd4MGFXMWhjRndpTzF4dWFXMXdiM0owSUhzZ1pXeGxiV1Z1ZEUxaGRHTm9aWE5UWld4bFkzUnZjaUI5SUdaeWIyMGdYQ0l1TDJSdmJWd2lPMXh1Wlhod2IzSjBJR05zWVhOeklGTmxiR1ZqZEc5eVQySnpaWEoyWlhJZ2UxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVnNaVzFsYm5Rc0lHUmxiR1ZuWVhSbEtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpHVnNaV2RoZEdVZ1BTQmtaV3hsWjJGMFpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bGJHVnRaVzUwVDJKelpYSjJaWElnUFNCdVpYY2dSV3hsYldWdWRFOWljMlZ5ZG1WeUtHVnNaVzFsYm5Rc0lIUm9hWE1wTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk5sYkdWamRHOXlVMlYwSUQwZ2JtVjNJRk5sZENncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1Wc1pXMWxiblJ6SUQwZ2JtVjNJRTExYkhScGJXRndLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZWFIwY21saWRYUmxjeUE5SUc1bGR5Qk5kV3gwYVcxaGNDZ3BPMXh1SUNBZ0lIMWNiaUFnSUNCblpYUWdjM1JoY25SbFpDZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVpXeGxiV1Z1ZEU5aWMyVnlkbVZ5TG5OMFlYSjBaV1E3WEc0Z0lDQWdmVnh1SUNBZ0lITjBZWEowS0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1Wc1pXMWxiblJQWW5ObGNuWmxjaTV6ZEdGeWRDZ3BPMXh1SUNBZ0lIMWNiaUFnSUNCemRHOXdLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbVZzWlcxbGJuUlBZbk5sY25abGNpNXpkRzl3S0NrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsWm5KbGMyZ29LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaV3hsYldWdWRFOWljMlZ5ZG1WeUxuSmxabkpsYzJnb0tUdGNiaUFnSUNCOVhHNGdJQ0FnWjJWMElHVnNaVzFsYm5Rb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1Wc1pXMWxiblJQWW5ObGNuWmxjaTVsYkdWdFpXNTBPMXh1SUNBZ0lIMWNiaUFnSUNCblpYUWdjMlZzWldOMGIzSnpLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnUVhKeVlYa3Vabkp2YlNoMGFHbHpMbk5sYkdWamRHOXlVMlYwS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdaMlYwSUdOdmJYQnZjMmwwWlZObGJHVmpkRzl5S0NrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCamIyMXdiM05wZEdWVFpXeGxZM1J2Y2lBOUlFRnljbUY1TG1aeWIyMG9kR2hwY3k1elpXeGxZM1J2Y2xObGRDa3VhbTlwYmloY0lpd2dYQ0lwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWTI5dGNHOXphWFJsVTJWc1pXTjBiM0l1YkdWdVozUm9JRDA5SURBZ1B5QmNJanB1YjNRb0tpbGNJaUE2SUdOdmJYQnZjMmwwWlZObGJHVmpkRzl5TzF4dUlDQWdJSDFjYmlBZ0lDQXZMeUJUWld4bFkzUnZjaUJ2WW5ObGNuWmhkR2x2Ymx4dUlDQWdJRzlpYzJWeWRtVlRaV3hsWTNSdmNpaHpaV3hsWTNSdmNpa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11YzJWc1pXTjBiM0pUWlhRdWFHRnpLSE5sYkdWamRHOXlLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpXeGxZM1J2Y2xObGRDNWhaR1FvYzJWc1pXTjBiM0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoamIyNXpkQ0JoZEhSeWFXSjFkR1VnYjJZZ2MyVnNaV04wYjNJdVlYUjBjbWxpZFhSbGN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVlYUjBjbWxpZFhSbGN5NWhaR1FvYzJWc1pXTjBiM0lzSUdGMGRISnBZblYwWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5KbFpuSmxjMmdvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J6ZEc5d1QySnpaWEoyYVc1blUyVnNaV04wYjNJb2MyVnNaV04wYjNJcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVjMlZzWldOMGIzSlRaWFF1YUdGektITmxiR1ZqZEc5eUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6Wld4bFkzUnZjbE5sZEM1a1pXeGxkR1VvYzJWc1pXTjBiM0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoamIyNXpkQ0JoZEhSeWFXSjFkR1VnYjJZZ2MyVnNaV04wYjNJdVlYUjBjbWxpZFhSbGN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVlYUjBjbWxpZFhSbGN5NWtaV3hsZEdVb2MyVnNaV04wYjNJc0lHRjBkSEpwWW5WMFpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuSmxabkpsYzJnb0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNBdkx5QkZiR1Z0Wlc1MElHOWljMlZ5ZG1WeUlHUmxiR1ZuWVhSbFhHNGdJQ0FnYldGMFkyaEZiR1Z0Wlc1MEtHVnNaVzFsYm5RcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVnNaVzFsYm5STllYUmphR1Z6VTJWc1pXTjBiM0lvWld4bGJXVnVkQ3dnZEdocGN5NWpiMjF3YjNOcGRHVlRaV3hsWTNSdmNpazdYRzRnSUNBZ2ZWeHVJQ0FnSUcxaGRHTm9SV3hsYldWdWRITkpibFJ5WldVb2RISmxaU2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J0WVhSamFDQTlJSFJvYVhNdWJXRjBZMmhGYkdWdFpXNTBLSFJ5WldVcElEOGdXM1J5WldWZElEb2dXMTA3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRzFoZEdOb1pYTWdQU0JCY25KaGVTNW1jbTl0S0hSeVpXVXVjWFZsY25sVFpXeGxZM1J2Y2tGc2JDaDBhR2x6TG1OdmJYQnZjMmwwWlZObGJHVmpkRzl5S1NrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdFlYUmphQzVqYjI1allYUW9iV0YwWTJobGN5azdYRzRnSUNBZ2ZWeHVJQ0FnSUdWc1pXMWxiblJOWVhSamFHVmtLR1ZzWlcxbGJuUXBJSHRjYmlBZ0lDQWdJQ0FnWm05eUlDaGpiMjV6ZENCelpXeGxZM1J2Y2lCdlppQjBhR2x6TG5ObGJHVmpkRzl5Y3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TG1Wc1pXMWxiblJ6TG1oaGN5aHpaV3hsWTNSdmNpd2daV3hsYldWdWRDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2MyVnNaV04wYjNJdWJXRjBZMmhsY3lobGJHVnRaVzUwS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuSmxZMjl5WkUxaGRHTm9LSE5sYkdWamRHOXlMQ0JsYkdWdFpXNTBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ1pXeGxiV1Z1ZEZWdWJXRjBZMmhsWkNobGJHVnRaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvWTI5dWMzUWdjMlZzWldOMGIzSWdiMllnZEdocGN5NXpaV3hsWTNSdmNuTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtVnNaVzFsYm5SekxtaGhjeWh6Wld4bFkzUnZjaXdnWld4bGJXVnVkQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkpsWTI5eVpGVnViV0YwWTJnb2MyVnNaV04wYjNJc0lHVnNaVzFsYm5RcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJR1ZzWlcxbGJuUkJkSFJ5YVdKMWRHVkRhR0Z1WjJWa0tHVnNaVzFsYm5Rc0lHRjBkSEpwWW5WMFpVNWhiV1VwSUh0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2hqYjI1emRDQnpaV3hsWTNSdmNpQnZaaUIwYUdsekxtRjBkSEpwWW5WMFpYTXVaMlYwUzJWNWMwWnZjbFpoYkhWbEtHRjBkSEpwWW5WMFpVNWhiV1VwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnRZWFJqYUdWa0lEMGdjMlZzWldOMGIzSXViV0YwWTJobGN5aGxiR1Z0Wlc1MEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSEJ5WlhObGJuUWdQU0IwYUdsekxtVnNaVzFsYm5SekxtaGhjeWh6Wld4bFkzUnZjaXdnWld4bGJXVnVkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYldGMFkyaGxaQ0FtSmlBaGNISmxjMlZ1ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y21WamIzSmtUV0YwWTJnb2MyVnNaV04wYjNJc0lHVnNaVzFsYm5RcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCcFppQW9jSEpsYzJWdWRDQW1KaUFoYldGMFkyaGxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjbVZqYjNKa1ZXNXRZWFJqYUNoelpXeGxZM1J2Y2l3Z1pXeGxiV1Z1ZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdMeThnUld4bGJXVnVkQ0JpYjI5cmEyVmxjR2x1WjF4dUlDQWdJSEpsWTI5eVpFMWhkR05vS0hObGJHVmpkRzl5TENCbGJHVnRaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Wld4bGJXVnVkSE11WVdSa0tITmxiR1ZqZEc5eUxDQmxiR1Z0Wlc1MEtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1a1pXeGxaMkYwWlM1bGJHVnRaVzUwVFdGMFkyaGxaRk5sYkdWamRHOXlLR1ZzWlcxbGJuUXNJSE5sYkdWamRHOXlLVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVmpiM0prVlc1dFlYUmphQ2h6Wld4bFkzUnZjaXdnWld4bGJXVnVkQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbVZzWlcxbGJuUnpMbVJsYkdWMFpTaHpaV3hsWTNSdmNpd2daV3hsYldWdWRDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpHVnNaV2RoZEdVdVpXeGxiV1Z1ZEZWdWJXRjBZMmhsWkZObGJHVmpkRzl5S0dWc1pXMWxiblFzSUhObGJHVmpkRzl5S1R0Y2JpQWdJQ0I5WEc1OVhHNHZMeU1nYzI5MWNtTmxUV0Z3Y0dsdVoxVlNURDFrWVhSaE9tRndjR3hwWTJGMGFXOXVMMnB6YjI0N1ltRnpaVFkwTEdWNVNqSmFXRXA2WVZjNWRVbHFiM3BNUTBwdFlWZDRiRWxxYjJsak1sWnpXbGRPTUdJelNtWmlNa3A2V2xoS01scFlTWFZoYmsxcFRFTktlbUl6Vm5sWk1sWlRZakk1TUVscWIybEphWGRwWXpJNU1XTnRUbXhqZVVrMlYzbEpkVXhwT0hWTWFUbDZZMjFOZG1NeVZuVmtSMngxV2xkNGMxbFRPWHBhVjNoc1dUTlNkbU5zT1haWmJrNXNZMjVhYkdOcE5UQmplVXBrVEVOS2RWbFhNV3hqZVVrMlZ6RXdjMGx0TVdoalNFSndZbTFrZWtscWIybFJWVVpDVVZONFVGRlZSbEJNUlZaQ1VWVlZjMXBWUmtKYVUzaEdVVlZGZVZGcGVFNVJWVVpPVEVjNVExRlZSblpSYVhoRVVWVkdRazh3UmtKU1ZHUkdURVU1UWxGVk9ITlNWVVpDVWxONFVsRlZSbEpNUlZaQ1VWVlZjMVJWUmtKVVUzaGFVVlZHV2t4RlRrSlJWVVUzVVZWR1JHTnJUWE5VTUVaQ1ZIbDRSbEZWUmtaTVNFNURVVlZHZWxGcGVFWlJWVVpHVEVVeFFsRlZNSE5VTUVaQ1ZIbDRSRkZWUmtKUE1FWkNWSHBzUkV4Rk1VSlJWVEEzVTFWR1VsTnBlRnBSVlVaYVRFVTVRbEZYWkVOTVJWWkNVVlZWYzFWVlJrSmhNRTAzVlZWR1JFOVZVWE5UVlVaQ1UxTjRSRkZWUmtSTVJrWkNVVlpGYzFJd1JrSlNlWGhTVVZWR1VreEZUa0pSVlVVM1ZWVkdSbVZGU1hOVFZVWkNVMU40UkZGVlJrUk1SMVpDVVZkVmMxSXdSa0pTZVhoS1VWVkdTa3hIVmtKUlYxVnpVVEJHUWxGNWVGQlJWVVpRVEVWV1FsRlZWWE5UVlVaQ1UxTjRSRkZWUmtSTVJVNUNVVlZGTjFWVlJrUmxhMUZ6VTFWR1FsTlRlRVJSVlVaRVRFWmtRbEZXWTNOU01FWkNVbmw0U2xGVlJrcE1SV1JDVVZWamMxSlZSa0pYVTNoRVVWVkdRazh4UmtKUk0xSkVURVZzUWxGVmEzTlJNRVpDVVhsNFVsRlZSbEpNUldSQ1VWVmpjMU5WUmtKVFUzaFNVVlZHVWt4RlZrSlJXRVpEVEVWT1FsRlZSVGRWVlVaRVlXdFJjMU5WUmtKVFUzaEVVVlZHUkV4R1ZrSlJWbFZ6VWpCR1FsSjVlRXBSVlVaS1RFWkdRbEZXUlhOU1ZVWkNZakJKYzFFd1JrSlJWSFJLVVZWT2QxSkRlRVJSVlVaRVR6QnNRbEpWVVhOVFZVWkNVMU40VUZGVlJsQlBNVVpDVVRGUmMxUlZSa0pVVTNoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxGNWVHeFJWVVpzVEVWT1FsRlZUWE5VTUVaQ1ZIbDRSRkZWUmtKUE1HeENVVE5LUkV4RlRrSlJWVTAzVTFWR1JsSkRlRXhSVlVaTVR6RkdRbEV3WjNOVFZVWkNVMU40UkZGVlJrUk1SMVpDVVZkVmMxRXdSa0pSZVhoTVVWVkdURXhGVmtKUlZWVnpVVEJHUWxGVWRFcFJWVTAxVVdsNFJGRlZSa1JQTUd4Q1VsVlJjMU5WUmtKVFZIUlNVVlZPUjB4RmJFSlJWV3R6VVRCR1FsRjVlR3hSVlVac1RFVk9RbEZWVFhOVFZVWkNVMU40UmxGVlJrWk1SVTVDVVZWRk4xTlZSa1JPTUVselVUQkdRbEY2ZEVwUlZWWkZURVU1UWxGVk9EZFZWVVpFVkVONFNsRlZSa3BNUlU1Q1VWVk5jMXBWUmtKYVUzaEVVVlZHUkV4Rk9VSlJWVGh6VWxWR1FsSlRlRVJSVlVaQ1R6QnNRbEV5YUVSTVJVNUNVVlZOTjFOVlJrWlNRM2hLVVZWR1NreEZPVUpSVlRnM1ZWVkdSRlpEZUU1UlZVWk9URVZPUWxGVlRYTlRWVVpDVTFONFJGRlZSa1JNUjFaQ1VWZFZjMUV3UmtKUmVYaFFVVlZHVUV4RlRrSlJWVVUzVTFWR1JHTnJUWE5STUVaQ1VYcDBTbEZWVmtWTVJXeENVVlZyYzFVd1JrSlZlblJTVVZWT1dVeEZNVUpSVlRCelVUQkdRbEY1ZUV4UlZVWk1URVZPUWxGVlRYTlRWVVpDVTFONFJGRlZSa1JNUld4Q1VWVnJjMUV3UmtKUmVYaFlVVlZHV0V4RlRrSlJWVTF6VVRCR1FsRlVkRXBSVlU1NVVYbDRSRkZWUmtSUE1HeENVbFZSYzFOVlJrSlRVM2h3VVd0R1FtRlZTVGRWVlVaRVltdEpjMVJWUmtKVVUzaHdVV3RHUW1GVlNYTlNNRVpDVW5sNFRGRlZSa3hNUlU1Q1VWVk5jMU5WUmtKVFUzaEVVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjVlRmhSVlVaWVRFVk9RbEZWVFhOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRXhGVGtKUlZVVTNWVlZHUkdGclZYTlVWVVpDVkZONFJGRlZSa1JNUjJ4RFVWVkdjRkZwZUVSUlZVWkVURVV4UWxGVk1ITlRWVVpDVTFONFJGRlZSa1JNUldSQ1VWVmpjMVV3UmtKVmVYaElVVlZHU0V4SGJFTlJWVVp3VVdsNFJGRlZSa0pQTUd4Q1VUTlNSa3hGVGtKUlZVMDNVMVZHUmxKRGVERlJhMFpDWkZWSk4xTlZSa1prYTBseldsVkdRbHBUZUVSUlZVWkVURVpHUWxGWGRFTlBNVVpDVVRKb1JFeEZWa0pSVlZWelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlRWVVpDVTFONFJGRlZSa1JNUm1SQ1VWWmpjMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VlZWR1FsVlRlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUlBNV3hDVVROQ1JFeEZiRUpSVld0elVUQkdRbEY1ZUZoUlZVWllURVZPUWxGVlRYTlNNRVpDVW5sNFJGRlZSa1JNUmtaQ1VWWkZjMUV3UmtKUmVYaEVVVlZHUWs4eGJFSlJlbXhEVEVWa1FsRlZZM05STUVaQ1VYbDRSRkZWUmtSTVJURkNVVlV3YzFVd1JrSlZlWGhLVVZWR1NreEdSa0pSVmtWelVUQkdRbEY1ZUZaUlZVWldURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JQTW1SRFVWVk5NVkY1ZUVwUlZVWktURVZPUWxGVlRYTldWVVpDVmxONFJGRlZSa1JNUldSQ1VWVmpjMUV3UmtKUmVYaFNVVlZHVWt4RlZrSlJWVlZ6VlRCR1FsVjVlRVJSVlVaRVRFVk9RbEZWUlRkWFZVWkVUVlZOYzFFd1JrSlJlblJhVVZWT1JVeEZiRUpSVld0elVUQkdRbEY1ZUZCUlZVWlFURVZXUWxGVlZYTlJNRVpDVVZSMFVsRlZUbTlSYVhoRVVWVkdSRTh3YkVKUk1HZHpVVEJHUWxGNmRFcFJWVlpGVEVoR1ExRlZSbmhSYVhoRVVWVkdSRXhHUmtKUlYzUkRUekZHUWxFelVrUk1SVlpDVVZWVmMxRXdSa0pSZVhoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxGNWVGaFJWVVpZVEVWT1FsRlZUWE5TTUVaQ1VubDRSRkZWUmtSTVJrWkNVVlpGYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEZwUlZVNTFVWGw0U2xGVlJrcE1SVTVDVVZWTmMxWXdSa0pXZVhoRVVWVkdSRXhGTVVKUlZUQnpVVEJHUWxGNWVGSlJWVVpTVEVWT1FsRlZUWE5STUVaQ1VWUjBXbEZWVG5GUmVYaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjVlRTVSVlVaT1RFWk9RbEZXVFhOVFZVWkNVMU40VWxGVlJsSk1SVTVDVVZWTmMxWlZSa0pXVTNoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRHNVJhMFpFVGxWTmMxTlZSa0pUVTNoRVVWVkdSRXhHVmtKUlZsVnpVVEJHUWxGNWVFNVJWVVpPVEVWT1FsRlZUWE5WVlVaQ1ZWTjRSbEZWUmtaTVJrNUNVVlpOYzFFd1JrSlJlWGhFVVZWR1FrOHhiRUpSZW1SRVRFVk9RbEZWVFRkWFZVWkVVa040U2xGVlJrcE1SVTVDVVZWTmMxUXdSa0pVZVhoR1VWVkdSa3hGVGtKUlZVVTNWVlZHUkdGRlNYTlJNRVpDVVhwMFNsRlZUa2xNUlU1Q1VWVk5OMU5WUmtaU1EzY3dVV3RHUWs1RlNUZFRWVVpHVGxWSmMxZFZSa0pYVTNoRVVWVkdSRXhGT1VKUlYyUkRUekZHUWxGNlRrTk1SVEZDVVZVd2MxRXdSa0pSZVhoNlVXdEdRbU13U1hOUk1FWkNVWGw0VUZGVlJsQk1SVlpDVVZWVmMxTlZSa0pUVTNoRVVWVkdSRXhIYkVOUlZVWndVV2w0UkZGVlJrUk1SVTVDVVZWRk4xTlZSa1JoUlZWelVUQkdRbEY2ZEVwUlZWWkZURWN4UTFGVlJuUlJhWGhFVVZWR1JFeEZiRUpSVjBVM1ZWVkdSRXd3U1hOVVZVWkNWRk40VEZGVlJreE1SV1JDVVZWamMxTlZSa0pUVTNoRVVWVkdSRXhHYkVKUlZtdHpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5TTUVaQ1VubDRSRkZWUmtSTVJXeENVVlZyYzFFd1JrSlJlWGhJVVZWR1NFeEZWa0pSVlZWelVUQkdRbEZVZEZKUlZVNTFVa040VGxGVlJrNU1SVGxDVVZVNGMxSXdSa0pTZVhoTVVWVkdURXhGVGtKUlZVMXpVMVZHUWxOVGVFUlJWVVpFVEVWc1FsRlZhM05STUVaQ1VYbDRibEZyUmtKYU1FbHpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5oVlVwQ1VWZHNRMHhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpDVHpGR1FsRXpjRVpNUlRGQ1VWVXdjMUV3UmtKUmVYaE1VVlZHVEV4RlRrSlJWVTF6VkZWR1FsUlRlRVJSVlVaRVRFVTVRbEZWT0hOUk1FWkNVWGw0UkZGVlJrSlBNR3hDVVhwc1EweEZUa0pSVlUwM1UxVkdSbEpEZUdwUlZVWnFURVZPUWxGVlRYTlVNRVpDV2pCSk4xVlZSa1JPTUVselVqQkdRbEo1ZUVSUlZVWkVURVZPUWxGVlRYTlVWVVpDVkZONFVsRlZSbEpNUld4Q1VWVnJjMU5WUmtKVFUzaEVVVlZHUkV4R1RrSlJWazF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFRkWFZVWkVaRVZOYzFKVlJrSlNVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRYTlZWVVpDVlZONFJGRlZSa1JNUldSQ1VWVmpjMUV3UmtKUmVYaFNVVlZHVWt4RlZrSlJWVlZ6VkRCR1FsUjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUlBNbVJEVVZWTmVGRjVlRVpSVlVaR1RFVk9RbEZWVFhOUk1FWkNVWGw0VWxGVlJsSk1SVTVDVVZWTmMxUXdSa0pVZVhoRVVWVkdSRXhGT1VKUlZUaHpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBkbEZyUmtSUFZVbHpVMVZHUWxOVGVFUlJWVVpFVEVaa1FsRldZM05STUVaQ1VYbDRVbEZWUmxKTVJWWkNVVlZWYzFRd1JrSlVlWGhFVVZWR1JFeEZUa0pSVlVVM1dqQktRbEV6U2tSTVJVNUNVVlZOTjFkVlJrUlRRM2hFVVZWR1JFOHhSa0pSTUdkelVUQkdRbEY2ZEVwUlZVNUpURVZPUWxGVlRUZFRWVVpHVWtONGJsRnJSa0phTUVselVUQkdRbEY1ZUZCUlZVWnVVV3AwVWxGVlRYWlJhWGhJVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY1ZUU1UlZVWk9URVpHUWxGV1JYTlRWVVpDVTFONFNsRlZSa3BNUlU1Q1VWVk5jMVV3UmtKVmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjZkRnBSVlU0d1VYbDRSbEZWUmtaTVJVNUNVVlZOYzFFd1JrSlJlWGhLVVZWR1NreEZUa0pSVlUxelZWVkdRbFZUZUVSUlZVWkVURVZrUWxGVlkzTlJNRVpDVVhsNFVsRlZSbEpNUlZaQ1VWVlZjMVF3UmtKVWVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVR6SmtRMUZWVGpaUmVYaEtVVlZHU2t4RlRrSlJWVTF6V1ZWR1FsbFRlRVJSVlVaRVRFWkdRbEZXUlhOU1ZVWkNVbE40VUZGVlJsQk1SVTVDVVZWTmMxRXdSa0pSVkhSYVVWVk9NbEY1ZUVSUlZVWkVUekZHUWxFd1ozTlJNRVpDVVhwMFNsRlZUa2xNUlU1Q1VWVk5OMU5WUmtaU1EzZ3hVV3RHUW1SVlNYTlJNRVpDVVhsNFVGRlZSbTVSYVhoR1VWVkdSa3hIUmtKUldFWkRUekZHUWxGNlpFVk1SV1JDVVZWamMxRXdSa0pSZVhoRVVWVkdSRXhGTVVKUlZUQnpWVlZHUWxWVGVFcFJWVVpLVEVWc1FsRlZhM05STUVaQ1VYbDRWbEZWUmxaTVJVNUNVVlZOYzFwVlJrSmFVM2hFVVZWR1JFeEhSa0pSVjBWelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhwMFdsRlZUakJTVTNoT1VWVkdUa3hGT1VKUlZUaHpVakJHUWxKNWVGSlJWVVpTVEVWT1FsRlZUWE5VTUVaQ1ZIbDRSRkZWUmtSTVJUbENVVlU0YzFFd1JrSlJlWGhFVVZWR1FrOHhiRUpSTTNCRVRFVXhRbEZWTUhOVU1FWkNWSGw0U0ZGVlJraE1SV3hDVVZWcmMxRXdSa0pSZVhoU1VWVkdVa3hGVGtKUlZVMXpVakJHUWxKNWVFUlJWVVpFVEVaR1FsRldSWE5TVlVaQ1VsTjRVRkZWUmxCTVJVNUNVVlZOYzFFd1JrSlJWSFJhVVZWV2QxSkRlRVpSVlVaR1RFVk9RbEZWVFhOUk1FWkNVWGw0VUZGVlJsQk1SV3hDVVZWcmMxRXdSa0pSZVhoUVVWVkdVRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpKa1ExRlZUalJSYVhoS1VWVkdTa3hGVGtKUlZVMXpWakJHUWxaNWVFUlJWVVpFVEVaR1FsRldSWE5TVlVaQ1VsTjRVRkZWUmxCTVJVNUNVVlZOYzFFd1JrSlJWSFJhVVZWT2VWRjVlRVJSVlVaRVR6RnNRbEZWVFhOVFZVWkNVMU40UkZGVlJrUk1SVlpDVVZWVmMxRXdSa0pSZVhoRVVWVkdSRXhGT1VKUlZUaHpVMVZHUWxOVGVFUlJWVVpFVEVVNVFsRlZPSE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOTjFvd1NrSlJlVGxEVEVWc1FsRlZhM05STUVaQ1VYbDRhRkZWUm1oTVJVNUNVVlZOYzFWVlJrSlZVM2hHVVZWR1JreEZPVUpSVlRoelVUQkdRbEY1ZUVSUlZVWkNUekZzUWxFeldrUk1SVTVDVVZWTk4xVlZSa1JUUTNoRVVWVkdSRTh3YkVKUk1HZHpVVEJHUWxGNmRFcFJWVlpGVEVoT1ExRlZSbnBSYW5SS1VWVldhMHhHWkVKUlZtTnpVVEJHUWxGNWVGSlJWVVp5VVdsNFJsRlZSa1pNUlRsQ1VWZGtRMDh4UmtKUk0xSkZURVZzUWxGVmEzTlJNRVpDVVhsNFVsRlZSbEpNUlU1Q1VWVk5jMUl3UmtKU2VYaEVVVlZHUkV4R1JrSlJWa1Z6VWxWR1FsSlRlRkJSVlVaUVRFVk9RbEZWVFhOUk1FWkNVVlIwVWxGVlRuZFJlWGhLVVZWR1NreEZUa0pSVlUxelZWVkdRbFZUZUVSUlZVWkVURWhPUTFGVlJucFJhWGhFVVZWR1JFeEZPVUpSVlRoelVsVkdRbEpUZUZKUlZVWlNURVZPUWxGVlRYTlJNRVpDVVZSMFNsRlZUalpTUTNoRVVWVkdSRTh3YkVKU1ZUaHpXVlZHUWxsVGVFUlJWVVpFVEVaR1FsRlhkRU5NUlZaQ1VWVlZjMVF3UmtKYU1FazNWVlZHUkdWRlVYTlRWVVpDVTFONFJGRlZSa1JNUmtaQ1VWWkZjMUV3UmtKUmVYaE9VVlZHVGt4RlRrSlJWVTF6VlZWR1FsVlRlRVpSVlVaR1RFVTVRbEZWT0hOUk1FWkNVWGw0UkZGVlJrSlBNVVpDVVROYVJFeEZiRUpSVld0elVUQkdRbEY1ZUZKUlZVWlNURVZPUWxGVlRYTmtNRXBDVVZoa1EweEZUa0pSVlUxelZEQkdRbFI1ZUVaUlZVWkdURVpHUWxGV1JYTlJNRVpDVVhsNFJGRlZSa0pQTUd4Q1VYcE9SVXhGVGtKUlZVMDNVVEJHUkZKcFNqa2lMQ0pwYlhCdmNuUWdleUJGYkdWdFpXNTBUMkp6WlhKMlpYSWdmU0JtY205dElGd2lMaTlsYkdWdFpXNTBYMjlpYzJWeWRtVnlYQ0k3WEc1cGJYQnZjblFnZXlCTmRXeDBhVzFoY0NCOUlHWnliMjBnWENJdUwyMTFiSFJwYldGd1hDSTdYRzVsZUhCdmNuUWdZMnhoYzNNZ1ZHOXJaVzVNYVhOMFQySnpaWEoyWlhJZ2UxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVnNaVzFsYm5Rc0lHRjBkSEpwWW5WMFpVNWhiV1VzSUdSbGJHVm5ZWFJsS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WVhSMGNtbGlkWFJsVG1GdFpTQTlJR0YwZEhKcFluVjBaVTVoYldVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WkdWc1pXZGhkR1VnUFNCa1pXeGxaMkYwWlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVsYkdWdFpXNTBUMkp6WlhKMlpYSWdQU0J1WlhjZ1JXeGxiV1Z1ZEU5aWMyVnlkbVZ5S0dWc1pXMWxiblFzSUhSb2FYTXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuUnZhMlZ1YzBKNVJXeGxiV1Z1ZENBOUlHNWxkeUJOZFd4MGFXMWhjQ2dwTzF4dUlDQWdJSDFjYmlBZ0lDQm5aWFFnYzNSaGNuUmxaQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaV3hsYldWdWRFOWljMlZ5ZG1WeUxuTjBZWEowWldRN1hHNGdJQ0FnZlZ4dUlDQWdJSE4wWVhKMEtDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtVnNaVzFsYm5SUFluTmxjblpsY2k1emRHRnlkQ2dwTzF4dUlDQWdJSDFjYmlBZ0lDQnpkRzl3S0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1Wc1pXMWxiblJQWW5ObGNuWmxjaTV6ZEc5d0tDazdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbFpuSmxjMmdvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Wld4bGJXVnVkRTlpYzJWeWRtVnlMbkpsWm5KbGMyZ29LVHRjYmlBZ0lDQjlYRzRnSUNBZ1oyVjBJR1ZzWlcxbGJuUW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtVnNaVzFsYm5SUFluTmxjblpsY2k1bGJHVnRaVzUwTzF4dUlDQWdJSDFjYmlBZ0lDQm5aWFFnYzJWc1pXTjBiM0lvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCZ1d5UjdkR2hwY3k1aGRIUnlhV0oxZEdWT1lXMWxmVjFnTzF4dUlDQWdJSDFjYmlBZ0lDQm5aWFJGYkdWdFpXNTBjMDFoZEdOb2FXNW5WRzlyWlc0b2RHOXJaVzRwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVkRzlyWlc1elFubEZiR1Z0Wlc1MExtZGxkRXRsZVhOR2IzSldZV3gxWlNoMGIydGxiaWs3WEc0Z0lDQWdmVnh1SUNBZ0lDOHZJRVZzWlcxbGJuUWdiMkp6WlhKMlpYSWdaR1ZzWldkaGRHVmNiaUFnSUNCdFlYUmphRVZzWlcxbGJuUW9aV3hsYldWdWRDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdaV3hsYldWdWRDNW9ZWE5CZEhSeWFXSjFkR1VvZEdocGN5NWhkSFJ5YVdKMWRHVk9ZVzFsS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdiV0YwWTJoRmJHVnRaVzUwYzBsdVZISmxaU2gwY21WbEtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHMWhkR05vSUQwZ2RHaHBjeTV0WVhSamFFVnNaVzFsYm5Rb2RISmxaU2tnUHlCYmRISmxaVjBnT2lCYlhUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2JXRjBZMmhsY3lBOUlFRnljbUY1TG1aeWIyMG9kSEpsWlM1eGRXVnllVk5sYkdWamRHOXlRV3hzS0hSb2FYTXVjMlZzWldOMGIzSXBLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzFoZEdOb0xtTnZibU5oZENodFlYUmphR1Z6S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdaV3hsYldWdWRFMWhkR05vWldRb1pXeGxiV1Z1ZENrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdVpYZFViMnRsYm5NZ1BTQkJjbkpoZVM1bWNtOXRLSFJvYVhNdWNtVmhaRlJ2YTJWdVUyVjBSbTl5Uld4bGJXVnVkQ2hsYkdWdFpXNTBLU2s3WEc0Z0lDQWdJQ0FnSUdadmNpQW9ZMjl1YzNRZ2RHOXJaVzRnYjJZZ2JtVjNWRzlyWlc1ektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbUZrWkZSdmEyVnVSbTl5Uld4bGJXVnVkQ2gwYjJ0bGJpd2daV3hsYldWdWRDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ1pXeGxiV1Z1ZEZWdWJXRjBZMmhsWkNobGJHVnRaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhSdmEyVnVjeUE5SUhSb2FYTXVaMlYwVkc5clpXNXpSbTl5Uld4bGJXVnVkQ2hsYkdWdFpXNTBLVHRjYmlBZ0lDQWdJQ0FnWm05eUlDaGpiMjV6ZENCMGIydGxiaUJ2WmlCMGIydGxibk1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNtVnRiM1psVkc5clpXNUdiM0pGYkdWdFpXNTBLSFJ2YTJWdUxDQmxiR1Z0Wlc1MEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCbGJHVnRaVzUwUVhSMGNtbGlkWFJsUTJoaGJtZGxaQ2hsYkdWdFpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRzVsZDFSdmEyVnVVMlYwSUQwZ2RHaHBjeTV5WldGa1ZHOXJaVzVUWlhSR2IzSkZiR1Z0Wlc1MEtHVnNaVzFsYm5RcE8xeHVJQ0FnSUNBZ0lDQm1iM0lnS0dOdmJuTjBJSFJ2YTJWdUlHOW1JRUZ5Y21GNUxtWnliMjBvYm1WM1ZHOXJaVzVUWlhRcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbUZrWkZSdmEyVnVSbTl5Uld4bGJXVnVkQ2gwYjJ0bGJpd2daV3hsYldWdWRDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWm05eUlDaGpiMjV6ZENCMGIydGxiaUJ2WmlCMGFHbHpMbWRsZEZSdmEyVnVjMFp2Y2tWc1pXMWxiblFvWld4bGJXVnVkQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGJtVjNWRzlyWlc1VFpYUXVhR0Z6S0hSdmEyVnVLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjbVZ0YjNabFZHOXJaVzVHYjNKRmJHVnRaVzUwS0hSdmEyVnVMQ0JsYkdWdFpXNTBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNBdkx5QlFjbWwyWVhSbFhHNGdJQ0FnWVdSa1ZHOXJaVzVHYjNKRmJHVnRaVzUwS0hSdmEyVnVMQ0JsYkdWdFpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1MGIydGxibk5DZVVWc1pXMWxiblF1YUdGektHVnNaVzFsYm5Rc0lIUnZhMlZ1S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTBiMnRsYm5OQ2VVVnNaVzFsYm5RdVlXUmtLR1ZzWlcxbGJuUXNJSFJ2YTJWdUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaR1ZzWldkaGRHVXVaV3hsYldWdWRFMWhkR05vWldSVWIydGxia1p2Y2tGMGRISnBZblYwWlNobGJHVnRaVzUwTENCMGIydGxiaXdnZEdocGN5NWhkSFJ5YVdKMWRHVk9ZVzFsS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J5WlcxdmRtVlViMnRsYmtadmNrVnNaVzFsYm5Rb2RHOXJaVzRzSUdWc1pXMWxiblFwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWRHOXJaVzV6UW5sRmJHVnRaVzUwTG1oaGN5aGxiR1Z0Wlc1MExDQjBiMnRsYmlrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkRzlyWlc1elFubEZiR1Z0Wlc1MExtUmxiR1YwWlNobGJHVnRaVzUwTENCMGIydGxiaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1SbGJHVm5ZWFJsTG1Wc1pXMWxiblJWYm0xaGRHTm9aV1JVYjJ0bGJrWnZja0YwZEhKcFluVjBaU2hsYkdWdFpXNTBMQ0IwYjJ0bGJpd2dkR2hwY3k1aGRIUnlhV0oxZEdWT1lXMWxLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQm5aWFJVYjJ0bGJuTkdiM0pGYkdWdFpXNTBLR1ZzWlcxbGJuUXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWRHOXJaVzV6UW5sRmJHVnRaVzUwTG1kbGRGWmhiSFZsYzBadmNrdGxlU2hsYkdWdFpXNTBLVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVmhaRlJ2YTJWdVUyVjBSbTl5Uld4bGJXVnVkQ2hsYkdWdFpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFJ2YTJWdWN5QTlJRzVsZHlCVFpYUW9LVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkbUZzZFdVZ1BTQmxiR1Z0Wlc1MExtZGxkRUYwZEhKcFluVjBaU2gwYUdsekxtRjBkSEpwWW5WMFpVNWhiV1VwSUh4OElGd2lYQ0k3WEc0Z0lDQWdJQ0FnSUdadmNpQW9ZMjl1YzNRZ2RHOXJaVzRnYjJZZ2RtRnNkV1V1YzNCc2FYUW9MMXhjY3lzdktTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJ2YTJWdUxteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnZhMlZ1Y3k1aFpHUW9kRzlyWlc0cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGIydGxibk03WEc0Z0lDQWdmVnh1ZlZ4dUx5OGpJSE52ZFhKalpVMWhjSEJwYm1kVlVrdzlaR0YwWVRwaGNIQnNhV05oZEdsdmJpOXFjMjl1TzJKaGMyVTJOQ3hsZVVveVdsaEtlbUZYT1hWSmFtOTZURU5LYldGWGVHeEphbTlwWkVjNWNscFhOV1ppUjJ4NlpFWTVkbGx1VG14amJscHNZMmsxY1dONVNYTkpiazUyWkZoS2FscFdTblppTTFGcFQybEphVXhEU25waU0xWjVXVEpXZWtscWNHSkphVFIxVEhrMGRVd3pUbmxaZVRsNldsYzFNR0ZYTld4aVIzaG9URE5TZG1FeVZuVllNbmh3WXpOU1ptSXlTbnBhV0VveVdsaEpkV1JJVFdsWVUzZHBZbTFHZEZwWVRXbFBiSFJrVEVOS2RGbFlRbmRoVnpWdVkzbEpOa2xyUmtKUlZVVnpWREJHUWxSNWVFWlJWVVpHVEVkV1FsRlhWWE5TVlVaQ1RXdEpjMVJWUmtKVVUzaDJVV3RHUW1Jd1NYTlJNRVpDVVZSMFFsRlZUVE5TVTNoUVVWVkdVRXhGVmtKUlZWVnpWVlZHUWxWVGVFWlJWVVpHVEVVeFFsRlZNSE5YVlVaQ1YxTjRSRkZWUmtKUE1FWkNWRE5LUkV4Rk1VSlJWVEEzVTFWR1VGTnBlRnBSVlVaYVRFVTVRbEZYWkVOTVJWWkNVVlZWYzFsVlJrSmpWVWx6VWxWR1FsSlRlRkpSVlVaMFVYcDBVbEZWVGpCU2FYaEtVVlZHU2t4RlRrSlJWVTF6V1ZWR1FsbFRlRWhSVlVaSVRFZEdRbEZYUlhOUk1FWkNVVlIwVWxGVlRuTlJlWGhLVVZWR1NreEZUa0pSVlUxelZWVkdRbFZUZUVoUlZVWklURVpHUWxGV1JYTlJNRVpDVVZSMFVsRlZWalJSYVhoS1VWVkdTa3hGVGtKUlZVMXpXbFZHUWxwVGVFaFJWVVpJVEVWc1FsRlZhM05hVlVaQ1dsTjRSRkZWUmtSTVJUbENVVlU0YzFKVlJrSlNVM2hLVVZWR1NreEZUa0pSVlUxelVUQkdRbEZVZEZKUlZVNDJVa040U2xGVlJrcE1SVTVDVVZWTmMxcFZSa0phVTNoSVVWVkdTRXhGYkVKUlZXdHpWVlZHUWxWVGVFWlJWVVowVVdsNFJGRlZSa0pQTUd4Q1VUTm9SVXhGVGtKUlZVMDNVMVZHUmxKRGVFcFJWVVpLVEVVNVFsRlZPRGRWVlVaRVZrTjRUbEZWUms1TVJVNUNVVlZOYzFOVlJrSlRVM2hFVVZWR1JFeEhWa0pSVjFWelVUQkdRbEY1ZUZCUlZVWlFURVZPUWxGVlJUZFRWVVpFWTJ0TmMxRXdSa0pSZW5SS1VWVldSVXhGZEVKUlZYTTNWVlZHUkZORGVFcFJWVVpLVEVWT1FsRlZUWE5hVlVaQ1dsTjRSRkZWUmtSTVJYUkNVVlZ6YzFKVlJrSlNVM2hFVVZWR1FrOHdiRUpSZW14RFRFVk9RbEZWVFRkVFZVWkdVa040U2xGVlJrcFBNVVpDVVRCWmMxTlZSa0pUVTNoRVVWVkdSRXhIVmtKUlYxVnpVVEJHUWxGNWVFcFJWVVpLVEVWV1FsRlZWWE5STUVaQ1VWUjBTbEZWVFROUmFYaEVVVlZHUkU4d2JFSlNWVkZ6VkRCR1FsUjZkRkpSVlU1TlRFVnNRbEZWYTNOUk1FWkNVWGw0YkZGVlJteE1SVTVDVVZWTmMxUXdSa0pVZVhoR1VWVkdSa3hGVGtKUlZVVTNVMVZHUkdGRlRYTlJNRVpDVVhwMFNsRlZWa1ZNUld4Q1VWVnJjMVF3UmtKVWVuUlNVVlZPVlV4Rk1VSlJWVEJ6VVRCR1FsRjVlRXBSVlVaS1RFVk9RbEZWVFhOYVZVWkNXbE40UkZGVlJrUk1SVGxDVVZVNGMxRXdSa0pSVkhSS1VWVk9lVkY1ZUVSUlZVWkVUekJzUWxKVlVYTlRWVVpDVTFONFVsRlZSbEpQTVVaQ1VURlpjMVJWUmtKVVUzaEVVVlZHUkV4RmJFSlJWV3R6VTFWR1FsTlRlRVJSVlVaRVRFZEdRbEZYUlhOU01FWkNVbmw0UkZGVlJrSlBNR3hDVVRKNFJFeEZUa0pSVlUwM1UxVkdSbEpEZUROUmEwWkNaREJKYzFFd1JrSlJlWGhNVVZWR2FFOHhSa0pSTTBKRVRFVXhRbEZWTUhOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxcFZSa0phVTNoRVVWVkdSRXhIVmtKUlYxVnpVVEJHUWxGNWVFeFJWVVpNVEVWT1FsRlZUWE5STUVaQ1VWUjBTbEZWVG5kU1EzaEVVVlZHUkU4d2JFSlNWVkZ6VGtWS1FsRlVVa05QTUd4Q1VsUldRMHhHYkVKUlZtdHpVVEJHUWxGNWVGQlJWVVp1VVdwMFVsRlZUWHBSYVhoT1VWVkdUa3hGVGtKUlZVMXpWREJHUWxSNWVFUlJWVVpFVEVac1FsRldhM05STUVaQ1VYbDRTbEZWUmtwTVJVNUNVVlZOYzFsVlJrSlpVM2hFVVZWR1JFeEZUa0pSVlVVM1UxVkdSR0ZyVVhOUk1FWkNVWHAwU2xGVlZrVk1SekZEVVZWR2RGRnBlRVJSVlVaRVRFVnNRbEZYUlRkVlZVWkVUREJKYzFSVlJrSlVVM2hNVVZWR1RFeEZaRUpSVldOelUxVkdRbE5UZUVSUlZVWkVURVpzUWxGV2EzTlJNRVpDVVhsNFNsRlZSa3BNUlU1Q1VWVk5jMUl3UmtKU2VYaEVVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjVlRWhSVlVaSVRFVldRbEZWVlhOUk1FWkNVVlIwVWxGVlRuVlNRM2hPVVZWR1RreEZPVUpSVlRoelVqQkdRbEo1ZUV4UlZVWk1URVZPUWxGVlRYTlRWVVpDVTFONFJGRlZSa1JNUld4Q1VWVnJjMUV3UmtKUmVYaHVVV3RHUWxvd1NYTlJNRVpDVVhsNFNsRlZSa3BNUlU1Q1VWVk5jMVZWUmtKVlUzaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRlVkRkpSVlU1dlVsTjRUbEZWUms1TVJVNUNVVlZOYzFNd1JrSlRlWGhFVVZWR1JFeEZNVUpSVlRCelVUQkdRbEY1ZUZCUlZVWlFURVZPUWxGVlRYTlJNRVpDVVZSMFNsRlZUVFZSYVhoRVVWVkdSRTh3YkVKU1ZWRnpXVEJHUWxsNWVFUlJWVVpFVEVVNVFsRlhaRU5QTVVaQ1VYcGtRMHhGTVVKUlZUQnpWVEJHUWxWNWVFaFJWVVpJVEVWMFFsRlZjM05STUVaQ1VYbDRTbEZWUmtwTVJVNUNVVlZOYzFOVlJrSlRVM2hFVVZWR1JFeElUa05SVlVaNlVXbDRSRkZWUmtSTVJUbENVVlU0YzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlVVM1ZWVkdSR0pGVlhOU01FWkNVbmw0UkZGVlJrUk1SVTVDVVZWTmMxUlZSa0pVVTNoTVVWVkdURXhGYkVKUlZXdHpWVEJHUWxWNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBXbEZWVFRWUmFYaEtVVlZHU2t4RlRrSlJWVTF6WVRCS1FsRlhkRU5NUlU1Q1VWVk5jMU13UmtKVGVYaEdVVlZHUmt4Rk9VSlJWVGh6VVRCR1FsRjVlRVJSVlVaQ1R6RkdRbEV6Y0VSTVJVNUNVVlZOTjFOVlJrUlRRM2hFVVZWR1JFOHdiRUpTVlZGeldqQktRbEZYWkVOTVJVNUNVVlZOYzFRd1JrSmFNRWszVlZWR1JFd3dTWE5VVlVaQ1ZGTjRUbEZWUms1TVJXUkNVVlZqYzFOVlJrSlRVM2hFVVZWR1JFeEhNVU5SVlVaMFVXbDRSRkZWUmtSTVJUbENVVlU0YzFFd1JrSlJlWGhFVVZWR1FrOHhSa0pSTW1oRlRFVmtRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUk1SVEZDVVZVd2MxTXdSa0pUZVhoS1VWVkdTa3hGTVVKUlZUQnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUVGRYVlVaRVRUQkpjMU5WUmtKVFUzaEVVVlZHUkV4SVJrTlJWVVo0VVdsNFJGRlZSa1JNUlhSQ1VWVnpjMUpWUmtKU1UzaFFVVlZHVUV4RlRrSlJWVTF6VVRCR1FsRlVkRkpSVlUweFVYbDRSRkZWUmtSUE1HeENVVEJuYzFFd1JrSlJlblJLVVZWV1JVeElWa05SVlVZeFVXbDRSRkZWUmtSTVJUbENVVmRrUTA4eFJrSlJNMUpFVEVVeFFsRlZNSE5XTUVaQ1ZubDRTRkZWUmtoTVJXeENVVlZyYzFFd1JrSlJlWGg2VVd0R1FtTXdTWE5STUVaQ1VYbDRVRkZWUmxCTVJVNUNVVlZOYzFFd1JrSlJWSFJTVVZWV05GSkRlRWhSVlVaSVRFVk9RbEZWVFhOUk1FWkNVWGw0VGxGVlJrNU1SWFJDVVZWemMxTlZSa0pUVTNoTVVWVkdURXhGVGtKUlZVMXpVMVZHUWxOVGVFUlJWVVpFVEVaa1FsRldZM05STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlblJhVVZWTk1WRjVlRXBSVlVaS1RFVk9RbEZWVFhOaE1FcENVVmQwUTB4RlRrSlJWVTF6VXpCR1FsTjVlRVpSVlVaR1RFVTVRbEZWT0hOUk1FWkNVWGw0UkZGVlJrSlBNVVpDVVROd1JFeEZUa0pSVlUwM1ZWVkdSbEpEZUVoUlZVWklURVZPUWxGVlRYTlJNRVpDVVhsNFRsRlZSazVNUlhSQ1VWVnpjMU5WUmtKVFUzaEtVVlZHU2t4RlRrSlJWVTF6WWxWS1FsRlhNVU5NUlU1Q1VWVk5jMVF3UmtKVWVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVR6RnNRbEV6VWtWTVJWWkNVVlZWYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelZqQkdRbFo1ZUVSUlZVWkVURVZrUWxGVlkzTlJNRVpDVVhsNFRGRlZSa3hNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzV2pCS1FsRjZWa05NUld4Q1VWVnJjMUV3UmtKUmVYaDRVV3RHUW1OVlNYTlJNRVpDVVhsNFRGRlZSa3hNUlZaQ1VWVlZjMVF3UmtKVWVYaEVVVlZHUkV4RlRrSlJWVVUzVjFWR1JFNVZUWE5STUVaQ1VYcDBVbEZWVGtsTVJVNUNVVlZOTjFOVlJrUlRRM2hFVVZWR1JFOHdiRUpTVlZGelZsVkdRbFpVZEVwUlZWWlhURWQwUTFGVlJuSlJhWGhFVVZWR1JFeEZkRUpSVjBWelVsVkdRbEpUZUZCUlZVWnVVV3AwVWxGVlRtOVNRM2hHVVZWR1JreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZzUWxGVmEzTlJNRVpDVVhsNGJGRlZSbXhNUlU1Q1VWVk5jMUl3UmtKU2VYaEVVVlZHUkV4Rk9VSlJWVGh6VWxWR1FsSlRlRXhSVlVaTVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTk4xZFZSa1JQVlUxelUxVkdRbE5UZUVSUlZVWkVURWRXUWxGWFZYTlJNRVpDVVhsNFNGRlZSa2hNUlU1Q1VWVk5jMVF3UmtKVWVYaEdVVlZHUmt4RmRFSlJWWE56VVRCR1FsRjVlRVJSVlVaQ1R6RnNRbEV6YUVSTVJXeENVVlZyYzFFd1JrSlJlWGhTVVZWR1VreEZUa0pSVlUxelN6QktRbEZUZEVOTVJVNUNVVlZOYzFRd1JrSlVlWGhHVVZWR1JreEZkRUpSVlhOelVsVkdRbEpUZUVwUlZVWktURVZPUWxGVlRYTlpWVVpDV1ZONFJGRlZSa1JNUlU1Q1VWVkZOMVZWUmtSaWExbHpVVEJHUWxGNmRFcFJWVTVKVEVWT1FsRlZUVGRUVlVaR1VrTjRlRkZyUmtKalZVbHpVVEJHUWxGNWVFeFJWVVpvVEVWV1FsRlZWWE5VTUVaQ1dqQkpOMVZWUmtSaWExRnpVbFZHUWxKVGVFUlJWVVpFVEVWT1FsRlZUWE5UVlVaQ1UxTjRSRkZWUmtSTVIxWkNVVmRWYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelZEQkdRbFI1ZUVaUlZVWkdURVYwUWxGVmMzTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUmFVVlZOTTFGNWVFcFJWVVpLVEVWT1FsRlZUWE5hVlVaQ1dsTjRSRkZWUmtSTVJURkNVVlV3YzFFd1JrSlJlWGhRVVZWR1VFeEZWa0pSVlZWelV6QkdRbE41ZUVSUlZVWkVURVZPUWxGVlJUZFhWVVpFVFRCTmMxTlZSa0pUVTNoRVVWVkdSRXhHUmtKUlZrVnpVVEJHUWxGNWVIQlJNRVpDWVZWTmMxRXdSa0pSZVhoUVVWVkdVRXhGVmtKUlZWVnpVekJHUWxONWVFWlJWVVpHVEVWc1FsRlZhM05STUVaQ1VYbDRhRkZWUm1oTVJVNUNVVlZOYzFFd1JrSlJWSFJTVVZWT2VWSnBlRVJSVlVaRVR6QnNRbEV3WjNOUk1FWkNVWHAwU2xGVlZrVk1SekZEVVZWR2RGRnBlRVJSVlVaRVRFVTVRbEZYWkVOUE1VWkNVVEo0UkV4Rk1VSlJWVEJ6VVRCR1FsRjVlRXBSVlVaS1RFVk9RbEZWVFhOYVZVWkNXbE40UkZGVlJrUk1SMVpDVVZkVmMxRXdSa0pSZVhoUVVWVkdVRXhGVGtKUlZVMXpVVEJHUWxGVWRFcFJWVTR3VWtONFJGRlZSa1JQTUd4Q1VsVlJjMk13U2tKUldFNURURVZPUWxGVlRYTlVNRVpDV2pCSk4xVlZSa1JqYTAxelZGVkdRbFJUZUU1UlZVWk9URVZrUWxGVlkzTlRWVVpDVTFONFNGRlZSa2hNUlZaQ1VWWlZjMUV3UmtKUlZIUlNVVlZPYjFGNWVFNVJWVVpPVEVWMFFsRlZjM05TTUVaQ1VubDRVRkZWUmxCTVJVNUNVVlZOYzFkVlJrSlhVM2hFVVZWR1JFeEZiRUpSVld0elVUQkdRbEY1ZUdoUlZVWm9URVZPUWxGVlRYTlRWVVpDVTFONFJsRlZSa1pNUlU1Q1VWVkZOMVZWUmtST1ZWRnpVakJHUWxKNWVFUlJWVVpFVEVWT1FsRlZUWE5VVlVaQ1ZGTjRURkZWUmt4TVJXeENVVlZyYzFNd1JrSlRlWGhFVVZWR1JFeEZkRUpSVlhOelVUQkdRbEY1ZUV4UlZVWk1URVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5OMWRWUmtSa2EwMXpVbFZHUWxKVGVFUlJWVVpFVEVWT1FsRlZUWE5UTUVaQ1UzbDRSRkZWUmtSTVJURkNVVlV3YzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUwM1dqQktRbEV5Y0VOTVJURkNVVlV3YzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelV6QkdRbE41ZUVSUlZVWkVURVZPUWxGVlJUZFhWVVpFWW10SmMxRXdSa0pSZW5SU1VWVk9TVXhGVGtKUlZVMDNWVlZHUmxKRGVFNVJWVVpPVEVWT1FsRlZUWE5VVlVaQ1ZGTjRSRkZWUmtKUE1HeENVVEpaYzFFd1JrSlJlblJFVVZWT1IwbHVNRDBpWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN08wRkJRVUVzVFVGQlRTeEZRVUZGTEZOQlFWTXNSVUZCUlN4SFFVRkhMRTlCUVU4c1EwRkJRenRCUVVNNVFpeE5RVUZOTEU5QlFVOHNSMEZCUnl4VFFVRlRMRU5CUVVNc1QwRkJUeXhKUVVGSkxGTkJRVk1zUTBGQlF5eHhRa0ZCY1VJc1NVRkJTU3hUUVVGVExFTkJRVU1zYVVKQlFXbENMRU5CUVVNN1FVRkRjRWNzUVVGQlR5eFRRVUZUTEhOQ1FVRnpRaXhEUVVGRExFOUJRVThzUlVGQlJTeFJRVUZSTEVWQlFVVTdTVUZEZEVRc1QwRkJUeXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNSVUZCUlN4UlFVRlJMRU5CUVVNc1EwRkJRenREUVVNeFF5eEJRVU5FT3p0QlEwcFBMRTFCUVUwc1VVRkJVU3hEUVVGRE8wbEJRMnhDTEZkQlFWY3NRMEZCUXl4TlFVRk5MRVZCUVVVN1VVRkRhRUlzU1VGQlNUdFpRVU5CTEVsQlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1RVRkJUU3hEUVVGRE8xbEJRM0pDTEVsQlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1MwRkJTeXhEUVVGRExGVkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1dVRkROVU1zU1VGQlNTeERRVUZETEZsQlFWa3NSMEZCUnl4dlFrRkJiMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1UwRkRla1E3VVVGRFJDeFBRVUZQTEV0QlFVc3NSVUZCUlR0WlFVTldMRTFCUVUwc1NVRkJTU3hMUVVGTExFTkJRVU1zUTBGQlF5eHRRa0ZCYlVJc1JVRkJSU3hOUVVGTkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VTBGRGRFVTdTMEZEU2p0SlFVTkVMRTlCUVU4c1IwRkJSeXhEUVVGRExFMUJRVTBzUlVGQlJUdFJRVU5tTEVsQlFVa3NVVUZCVVN4RFFVRkRPMUZCUTJJc1RVRkJUU3hUUVVGVExFZEJRVWNzVVVGQlVTeERRVUZETEZOQlFWTXNRMEZCUXp0UlFVTnlReXhOUVVGTkxFZEJRVWNzVFVGQlRTeERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRE8xRkJRMnhETEVsQlFVa3NVMEZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zUlVGQlJUdFpRVU4yUWl4UlFVRlJMRWRCUVVjc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0VFFVTndRenRoUVVOSk8xbEJRMFFzVVVGQlVTeEhRVUZITEVsQlFVa3NVVUZCVVN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8xbEJRMmhETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1RVRkJUU3hGUVVGRkxGRkJRVkVzUTBGQlF5eERRVUZETzFOQlEyNURPMUZCUTBRc1QwRkJUeXhSUVVGUkxFTkJRVU03UzBGRGJrSTdTVUZEUkN4SlFVRkpMRlZCUVZVc1IwRkJSenRSUVVOaUxFOUJRVThzUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU03UzBGRGVFTTdTVUZEUkN4UFFVRlBMRU5CUVVNc1QwRkJUeXhGUVVGRk8xRkJRMklzVDBGQlR5eHpRa0ZCYzBJc1EwRkJReXhQUVVGUExFVkJRVVVzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMHRCUTNaRU8wbEJRMFFzVVVGQlVTeEhRVUZITzFGQlExQXNUMEZCVHl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRE8wdEJRM1JDTzBOQlEwbzdRVUZEUkN4UlFVRlJMRU5CUVVNc1UwRkJVeXhIUVVGSExFbEJRVWtzUjBGQlJ5eEZRVUZGTEVOQlFVTTdRVUZETDBJc1NVRkJTU3hUUVVGVExFTkJRVU03UVVGRFpDeERRVUZETEZWQlFWVXNVMEZCVXl4RlFVRkZPMGxCUTJ4Q0xGTkJRVk1zUTBGQlF5eFRRVUZUTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFZEJRVWNzUzBGQlN5eERRVUZETzBsQlEzaERMRk5CUVZNc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRE8wbEJRM1JETEZOQlFWTXNRMEZCUXl4VFFVRlRMRU5CUVVNc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVkQlFVY3NUMEZCVHl4RFFVRkRPMGxCUXpWRExGTkJRVk1zUTBGQlF5eFRRVUZUTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFZEJRVWNzVFVGQlRTeERRVUZETzBOQlF6ZERMRVZCUVVVc1UwRkJVeXhMUVVGTExGTkJRVk1zUjBGQlJ5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTJ4RExFMUJRVTBzUzBGQlN5eERRVUZETzBsQlExSXNWMEZCVnl4RFFVRkRMRWxCUVVrc1JVRkJSU3hMUVVGTExFVkJRVVVzU1VGQlNTeEZRVUZGTEU5QlFVOHNSVUZCUlR0UlFVTndReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXp0UlFVTnFRaXhKUVVGSkxFTkJRVU1zUzBGQlN5eEhRVUZITEV0QlFVc3NRMEZCUXp0UlFVTnVRaXhKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEVsQlFVa3NTVUZCU1N4RlFVRkZMRU5CUVVNN1VVRkRka0lzU1VGQlNTeERRVUZETEU5QlFVOHNSMEZCUnl4UFFVRlBMRU5CUVVNN1MwRkRNVUk3U1VGRFJDeFBRVUZQTEZWQlFWVXNRMEZCUXl4TlFVRk5MRVZCUVVVN1VVRkRkRUlzVFVGQlRTeExRVUZMTEVkQlFVY3NTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGTkxFVkJRVVVzVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXp0WlFVTm9SQ3hMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNSVUZCUlN4VFFVRlRMRU5CUVVNc1JVRkJSU3hEUVVGRE8xbEJRM0pETEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNc1RVRkJUU3hGUVVGRkxGTkJRVk1zUTBGQlF5eExRVUZMTEVOQlFVTTdXVUZEZUVNc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZOTEVWQlFVVXNVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xRkJRelZETEVsQlFVa3NTMEZCU3l4RlFVRkZPMWxCUTFBc1RVRkJUU3hKUVVGSkxFZEJRVWNzVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03V1VGRGVFTXNUMEZCVHl4RFFVRkRMRXRCUVVzc1JVRkJSU3hIUVVGSExFdEJRVXNzUTBGQlF5eFZRVUZWTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJRenRUUVVNM1F6dGhRVU5KTEVsQlFVa3NUVUZCVFN4RFFVRkRMRTFCUVUwc1NVRkJTU3hEUVVGRExFVkJRVVU3V1VGRGVrSXNUMEZCVHl4RlFVRkZMRU5CUVVNN1UwRkRZanRoUVVOSk8xbEJRMFFzVFVGQlRTeEpRVUZKTEV0QlFVc3NRMEZCUXl4RFFVRkRMRzlEUVVGdlF5eEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xTkJRM0pGTzB0QlEwbzdTVUZEUkN4UFFVRlBMRk5CUVZNc1EwRkJReXhOUVVGTkxFVkJRVVVzU1VGQlNTeEZRVUZGTzFGQlF6TkNMRTFCUVUwc1QwRkJUeXhIUVVGSExFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1VVRkRja01zVFVGQlRTeFBRVUZQTEVkQlFVY3NUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVsQlFVa3NUMEZCVHl4RFFVRkRPMUZCUXpsRExFMUJRVTBzVFVGQlRTeEhRVUZITEU5QlFVOHNSMEZCUnl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8xRkJReTlDTEUxQlFVMHNTMEZCU3l4SFFVRkhMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8xRkJRMnhFTEVsQlFVa3NTMEZCU3l4RlFVRkZPMWxCUTFBc1RVRkJUU3hEUVVGRExFdEJRVXNzUlVGQlJTeEpRVUZKTEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNN1dVRkROVUlzU1VGQlNTeFBRVUZQTEVWQlFVVTdaMEpCUTFRc1NVRkJTU3hOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRWRCUVVjc1RVRkJUU3hEUVVGRExFbEJRVWtzUjBGQlJ5eEZRVUZGTzI5Q1FVTTNReXhQUVVGUExFbEJRVWtzUzBGQlN5eERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRMRXRCUVVzc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8ybENRVU40UkR0eFFrRkRTVHR2UWtGRFJDeE5RVUZOTEVsQlFVa3NTMEZCU3l4RFFVRkRMRU5CUVVNc2RVTkJRWFZETEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03YVVKQlEzWkZPMkZCUTBvN2FVSkJRMGs3WjBKQlEwUXNUMEZCVHl4SlFVRkpMRXRCUVVzc1EwRkJReXhKUVVGSkxFVkJRVVVzUzBGQlN5eEZRVUZGTEVsQlFVa3NSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJRenRoUVVNNVF6dFRRVU5LTzB0QlEwbzdTVUZEUkN4SlFVRkpMRk5CUVZNc1IwRkJSenRSUVVOYUxGRkJRVkVzU1VGQlNTeERRVUZETEVsQlFVazdXVUZEWWl4TFFVRkxMRk5CUVZNc1EwRkJReXhGUVVGRkxFVkJRVVVzVDBGQlR5eEpRVUZKTEVOQlFVTTdXVUZETDBJc1MwRkJTeXhUUVVGVExFTkJRVU1zUzBGQlN5eEZRVUZGTEU5QlFVOHNUMEZCVHl4RFFVRkRPMWxCUTNKRExFdEJRVXNzVTBGQlV5eERRVUZETEVsQlFVa3NSVUZCUlN4UFFVRlBMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU03VTBGRGVrTTdTMEZEU2p0SlFVTkVMRWxCUVVrc1RVRkJUU3hIUVVGSE8xRkJRMVFzVDBGQlR5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJRenRMUVVNMVFqdERRVU5LTzBGQlEwUXNTMEZCU3l4RFFVRkRMRkZCUVZFc1IwRkJSeXhaUVVGWk8wbEJRM3BDTEUxQlFVMHNUMEZCVHl4SFFVRkhMRU5CUVVNc0swTkJRU3RETEVOQlFVTXNRMEZCUXp0SlFVTnNSU3hOUVVGTkxFMUJRVTBzUjBGQlJ5eERRVUZETEVkQlFVY3NSVUZCUlN4UFFVRlBMRU5CUVVNc01rSkJRVEpDTEVOQlFVTXNRMEZCUXp0SlFVTXhSQ3hOUVVGTkxFVkJRVVVzUjBGQlJ5eERRVUZETEd0Q1FVRnJRaXhEUVVGRExFTkJRVU03U1VGRGFFTXNUVUZCVFN4UlFVRlJMRWRCUVVjc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF6dEpRVU5vUXl4TlFVRk5MRTlCUVU4c1IwRkJSeXhEUVVGRExHRkJRV0VzUlVGQlJTeFJRVUZSTEVOQlFVTXNTMEZCU3l4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU14UkN4TlFVRk5MRTFCUVUwc1IwRkJSeXhEUVVGRExHbENRVUZwUWl4RlFVRkZMRkZCUVZFc1EwRkJReXhMUVVGTExFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUXpkRUxFMUJRVTBzUzBGQlN5eEhRVUZITEVOQlFVTXNTMEZCU3l4RlFVRkZMRTlCUVU4c1EwRkJReXhKUVVGSkxFVkJRVVVzVFVGQlRTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXk5RExFMUJRVTBzVDBGQlR5eEhRVUZITEVOQlFVTXNOa0pCUVRaQ0xFVkJRVVVzUlVGQlJTeERRVUZETEV0QlFVc3NSVUZCUlN4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03U1VGRGRFVXNUVUZCVFN4UFFVRlBMRWRCUVVjc1EwRkJReXcyUWtGQk5rSXNSVUZCUlN4RlFVRkZMRU5CUVVNc1MwRkJTeXhGUVVGRkxFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0SlFVTjBSU3hOUVVGTkxFMUJRVTBzUjBGQlJ5eERRVUZETEVkQlFVY3NSVUZCUlN4UFFVRlBMRU5CUVVNc1MwRkJTeXhGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTXZReXhOUVVGTkxFMUJRVTBzUjBGQlJ5eERRVUZETEhkQ1FVRjNRaXhEUVVGRExFTkJRVU03U1VGRE1VTXNUVUZCVFN4UFFVRlBMRWRCUVVjc1EwRkJReXhIUVVGSExFVkJRVVVzUzBGQlN5eERRVUZETEV0QlFVc3NSVUZCUlN4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRE4wTXNUMEZCVHp0UlFVTklMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUjBGQlJ5eEpRVUZKTEUxQlFVMHNRMEZCUXl4RFFVRkRMRVZCUVVVc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdVVUZETVVNc1EwRkJReXhUUVVGVExFTkJRVU1zUlVGQlJTeEhRVUZITEVsQlFVa3NUVUZCVFN4RFFVRkRMRU5CUVVNc1IwRkJSeXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTXhReXhEUVVGRExGTkJRVk1zUTBGQlF5eExRVUZMTEVkQlFVY3NTVUZCU1N4TlFVRk5MRU5CUVVNc1EwRkJReXhMUVVGTExFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUXk5RExFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NSMEZCUnl4SlFVRkpMRTFCUVUwc1EwRkJReXhEUVVGRExFdEJRVXNzUlVGQlJTeExRVUZMTEVOQlFVTXNTMEZCU3l4RlFVRkZMRTFCUVUwc1EwRkJReXhGUVVGRkxFVkJRVVVzVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMHRCUTJoR0xFTkJRVU03UTBGRFRDeEZRVUZGTEVOQlFVTTdRVUZEU2l4VFFVRlRMRzlDUVVGdlFpeERRVUZETEUxQlFVMHNSVUZCUlR0SlFVTnNReXhOUVVGTkxFMUJRVTBzUjBGQlJ5eEpRVUZKTEVkQlFVY3NSVUZCUlN4RFFVRkRPMGxCUTNwQ0xFdEJRVXNzVFVGQlRTeExRVUZMTEVsQlFVa3NUVUZCVFN4RlFVRkZPMUZCUTNoQ0xFMUJRVTBzVTBGQlV5eEhRVUZITEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNN1VVRkRiRU1zU1VGQlNTeFRRVUZUTEVsQlFVa3NVMEZCVXl4RlFVRkZPMWxCUTNoQ0xFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1UwRkRla0k3UzBGRFNqdEpRVU5FTEU5QlFVOHNUVUZCVFN4RFFVRkRPME5CUTJwQ0xFRkJRMFE3TzBGREwwaFBMRTFCUVUwc1pVRkJaU3hEUVVGRE8wbEJRM3BDTEZkQlFWY3NRMEZCUXl4UFFVRlBMRVZCUVVVc1VVRkJVU3hGUVVGRk8xRkJRek5DTEVsQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1QwRkJUeXhEUVVGRE8xRkJRM1pDTEVsQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1MwRkJTeXhEUVVGRE8xRkJRM0pDTEVsQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1VVRkJVU3hEUVVGRE8xRkJRM3BDTEVsQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1NVRkJTU3hIUVVGSExFVkJRVVVzUTBGQlF6dFJRVU14UWl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVkQlFVY3NTVUZCU1N4blFrRkJaMElzUTBGQlF5eERRVUZETEZOQlFWTXNTMEZCU3l4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJRenRMUVVOcVJ6dEpRVU5FTEV0QlFVc3NSMEZCUnp0UlFVTktMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eEZRVUZGTzFsQlEyWXNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhGUVVGRkxFVkJRVVVzVlVGQlZTeEZRVUZGTEVsQlFVa3NSVUZCUlN4VFFVRlRMRVZCUVVVc1NVRkJTU3hGUVVGRkxFOUJRVThzUlVGQlJTeEpRVUZKTEVWQlFVVXNRMEZCUXl4RFFVRkRPMWxCUTJ4SExFbEJRVWtzUTBGQlF5eFBRVUZQTEVkQlFVY3NTVUZCU1N4RFFVRkRPMWxCUTNCQ0xFbEJRVWtzUTBGQlF5eFBRVUZQTEVWQlFVVXNRMEZCUXp0VFFVTnNRanRMUVVOS08wbEJRMFFzU1VGQlNTeEhRVUZITzFGQlEwZ3NTVUZCU1N4SlFVRkpMRU5CUVVNc1QwRkJUeXhGUVVGRk8xbEJRMlFzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExGZEJRVmNzUlVGQlJTeERRVUZETzFsQlEzQkRMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4VlFVRlZMRVZCUVVVc1EwRkJRenRaUVVOdVF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4SFFVRkhMRXRCUVVzc1EwRkJRenRUUVVONFFqdExRVU5LTzBsQlEwUXNUMEZCVHl4SFFVRkhPMUZCUTA0c1NVRkJTU3hKUVVGSkxFTkJRVU1zVDBGQlR5eEZRVUZGTzFsQlEyUXNUVUZCVFN4UFFVRlBMRWRCUVVjc1NVRkJTU3hIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEcxQ1FVRnRRaXhGUVVGRkxFTkJRVU1zUTBGQlF6dFpRVU53UkN4TFFVRkxMRTFCUVUwc1QwRkJUeXhKUVVGSkxFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhGUVVGRk8yZENRVU0zUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eFBRVUZQTEVOQlFVTXNSVUZCUlR0dlFrRkRka0lzU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenRwUWtGREwwSTdZVUZEU2p0WlFVTkVMRXRCUVVzc1RVRkJUU3hQUVVGUExFbEJRVWtzUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1JVRkJSVHRuUWtGRGRrTXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6dGhRVU0xUWp0VFFVTktPMHRCUTBvN08wbEJSVVFzWjBKQlFXZENMRU5CUVVNc1UwRkJVeXhGUVVGRk8xRkJRM2hDTEV0QlFVc3NUVUZCVFN4UlFVRlJMRWxCUVVrc1UwRkJVeXhGUVVGRk8xbEJRemxDTEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03VTBGRGJFTTdTMEZEU2p0SlFVTkVMR1ZCUVdVc1EwRkJReXhSUVVGUkxFVkJRVVU3VVVGRGRFSXNTVUZCU1N4UlFVRlJMRU5CUVVNc1NVRkJTU3hKUVVGSkxGbEJRVmtzUlVGQlJUdFpRVU12UWl4SlFVRkpMRU5CUVVNc2MwSkJRWE5DTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTFCUVUwc1JVRkJSU3hSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVTTdVMEZEZUVVN1lVRkRTU3hKUVVGSkxGRkJRVkVzUTBGQlF5eEpRVUZKTEVsQlFVa3NWMEZCVnl4RlFVRkZPMWxCUTI1RExFbEJRVWtzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhSUVVGUkxFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTTdXVUZEYUVRc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRkZCUVZFc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF6dFRRVU12UXp0TFFVTktPMGxCUTBRc2MwSkJRWE5DTEVOQlFVTXNTVUZCU1N4RlFVRkZMR0ZCUVdFc1JVRkJSVHRSUVVONFF5eE5RVUZOTEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNN1VVRkRja0lzU1VGQlNTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWRCUVVjc1EwRkJReXhQUVVGUExFTkJRVU1zUlVGQlJUdFpRVU0xUWl4SlFVRkpMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zVDBGQlR5eERRVUZETEVWQlFVVTdaMEpCUXpWQ0xFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEdGQlFXRXNRMEZCUXl4RFFVRkRPMkZCUTJwRk8ybENRVU5KTzJkQ1FVTkVMRWxCUVVrc1EwRkJReXhoUVVGaExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdZVUZETDBJN1UwRkRTanRoUVVOSkxFbEJRVWtzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1JVRkJSVHRaUVVOcVF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8xTkJRelZDTzB0QlEwbzdTVUZEUkN4dFFrRkJiVUlzUTBGQlF5eExRVUZMTEVWQlFVVTdVVUZEZGtJc1MwRkJTeXhOUVVGTkxFbEJRVWtzU1VGQlNTeExRVUZMTEVWQlFVVTdXVUZEZEVJc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eEpRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhEUVVGRE8xTkJRemxETzB0QlEwbzdTVUZEUkN4cFFrRkJhVUlzUTBGQlF5eExRVUZMTEVWQlFVVTdVVUZEY2tJc1MwRkJTeXhOUVVGTkxFbEJRVWtzU1VGQlNTeExRVUZMTEVWQlFVVTdXVUZEZEVJc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eEpRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE8xTkJRek5ETzB0QlEwbzdPMGxCUlVRc1dVRkJXU3hEUVVGRExFOUJRVThzUlVGQlJUdFJRVU5zUWl4UFFVRlBMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zV1VGQldTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMHRCUXpsRE8wbEJRMFFzYlVKQlFXMUNMRU5CUVVNc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF5eFBRVUZQTEVWQlFVVTdVVUZEY2tNc1QwRkJUeXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEcxQ1FVRnRRaXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzB0QlEyeEVPMGxCUTBRc1YwRkJWeXhEUVVGRExFbEJRVWtzUlVGQlJTeFRRVUZUTEVWQlFVVTdVVUZEZWtJc1RVRkJUU3hKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRSUVVONFF5eEpRVUZKTEVsQlFVa3NSVUZCUlR0WlFVTk9MRXRCUVVzc1RVRkJUU3hQUVVGUExFbEJRVWtzU1VGQlNTeERRVUZETEcxQ1FVRnRRaXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTzJkQ1FVTnNSQ3hUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJRenRoUVVOcVF6dFRRVU5LTzB0QlEwbzdTVUZEUkN4bFFVRmxMRU5CUVVNc1NVRkJTU3hGUVVGRk8xRkJRMnhDTEVsQlFVa3NTVUZCU1N4RFFVRkRMRkZCUVZFc1NVRkJTU3hKUVVGSkxFTkJRVU1zV1VGQldTeEZRVUZGTzFsQlEzQkRMRTlCUVU4c1NVRkJTU3hEUVVGRE8xTkJRMlk3UzBGRFNqczdTVUZGUkN4VlFVRlZMRU5CUVVNc1QwRkJUeXhGUVVGRk8xRkJRMmhDTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFZEJRVWNzUTBGQlF5eFBRVUZQTEVOQlFVTXNSVUZCUlR0WlFVTTNRaXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVkQlFVY3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenRaUVVNelFpeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMR05CUVdNc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6dFRRVU42UXp0TFFVTktPMGxCUTBRc1lVRkJZU3hEUVVGRExFOUJRVThzUlVGQlJUdFJRVU51UWl4SlFVRkpMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUjBGQlJ5eERRVUZETEU5QlFVOHNRMEZCUXl4RlFVRkZPMWxCUXpWQ0xFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8xbEJRemxDTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1UwRkRNME03UzBGRFNqdERRVU5LTEVGQlEwUTdPMEZETTBkUExFMUJRVTBzYVVKQlFXbENMRU5CUVVNN1NVRkRNMElzVjBGQlZ5eERRVUZETEU5QlFVOHNSVUZCUlN4aFFVRmhMRVZCUVVVc1VVRkJVU3hGUVVGRk8xRkJRekZETEVsQlFVa3NRMEZCUXl4aFFVRmhMRWRCUVVjc1lVRkJZU3hEUVVGRE8xRkJRMjVETEVsQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1VVRkJVU3hEUVVGRE8xRkJRM3BDTEVsQlFVa3NRMEZCUXl4bFFVRmxMRWRCUVVjc1NVRkJTU3hsUVVGbExFTkJRVU1zVDBGQlR5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMHRCUXpkRU8wbEJRMFFzU1VGQlNTeFBRVUZQTEVkQlFVYzdVVUZEVml4UFFVRlBMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zVDBGQlR5eERRVUZETzB0QlEzWkRPMGxCUTBRc1NVRkJTU3hSUVVGUkxFZEJRVWM3VVVGRFdDeFBRVUZQTEVOQlFVTXNRMEZCUXl4RlFVRkZMRWxCUVVrc1EwRkJReXhoUVVGaExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdTMEZEY0VNN1NVRkRSQ3hMUVVGTExFZEJRVWM3VVVGRFNpeEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRE8wdEJRMmhETzBsQlEwUXNTVUZCU1N4SFFVRkhPMUZCUTBnc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXp0TFFVTXZRanM3U1VGRlJDeFpRVUZaTEVOQlFVTXNUMEZCVHl4RlFVRkZPMUZCUTJ4Q0xFOUJRVThzVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVU03UzBGRGJrUTdTVUZEUkN4dFFrRkJiVUlzUTBGQlF5eEpRVUZKTEVWQlFVVTdVVUZEZEVJc1RVRkJUU3hMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXp0UlFVTndSQ3hOUVVGTkxFOUJRVThzUjBGQlJ5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU5xUlN4UFFVRlBMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdTMEZEYUVNN1NVRkRSQ3hqUVVGakxFTkJRVU1zVDBGQlR5eEZRVUZGTzFGQlEzQkNMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zZFVKQlFYVkNMRU5CUVVNc1QwRkJUeXhGUVVGRkxFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUXp0TFFVTjBSVHRKUVVORUxHZENRVUZuUWl4RFFVRkRMRTlCUVU4c1JVRkJSVHRSUVVOMFFpeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMSGxDUVVGNVFpeERRVUZETEU5QlFVOHNSVUZCUlN4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVU03UzBGRGVFVTdTVUZEUkN4MVFrRkJkVUlzUTBGQlF5eFBRVUZQTEVWQlFVVXNZVUZCWVN4RlFVRkZPMUZCUXpWRExFbEJRVWtzWVVGQllTeEpRVUZKTEVsQlFVa3NRMEZCUXl4aFFVRmhMRVZCUVVVN1dVRkRja01zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl3MFFrRkJORUlzUTBGQlF5eFBRVUZQTEVWQlFVVXNZVUZCWVN4RFFVRkRMRU5CUVVNN1UwRkRkRVU3UzBGRFNqdERRVU5LTEVGQlEwUTdPMEZEZUVOUExFMUJRVTBzVVVGQlVTeERRVUZETzBsQlEyeENMRmRCUVZjc1IwRkJSenRSUVVOV0xFbEJRVWtzUTBGQlF5eFhRVUZYTEVkQlFVY3NTVUZCU1N4SFFVRkhMRVZCUVVVc1EwRkJRenRSUVVNM1FpeEpRVUZKTEVOQlFVTXNWMEZCVnl4SFFVRkhMRWxCUVVrc1IwRkJSeXhGUVVGRkxFTkJRVU03UzBGRGFFTTdTVUZEUkN4SFFVRkhMRU5CUVVNc1IwRkJSeXhGUVVGRkxFdEJRVXNzUlVGQlJUdFJRVU5hTEVkQlFVY3NRMEZCUXl4SFFVRkhMRVZCUVVVc1MwRkJTeXhGUVVGRkxFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXp0UlFVTnNReXhIUVVGSExFTkJRVU1zUzBGQlN5eEZRVUZGTEVkQlFVY3NSVUZCUlN4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU03UzBGRGNrTTdTVUZEUkN4TlFVRk5MRU5CUVVNc1IwRkJSeXhGUVVGRkxFdEJRVXNzUlVGQlJUdFJRVU5tTEVkQlFVY3NRMEZCUXl4SFFVRkhMRVZCUVVVc1MwRkJTeXhGUVVGRkxFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXp0UlFVTnNReXhIUVVGSExFTkJRVU1zUzBGQlN5eEZRVUZGTEVkQlFVY3NSVUZCUlN4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU03UzBGRGNrTTdTVUZEUkN4SFFVRkhMRU5CUVVNc1IwRkJSeXhGUVVGRkxFdEJRVXNzUlVGQlJUdFJRVU5hTEUxQlFVMHNUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMUZCUTNwRExFOUJRVThzVFVGQlRTeEhRVUZITEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUzBGQlN5eERRVUZETzB0QlF6ZERPMGxCUTBRc1pVRkJaU3hEUVVGRExFdEJRVXNzUlVGQlJUdFJRVU51UWl4TlFVRk5MRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEVkQlFVY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRSUVVONlF5eFBRVUZQTEVsQlFVa3NSMEZCUnl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXp0TFFVTjJRenRKUVVORUxHVkJRV1VzUTBGQlF5eEhRVUZITEVWQlFVVTdVVUZEYWtJc1RVRkJUU3hOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03VVVGRGVrTXNUMEZCVHl4TlFVRk5MRWRCUVVjc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNN1MwRkRNME03U1VGRFJDeHRRa0ZCYlVJc1EwRkJReXhIUVVGSExFVkJRVVU3VVVGRGNrSXNUVUZCVFN4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1VVRkRla01zVDBGQlR5eE5RVUZOTEVkQlFVY3NUVUZCVFN4RFFVRkRMRWxCUVVrc1IwRkJSeXhEUVVGRExFTkJRVU03UzBGRGJrTTdRMEZEU2p0QlFVTkVMRk5CUVZNc1IwRkJSeXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNTMEZCU3l4RlFVRkZPMGxCUTNSQ0xFbEJRVWtzUlVGQlJTeERRVUZETzBsQlExQXNTVUZCU1N4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTzFGQlEyUXNSVUZCUlN4SFFVRkhMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdTMEZEY2tJN1UwRkRTVHRSUVVORUxFVkJRVVVzUjBGQlJ5eEpRVUZKTEVkQlFVY3NSVUZCUlN4RFFVRkRPMUZCUTJZc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNN1MwRkRjRUk3U1VGRFJDeEZRVUZGTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wTkJRMkk3UVVGRFJDeFRRVUZUTEVkQlFVY3NRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFdEJRVXNzUlVGQlJUdEpRVU4wUWl4TlFVRk5MRVZCUVVVc1IwRkJSeXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTNoQ0xFbEJRVWtzUlVGQlJTeEZRVUZGTzFGQlEwb3NSVUZCUlN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dExRVU5vUWp0RFFVTktMRUZCUTBRN08wRkROVU5QTEUxQlFVMHNaMEpCUVdkQ0xFTkJRVU03U1VGRE1VSXNWMEZCVnl4RFFVRkRMRTlCUVU4c1JVRkJSU3hSUVVGUkxFVkJRVVU3VVVGRE0wSXNTVUZCU1N4RFFVRkRMRkZCUVZFc1IwRkJSeXhSUVVGUkxFTkJRVU03VVVGRGVrSXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1IwRkJSeXhKUVVGSkxHVkJRV1VzUTBGQlF5eFBRVUZQTEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1VVRkRNVVFzU1VGQlNTeERRVUZETEZkQlFWY3NSMEZCUnl4SlFVRkpMRWRCUVVjc1JVRkJSU3hEUVVGRE8xRkJRemRDTEVsQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1NVRkJTU3hSUVVGUkxFVkJRVVVzUTBGQlF6dFJRVU12UWl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hIUVVGSExFbEJRVWtzVVVGQlVTeEZRVUZGTEVOQlFVTTdTMEZEY0VNN1NVRkRSQ3hKUVVGSkxFOUJRVThzUjBGQlJ6dFJRVU5XTEU5QlFVOHNTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJReXhQUVVGUExFTkJRVU03UzBGRGRrTTdTVUZEUkN4TFFVRkxMRWRCUVVjN1VVRkRTaXhKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRPMHRCUTJoRE8wbEJRMFFzU1VGQlNTeEhRVUZITzFGQlEwZ3NTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF6dExRVU12UWp0SlFVTkVMRTlCUVU4c1IwRkJSenRSUVVOT0xFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVNN1MwRkRiRU03U1VGRFJDeEpRVUZKTEU5QlFVOHNSMEZCUnp0UlFVTldMRTlCUVU4c1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eFBRVUZQTEVOQlFVTTdTMEZEZGtNN1NVRkRSQ3hKUVVGSkxGTkJRVk1zUjBGQlJ6dFJRVU5hTEU5QlFVOHNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTTdTMEZEZGtNN1NVRkRSQ3hKUVVGSkxHbENRVUZwUWl4SFFVRkhPMUZCUTNCQ0xFMUJRVTBzYVVKQlFXbENMRWRCUVVjc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzFGQlEyeEZMRTlCUVU4c2FVSkJRV2xDTEVOQlFVTXNUVUZCVFN4SlFVRkpMRU5CUVVNc1IwRkJSeXhUUVVGVExFZEJRVWNzYVVKQlFXbENMRU5CUVVNN1MwRkRlRVU3TzBsQlJVUXNaVUZCWlN4RFFVRkRMRkZCUVZFc1JVRkJSVHRSUVVOMFFpeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhIUVVGSExFTkJRVU1zVVVGQlVTeERRVUZETEVWQlFVVTdXVUZEYWtNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eEhRVUZITEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1dVRkRMMElzUzBGQlN5eE5RVUZOTEZOQlFWTXNTVUZCU1N4UlFVRlJMRU5CUVVNc1ZVRkJWU3hGUVVGRk8yZENRVU42UXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFZEJRVWNzUTBGQlF5eFJRVUZSTEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNN1lVRkROVU03V1VGRFJDeEpRVUZKTEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVNN1UwRkRiRUk3UzBGRFNqdEpRVU5FTEhGQ1FVRnhRaXhEUVVGRExGRkJRVkVzUlVGQlJUdFJRVU0xUWl4SlFVRkpMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zUjBGQlJ5eERRVUZETEZGQlFWRXNRMEZCUXl4RlFVRkZPMWxCUTJoRExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8xbEJRMnhETEV0QlFVc3NUVUZCVFN4VFFVRlRMRWxCUVVrc1VVRkJVU3hEUVVGRExGVkJRVlVzUlVGQlJUdG5Ra0ZEZWtNc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RlFVRkZMRk5CUVZNc1EwRkJReXhEUVVGRE8yRkJReTlETzFsQlEwUXNTVUZCU1N4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRE8xTkJRMnhDTzB0QlEwbzdPMGxCUlVRc1dVRkJXU3hEUVVGRExFOUJRVThzUlVGQlJUdFJRVU5zUWl4UFFVRlBMSE5DUVVGelFpeERRVUZETEU5QlFVOHNSVUZCUlN4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNRMEZCUXp0TFFVTnNSVHRKUVVORUxHMUNRVUZ0UWl4RFFVRkRMRWxCUVVrc1JVRkJSVHRSUVVOMFFpeE5RVUZOTEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRE8xRkJRM0JFTEUxQlFVMHNUMEZCVHl4SFFVRkhMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRE1VVXNUMEZCVHl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETzB0QlEyaERPMGxCUTBRc1kwRkJZeXhEUVVGRExFOUJRVThzUlVGQlJUdFJRVU53UWl4TFFVRkxMRTFCUVUwc1VVRkJVU3hKUVVGSkxFbEJRVWtzUTBGQlF5eFRRVUZUTEVWQlFVVTdXVUZEYmtNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNSMEZCUnl4RFFVRkRMRkZCUVZFc1JVRkJSU3hQUVVGUExFTkJRVU1zUlVGQlJUdG5Ra0ZEZGtNc1NVRkJTU3hSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETEU5QlFVOHNRMEZCUXl4RlFVRkZPMjlDUVVNelFpeEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRkZCUVZFc1JVRkJSU3hQUVVGUExFTkJRVU1zUTBGQlF6dHBRa0ZEZGtNN1lVRkRTanRUUVVOS08wdEJRMG83U1VGRFJDeG5Ra0ZCWjBJc1EwRkJReXhQUVVGUExFVkJRVVU3VVVGRGRFSXNTMEZCU3l4TlFVRk5MRkZCUVZFc1NVRkJTU3hKUVVGSkxFTkJRVU1zVTBGQlV5eEZRVUZGTzFsQlEyNURMRWxCUVVrc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEhRVUZITEVOQlFVTXNVVUZCVVN4RlFVRkZMRTlCUVU4c1EwRkJReXhGUVVGRk8yZENRVU4wUXl4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExGRkJRVkVzUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXp0aFFVTjZRenRUUVVOS08wdEJRMG83U1VGRFJDeDFRa0ZCZFVJc1EwRkJReXhQUVVGUExFVkJRVVVzWVVGQllTeEZRVUZGTzFGQlF6VkRMRXRCUVVzc1RVRkJUU3hSUVVGUkxFbEJRVWtzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4bFFVRmxMRU5CUVVNc1lVRkJZU3hEUVVGRExFVkJRVVU3V1VGRGJrVXNUVUZCVFN4UFFVRlBMRWRCUVVjc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0WlFVTXhReXhOUVVGTkxFOUJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWRCUVVjc1EwRkJReXhSUVVGUkxFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVTTdXVUZEY2tRc1NVRkJTU3hQUVVGUExFbEJRVWtzUTBGQlF5eFBRVUZQTEVWQlFVVTdaMEpCUTNKQ0xFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNVVUZCVVN4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVGRE8yRkJRM1pETzJsQ1FVTkpMRWxCUVVrc1QwRkJUeXhKUVVGSkxFTkJRVU1zVDBGQlR5eEZRVUZGTzJkQ1FVTXhRaXhKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEZGQlFWRXNSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJRenRoUVVONlF6dFRRVU5LTzB0QlEwbzdPMGxCUlVRc1YwRkJWeXhEUVVGRExGRkJRVkVzUlVGQlJTeFBRVUZQTEVWQlFVVTdVVUZETTBJc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEhRVUZITEVOQlFVTXNVVUZCVVN4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVGRE8xRkJRM0pETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc2MwSkJRWE5DTEVOQlFVTXNUMEZCVHl4RlFVRkZMRkZCUVZFc1EwRkJReXhEUVVGRE8wdEJRek5FTzBsQlEwUXNZVUZCWVN4RFFVRkRMRkZCUVZFc1JVRkJSU3hQUVVGUExFVkJRVVU3VVVGRE4wSXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkRPMUZCUTNoRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNkMEpCUVhkQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEZGQlFWRXNRMEZCUXl4RFFVRkRPMHRCUXpkRU8wTkJRMG9zUVVGRFJEczdRVU5xUjA4c1RVRkJUU3hwUWtGQmFVSXNRMEZCUXp0SlFVTXpRaXhYUVVGWExFTkJRVU1zVDBGQlR5eEZRVUZGTEdGQlFXRXNSVUZCUlN4UlFVRlJMRVZCUVVVN1VVRkRNVU1zU1VGQlNTeERRVUZETEdGQlFXRXNSMEZCUnl4aFFVRmhMRU5CUVVNN1VVRkRia01zU1VGQlNTeERRVUZETEZGQlFWRXNSMEZCUnl4UlFVRlJMRU5CUVVNN1VVRkRla0lzU1VGQlNTeERRVUZETEdWQlFXVXNSMEZCUnl4SlFVRkpMR1ZCUVdVc1EwRkJReXhQUVVGUExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdVVUZETVVRc1NVRkJTU3hEUVVGRExHVkJRV1VzUjBGQlJ5eEpRVUZKTEZGQlFWRXNSVUZCUlN4RFFVRkRPMHRCUTNwRE8wbEJRMFFzU1VGQlNTeFBRVUZQTEVkQlFVYzdVVUZEVml4UFFVRlBMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zVDBGQlR5eERRVUZETzB0QlEzWkRPMGxCUTBRc1MwRkJTeXhIUVVGSE8xRkJRMG9zU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4TFFVRkxMRVZCUVVVc1EwRkJRenRMUVVOb1F6dEpRVU5FTEVsQlFVa3NSMEZCUnp0UlFVTklMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTTdTMEZETDBJN1NVRkRSQ3hQUVVGUExFZEJRVWM3VVVGRFRpeEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRE8wdEJRMnhETzBsQlEwUXNTVUZCU1N4UFFVRlBMRWRCUVVjN1VVRkRWaXhQUVVGUExFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTXNUMEZCVHl4RFFVRkRPMHRCUTNaRE8wbEJRMFFzU1VGQlNTeFJRVUZSTEVkQlFVYzdVVUZEV0N4UFFVRlBMRU5CUVVNc1EwRkJReXhGUVVGRkxFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1MwRkRjRU03U1VGRFJDeDNRa0ZCZDBJc1EwRkJReXhMUVVGTExFVkJRVVU3VVVGRE5VSXNUMEZCVHl4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRExHVkJRV1VzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0TFFVTjBSRHM3U1VGRlJDeFpRVUZaTEVOQlFVTXNUMEZCVHl4RlFVRkZPMUZCUTJ4Q0xFOUJRVThzVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVU03UzBGRGJrUTdTVUZEUkN4dFFrRkJiVUlzUTBGQlF5eEpRVUZKTEVWQlFVVTdVVUZEZEVJc1RVRkJUU3hMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXp0UlFVTndSQ3hOUVVGTkxFOUJRVThzUjBGQlJ5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU5xUlN4UFFVRlBMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdTMEZEYUVNN1NVRkRSQ3hqUVVGakxFTkJRVU1zVDBGQlR5eEZRVUZGTzFGQlEzQkNMRTFCUVUwc1UwRkJVeXhIUVVGSExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMSE5DUVVGelFpeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRia1VzUzBGQlN5eE5RVUZOTEV0QlFVc3NTVUZCU1N4VFFVRlRMRVZCUVVVN1dVRkRNMElzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFdEJRVXNzUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXp0VFFVTXpRenRMUVVOS08wbEJRMFFzWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhGUVVGRk8xRkJRM1JDTEUxQlFVMHNUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenRSUVVOcVJDeExRVUZMTEUxQlFVMHNTMEZCU3l4SlFVRkpMRTFCUVUwc1JVRkJSVHRaUVVONFFpeEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zUzBGQlN5eEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkRPMU5CUXpsRE8wdEJRMG83U1VGRFJDeDFRa0ZCZFVJc1EwRkJReXhQUVVGUExFVkJRVVU3VVVGRE4wSXNUVUZCVFN4WFFVRlhMRWRCUVVjc1NVRkJTU3hEUVVGRExITkNRVUZ6UWl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8xRkJRM3BFTEV0QlFVc3NUVUZCVFN4TFFVRkxMRWxCUVVrc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNSVUZCUlR0WlFVTjZReXhKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1MwRkJTeXhGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZETzFOQlF6TkRPMUZCUTBRc1MwRkJTeXhOUVVGTkxFdEJRVXNzU1VGQlNTeEpRVUZKTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zVDBGQlR5eERRVUZETEVWQlFVVTdXVUZEYmtRc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRVZCUVVVN1owSkJRM3BDTEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eExRVUZMTEVWQlFVVXNUMEZCVHl4RFFVRkRMRU5CUVVNN1lVRkRPVU03VTBGRFNqdExRVU5LT3p0SlFVVkVMR3RDUVVGclFpeERRVUZETEV0QlFVc3NSVUZCUlN4UFFVRlBMRVZCUVVVN1VVRkRMMElzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc1IwRkJSeXhEUVVGRExFOUJRVThzUlVGQlJTeExRVUZMTEVOQlFVTXNSVUZCUlR0WlFVTXpReXhKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEVkQlFVY3NRMEZCUXl4UFFVRlBMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03V1VGRGVrTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXdyUWtGQkswSXNRMEZCUXl4UFFVRlBMRVZCUVVVc1MwRkJTeXhGUVVGRkxFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUXp0VFFVTnlSanRMUVVOS08wbEJRMFFzY1VKQlFYRkNMRU5CUVVNc1MwRkJTeXhGUVVGRkxFOUJRVThzUlVGQlJUdFJRVU5zUXl4SlFVRkpMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zUjBGQlJ5eERRVUZETEU5QlFVOHNSVUZCUlN4TFFVRkxMRU5CUVVNc1JVRkJSVHRaUVVNeFF5eEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRTFCUVUwc1EwRkJReXhQUVVGUExFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTTdXVUZETlVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eHBRMEZCYVVNc1EwRkJReXhQUVVGUExFVkJRVVVzUzBGQlN5eEZRVUZGTEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJRenRUUVVOMlJqdExRVU5LTzBsQlEwUXNiVUpCUVcxQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTzFGQlEzcENMRTlCUVU4c1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eGxRVUZsTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1MwRkRlRVE3U1VGRFJDeHpRa0ZCYzBJc1EwRkJReXhQUVVGUExFVkJRVVU3VVVGRE5VSXNUVUZCVFN4TlFVRk5MRWRCUVVjc1NVRkJTU3hIUVVGSExFVkJRVVVzUTBGQlF6dFJRVU42UWl4TlFVRk5MRXRCUVVzc1IwRkJSeXhQUVVGUExFTkJRVU1zV1VGQldTeERRVUZETEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU03VVVGRE4wUXNTMEZCU3l4TlFVRk5MRXRCUVVzc1NVRkJTU3hMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4RlFVRkZPMWxCUTNCRExFbEJRVWtzUzBGQlN5eERRVUZETEUxQlFVMHNSVUZCUlR0blFrRkRaQ3hOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMkZCUTNKQ08xTkJRMG83VVVGRFJDeFBRVUZQTEUxQlFVMHNRMEZCUXp0TFFVTnFRanREUVVOS0xFRkJRMFFzT3pzN096czdMRHM3TERzN0luMD1cbiJdLCJuYW1lcyI6WyJjb25zdCIsImxldCIsInRoaXMiLCJlbGVtZW50IiwidG9rZW4iXSwibWFwcGluZ3MiOiJBQUFBLENBQUMsVUFBVSxNQUFNLEVBQUUsT0FBTyxFQUFFO0NBQzNCLE9BQU8sT0FBTyxLQUFLLFFBQVEsSUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQztDQUMvRSxPQUFPLE1BQU0sS0FBSyxVQUFVLElBQUksTUFBTSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxPQUFPLENBQUM7Q0FDekUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3pELENBQUMs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
